[{"title":"IP签名","url":"/Arknight-notes/posts/60087.html","content":"\n\n\n\n\nd&#x2F;)\n","categories":["博客美化"],"tags":["美化"]},{"title":"LiteLoaderQQNT","url":"/Arknight-notes/posts/12035.html","content":"LiteLoaderQQNTLiteLoaderQQNT 是 QQNT 的插件加载器，一般在 QQNT 的环境内简称为 LiteLoader。它可以让你自由地为 QQNT 添加各种插件，并实现例如美化主题、增加功能等各种功能。\n（比如防撤回，设置动态背景啥的\n\n（波奇可爱捏\n安装此文档为 LiteLoaderQQNT 1.1.x 编写\n\n（法一）（推荐）第三方工具一些社区开发的安装工具来帮助你快速安装，或跳过此条目来阅读官方安装教程\n link LiteLoaderQQNT 快速安装, https://github.com/Mzdyl/LiteLoaderQQNT_Install/, https://avatars.githubusercontent.com/u/95263282?v=4 \n\n（法二）你需要先下载 LiteLoaderQQNT 到任意位置，以下有两种方式\n\n通过 Release\n前往 LiteLoaderQQNT 仓库，在 Release 中 Latest 内，下载 LiteLoaderQQNT.zip 文件，将压缩包内 LiteLoaderQQNT 目录解压到任意位置\nLiteLoaderQQNT：https://github.com/LiteLoaderQQNT/LiteLoaderQQNT\n\n通过 Clone\n使用 Git 工具将 LiteLoaderQQNT 仓库 Clone 到本地任意位置\nshell\ngit clone --depth 1 https://github.com/LiteLoaderQQNT/LiteLoaderQQNT.git\n\n找到 QQNT 安装目录，编辑 resources\\app\\app_launcher\\index.js 文件，在最前端插入一行require(String.raw此处为你 LiteLoaderQQNT 目录路径);\njavascript\nrequire(String.raw`C:\\LiteloaderQQNT`); // 此处换成你 LiteLoaderQQNT 目录位置require(&#x27;./launcher.node&#x27;).load(&#x27;external_index&#x27;, module);\n\n请确保拥有 QQNT 安装目录的读写权限！如果不想给予 QQNT 安装目录读写权限\n\n按照下文 存储位置 一节进行设置\n将 LiteLoaderQQNT/src/preload.js 复制到 QQNT/resources/app/versions/此处为版本号/application/preload.js\n\nLiteLoaderQQNT 会在第二步骤的文件不一致或没有文件时自动复制，也就是说在更新本体后需再进行一次这步骤\n\n插件此文档为 LiteLoaderQQNT 1.1.x 编写\n安装方式一：手动安装如果你有现成的插件，请先确保是与 LiteLoaderQQNT 兼容的，并且拥有对应依赖插件\n将插件目录移动到 LiteLoaderQQNT/plugins 文件夹内，如果插件是压缩包请先解压\n方式二（推荐）：LiteLoaderQQNT Plugin 插件安装助手可以先手动安装第三方插件市场类插件，在其中安装插件\nhttps://github.com/ltxhhz/LL-plugin-list-viewer/功能\n插件列表查看\n插件检查更新\n插件安装（支持镜像）\n插件卸载\n插件查找\n\n\n\n依赖查找\n\n\n使用方法法一：下载发行版https://github.com/ltxhhz/LL-plugin-list-viewer/releases/tag/v1.3.1\n\n下载发行版并解压\n将文件夹移动至 LiteLoaderQQNT数据目录/plugins/ 下面\n重启 QQNT\n\n法二：使用 git clone\nclone 本仓库 git clone https://github.com/ltxhhz/LL-plugin-list-viewer.git\n运行以下命令\n\nnpm inpm run build\n\n\n\n\n如果clone到了 plugins 目录下，修改 manifest.json 中 inject 为\n\n&quot;injects&quot;: &#123;    &quot;main&quot;: &quot;./dist/main/index.js&quot;,    &quot;preload&quot;: &quot;./dist/preload/index.js&quot;,    &quot;renderer&quot;: &quot;./dist/renderer/index.js&quot;&#125;\n\n\n\n\n否则可以将 dist 目录移动到 LiteLoaderQQNT数据目录/plugins/ 目录下\n\n使用安装完后打开QQ打开设置页面选择插件列表即可\n\n附录寻找插件插件列表官方维护着一份插件列表，收录了已知的大部分插件，可在官网首页中查看详情\n通过搜索LiteLoaderQQNT 的插件基本发布在 GitHub，善用搜索可以快速的找到所需插件\n比如在搜索框键入关键词LiteLoader和插件，即可找到大量LiteLoaderQQNT生态的插件\n官网首页LiteLoaderQQNt 官网下面已列出全部已收录插件，点击卡片即可跳转至对应仓库\n插件市场有一些第三方插件市场，手动安装后可列出大量插件\n修补此条目仅需 Windows 用户查看，其他系统无需继续阅读此条目\n由于 Windows 系统平台 QQNT 被添加文件完整性验证，你需要额外步骤来解除限制,有下列四种方式：\n\nDLLHijackMethod\n在 Release 下载 dll 文件，重命名为 dbghelp.dll 放入 QQ.exe 同级目录下即可https://github.com/LiteLoaderQQNT/QQNTFileVerifyPatch/tree/DLLHijackMethod\n\nQQNTFileVerifyPatch\n在 Release 下载 exe 文件，运行将弹出文件选择框，进入 QQNT 安装目录选择 QQ.exe 开始修补，每次更新都需要重新修补https://github.com/LiteLoaderQQNT/QQNTFileVerifyPatch\n\nPatcherNFixer\n在 Release 下载 zip 文件，解压后运行 exe 将弹出图形化界面，根据软件界面提示选择相应选项与修补方式，每次更新都需要重新修补https://github.com/xh321/LiteLoaderQQNT-PatcherNFixer\n\nV8Killer\n此方式目前过于麻烦，且需要自行寻找对应的 RVA 偏移量，只说明此方式的可行性，需自行探索使用方式https://github.com/ShellWen/v8_killer\n\n\n检查按照上述教程完成安装后，有两种方法检查 LiteLoaderQQNT 是否成功安装\n\n运行 QQNT 并打开设置，查看左侧列表是否出现 LiteLoaderQQNT 选项\n使用终端运行 QQNT 查看是否有 LiteLoaderQQNT 相关内容输出显示\n\n如果有显示，即安装成功，玩的开心！\n存储目录支持设置 LITELOADERQQNT_PROFILE 环境变量指定 data plugins config.json 存储位置，即可不在本体目录进行读写操作，比如 MacOS 与 Linux 平台 QQNT，以及类似于 flatpak 打包的 QQNT，让其实现成为可能\n如果你想将本体与存储目录合并在一起（便携软件）需将 LITELOADERQQNT_PROFILE 环境变量删除，将 data plugins config.json 移动回本体根目录下\n更新QQNT每次更新 QQNT 都需要重新根据上述教程重新修补\n版本支持支持 QQNT 桌面端 全架构 最低 20667 版本到官网最新版更老的版本也支持，只是设置界面样式会崩坏，不介意也可以用\n外部链接Telegram群聊：https://t.me/LiteLoaderQQNT频道：https://t.me/LiteLoaderQQNT_Channel\nLiteLoaderQQNT框架本体：https://github.com/LiteLoaderQQNT/LiteLoaderQQNT插件模板：https://github.com/LiteLoaderQQNT/Plugin-Template插件列表：https://github.com/LiteLoaderQQNT/Plugin-List\nist\n","categories":["Github项目"]},{"title":"何加盐｜中文互联网正在加速崩塌","url":"/Arknight-notes/posts/14940.html","content":"何加盐｜中文互联网正在加速崩塌05&#x2F;23&#x2F;2024\n1先问你一个小问题：\n如果我们在百度上搜索“马云”这两个字，把时间设定在1998年到2005年，能搜出来的信息，大概有多少条呢？是1亿条，还是1000万条，还是100万条？\n我在几个群问过，大家普遍的猜想是，应该是百万或者千万的级别。毕竟，互联网信息如此浩如烟海。马云作为那个时代的风云企业家，在网上留下的痕迹肯定是非常多的。\n但实际上用百度搜索，选定日期范围为“1998年5月22日到2005年5月22日”，含有马云的信息，总共是1条（2024年5月22日数据）。\n而仅有的这一条信息，也是虚假的。点进去会发现，文章的发布时间其实是2021年，不属于上面限定的时间段，只是不知怎么回事，它被莫名其妙地搜索出来。\n也就是说，如果我们想要了解那一段时间关于马云的经历、报道、人们对他的讨论、他的讲话、公司的发展史等等，我们能得到的有效的原始信息量，是零。\n你可能会觉得，这是不是百度的问题啊？如果换必应或谷歌，会不会能搜出来？\n我测试过，这两个网站搜出来的有效信息，和百度没有太大区别，比百度略多一些，但也只是个位数。更多的也都是时间紊乱的无效信息，只不过不知道是什么技术原因，被错误地抓取出来。\n你可能还会觉得，是不是因为马云属于比较有争议的人，由于某种不可描述的原因，所以他的信息才无法搜到？\n但实际上，不仅仅是马云的情况如此，我们去搜马化腾、雷军、任正非等，甚至是罗永浩和芙蓉姐姐这样在那个时候红极一时的网红，或周杰伦、李宇春那样曾经火遍全网的明星，结果也都一样的。\n在测试过不同网站、不同人名、不同时间段之后，我发现一个令人震惊的现象：\n几乎所有在那个年代曾经红火过的中文网站，如网易、搜狐、校园BBS、西祠胡同、凯迪猫眼、天涯论坛、校内网（人人网）、新浪博客、百度贴吧、以及大量的个人网站等，在一定年份之前的信息都已经完全消失不见了，甚至大部分网站是所有年份的信息都消失了。唯一例外的是新浪网，还能找到一些十几年前的信息，但也是极少数的寥寥几条，其他99.9999%以上的内容，全都消失了。\n大家都没有意识到一个严重的问题：中文互联网正在迅速崩塌，移动互联网出现之前的中文互联网内容，已经几乎消失殆尽。\n我们原以为，互联网是有记忆的，但没有想到，这种记忆，原来是像金鱼一样的记忆。\n2我之所以注意到这个问题，是因为何加盐公众号的主题是研究牛人，所以我需要经常查找他们的资料。\n这两年来，我有一个非常明显的感觉：网上能找到的原始资料，每年都以断崖式的速度在锐减。之前还能看到一些原始的报道，后来慢慢没有了；之前还能找到主人公的演讲或者他们写的文章，后来慢慢找不到了；之前还能看到很多采访或对谈的视频，后来慢慢消失了。\n似乎有一个吞噬网页的怪兽，它沿着历史的时间线，从过去向着现在吞噬，先是小口小口，然后大口大口，把中文互联网的一切内容，以五年、十年为单位，一口吞掉。\n等我们回过神来，会发现，在移动互联网之前曾经存在过的中文互联网的一切，不管是门户网站、机构官方网站、个人网页，还是校园BBS、公众论坛，还是新浪博客、百度贴吧，还是文件、照片、音乐、视频等，都已消失不见。\n记得十几年前，我曾经因为换电脑，把一些照片和文章打成一个压缩包，存在某BBS上，几年之后发现，那整个BBS都没有了。我曾经用过hotmail的邮箱，里面有很多很珍贵的邮件，后来全都没有了。我还写过人人网、MySpace，后来全都没有了。\n我们曾经以为互联网可以保留一切，但结果是一切都没能保留。\n这让我想起刘慈欣《三体》里面提到过的“二向箔”。歌者文明发现了太阳系有智慧生物的存在，出于宇宙先进文明的清除本能，他们向太阳系扔出一张二向箔，于是，整个太阳系以光的速度从三维坍塌成二维，变化成一张酷似梵高“星空”的画片。一切生命、一切文明的痕迹，从此都不复存在。\n在互联网上，我们已经处于二向箔的吞噬之中。这种二向箔可以称之为“时间的二向箔”，它吞噬的是时间那一维。\n太阳系被歌者文明的二向箔拍扁之后，好歹还留下了一幅《星空》图，而互联网被时间的二向箔吞噬后，只留下一片虚空。\n3为什么会出现这种情况呢？我猜想，主要原因可能是两个：\n一是经济原因。\n网站的存在，需要服务器、需要带宽、需要机房、需要人员运维，还有很多杂七杂八的监管和维护费用，这些都是成本。如果是有战略价值（例如需要向外展示公司想要展示的信息），或者有短期流量价值（例如还时不时有较多的人上来看），同时公司账上也不差钱，那么还会有动力去维持。\n但是如果公司在商业上走了弯路，没钱了，整个网站就会直接死掉。例如人人网就是典型代表。\n即便公司还有钱，从运营的角度来看，如果一个网页一年到头都没有几个人来点击，对公司来说，就成了一笔负担，从经济上最理性的方法，就是直接关掉。搜狐、网易早年的内容大量丢失，以及以天涯论坛为代表的BBS集体消亡，都是这个原因。\n二是监管原因。\n总体而言，互联网信息的监管，是从无到有，从宽到严，从严到更严的过程。以前可以合法存在的内容，后来不符合监管要求了；或者是以前可以灰色存在的内容，后来被定义为黑色了。这些内容都会直接被咔嚓掉。\n还有一些是随着时代的变化，舆论的两极分化越来越极端，以前“只道是平常”的内容，在后来的舆论环境中显得非常尖锐、敏感，尽管不违法，但是可能激化矛盾，形成混乱，监管方也有可能会要求处理掉。\n除了官方部门之外，愤怒的网友，也时时充当着舆论监管员的角色。他们会翻出十几年前某人无意中说的某句话，揪着不放，把人网暴至“社会性死亡”。\n但监管上最重要的影响，还不是监管部门的处理或愤怒网友的攻击，而是它们会造成公司与个人的“自我审查”。\n因为谁也不知道，网站上存在的哪一条内容，某人曾说过的哪一句话，会不会在若干年后，给当事人带来灭顶之灾。最好的办法，就是直接把这些潜在的“定时炸弹”全部清除，也就是把网站关掉或者把内容全部删除。\n当然，除了上述两个原因之外，还会有其他很多原因。\n例如，在南斯拉夫解体之后不久，所有“yu”（南斯拉夫国名Yugoslavia的缩写）这个国际域名之下的网页内容全部消失了。又如，随着版权保护的加强，曾经随处可下载的音乐和电影网站，就都消失了。还有一些机构和个人，纯粹是由于自己的原因，不想在对外展示信息了，就把官网或个人主页关掉等等。\n但这些原因都是次要的、局部的。整个互联网内容系统性的、大规模的消失，主要就是由于经济规律和自我审查。\n本质上，互联网内容和生命一样，也受进化论的支配。其存在的标准只有一条：以尽可能低的成本争取尽可能多的注意力。\n当一个内容能够在互联网上的海量内容中争取到足够多的注意力，而维持这个内容的成本（包括经济成本、监管成本和对抗监管的成本）比其他方式更低时，这个内容就有可能存活在互联网上。只不过它有可能会换一种呈现方式，例如从文字变为图片，从静图变为动图，从动图变为视频，未来可能从二维视频变为三维全息视频等等。承载这个内容的平台也会变迁，从门户网站到BBS，到个人博客，到微博微信，到抖音视频号，到未来可能一个我们不知道什么平台。\n当一个内容不能再吸引到足够多的注意力，或者维持这个内容的成本比其他方式更高时，这个内容就会从互联网上消失。以电脑为浏览端、以网页为载体的传统互联网的集体消亡，只不过是这种“信息进化竞争”的必然结果而已。\n生物的进化秘诀是“物竞天择，适者生存”，而互联网内容的进化秘诀是“信息竞，注意力择，适者生存”。由于网络效应，这种竞争比自然界还要猛烈万倍，残酷万倍。传统互联网不是单个物种式的灭绝，而是几乎所有内容的整体性灭绝。\n每一代新的互联网崛起，旧的互联网必将崩塌，时间二向箔是所有网站、所有内容无可逃避的宿命。\n4如果未来的文明是互联网的文明。我们这一代人，将是没有历史的。因为互联网没有留下我们的痕迹。\n“没有历史”，这件事情重要吗？\n当然很重要。\n我曾经为了写邵亦波的文章，想尽了一切办法，试图找到邵亦波2007年参加《波士堂》节目的原始视频，以及他妻子鲍佳欣以“文爱妈咪”网名在宝宝树社区发了好几年的帖子。最终还是没有找到，只能深深遗憾。\n虽然《红尘已忘邵亦波》那篇文章，依然很受大家欢迎，短短一周就有70多万人阅读，2万多人转发，但我十分肯定，我一定还是错过了某些非常重要的信息。如果它们能呈现在那篇文章里，文章质量会更好。\n但是我找不到，就只能让文章以不完美的方式呈现。\n你可能会觉得：这只是对何加盐这样的研究者和写作者有用，我又不写这样的文章，互联网信息没有就没了，对我又没什么影响。\n真的吗？\n如果我们已经看不到马云的所有演讲，看不到任正非的以《我的父亲母亲》和《一江春水向东流》为代表的所有文章，看不到段永平在雪球的所有发帖，你会不会觉得有点可惜？\n好吧，你说你并不觉得可惜。\n那如果我们已经搜不到黄峥的公众号，看不到张一鸣的微博，上不了王兴的饭否，你会不会觉得有点遗憾？\n好吧，你说你也并不觉得遗憾。\n那如果某一天，知乎如同天涯论坛一样没了，豆瓣就像人人网一样消失，B站好比新浪博客一样已无人问津，你会不会有点心痛？\n如果某一天，你喜欢的微博博主所有的微博只显示“作者已设置只展示半年内微博，此微博已不可见”，你常看的公众号只显示“此账号已被屏蔽，内容无法查看”，你在抖音或小红书搜索某些信息，结果显示“作者已清空全部内容”……\n甚至，微博、公众号、抖音、小红书，就像曾经存在过的bbs、贴吧、空间、博客一样，全部消亡……\n你会不会为此难过哪怕是短短的一分钟？\n作为传统互联网的一代人，七零后、八零后已经找不回我们的历史。因为它们已经全部消失了。\n新生代也许还能看看朋友圈，但是朋友圈也越来越多“三天可见”，越来越沉默不语。\n唯一还在热情发圈的，只剩下一水的营销信息。\n未来就连这些营销信息，也终将消亡。\n5如果一件事对我们很重要，而它正在消亡，我们有什么办法挽救它吗？\n有人曾作出这样的尝试。美国有一个网站叫做“Internet Archive”，中文译作“互联网档案馆”，保存了很多原始网页。但是我试过，中文的原始网页，保存的很少，而且使用非常麻烦，搜索功能十分原始低效，和没保存差不多。\n从技术层面来讲，保存从中国有互联网以来，到移动互联网兴起的十来年时间的所有网页，应该并不难，成本也不高，毕竟比起现在的视频时代，原始互联网的那些图文网页，占的空间几乎可以忽略不计。\n问题是，谁来做这件事，有什么动机？\n商业机构不会做。因为没有任何商业利益。\n政府或许可以像建图书馆、博物馆一样，搞一个能保存所有网页的档案馆。但是政府为什么要花钱费力干这件事？除了保存历史之外，似乎也没有其他理由。再说了，就算是政府做了这件事，对普通网民也没有任何意义，因为这个档案馆肯定也会需要一定的登陆权限，以免信息被滥用。\n况且，就算是有机构愿意做这件事，现在也晚了。移动互联网兴起之后，传统互联网的中文内容，几乎已经消失殆尽了。粗略估算，99%以上应该都已经没有了。\n从某种意义上，何加盐写的牛人系列文章，也为保存这些牛人们存在过的历史，做出了一点贡献。如果我没有写他们，很多历史就已经在网上找不到了。但毕竟这也不是原始信息，只是经我整合过的二手信息。\n现在的中文互联网上，这个世纪前十年发生过的所有重大事件，所有留下过深深痕迹的名人，目前还能找到的信息，几乎已经全是经自媒体编辑过的二手信息，甚至是传过多手，早已面目全非的信息。\n关于它们的原始报道没有了，原始视频没有了，原始讲话没有了，原始的网友目击没有了，原始的评论没有了……\n再过一些年，这些二手信息和N手信息，也都会消失。就像那些事件从未发生过、那些人从未存在过一样。\n我们已经无能为力，只能接受现实。\n在未来的互联网时代里，回首看21世纪的前二十年，将是没有历史记录的二十年。\n我们是互联网时代消失的一代人。\n如果你现在还能看到一些中文互联网的古早信息，那只是夕阳的最后一抹余晖。\n如果你明白了它们的转瞬即逝，可能会像临死前的浮士德一样感叹：\n你真美啊，请停留一下吧。\n但那抹余晖，很快将和你这句感叹一起，被时间的二向箔吞没，陷入虚空。\n《三体》中，程心和艾AA还能有幸乘坐唯一的一艘曲率飞船，逃离正在二维化的太阳系。\n而我们，连曲率飞船都没有。\n逃无可逃。\n现在你所看到的、你所创造的几乎所有内容，连同这篇文章，这个平台，终究也会淹没在虚空中。\n—end—\n�**\n"},{"title":"博客文章阅读数统计","url":"/Arknight-notes/posts/17688.html","content":"不蒜子 | 给网站、博客文章添加阅读次数统计效果演示：\n\n\n\n\n\n\n本站总访问量次\n\n\n\n\n\n\n\n本站访客数人次\n\n\n\n\n\n一行脚本+一行标签，搞定一切。追求极致的用户可以进行任意DIY。\n不蒜子官网：http://busuanzi.ibruce.info/\n一、安装脚本（必选）要使用不蒜子必须在页面中引入busuanzi.js，目前最新版如下。\n&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;\n\n不蒜子可以给任何类型的个人站点使用，如果你是用的hexo，打开themes&#x2F;你的主题&#x2F;layout&#x2F;_partial&#x2F;footer.ejs添加上述脚本即可，当然你也可以添加到 header 中。\n二、安装标签（可选）\n只需要复制相应的html标签到你的网站要显示访问量的位置即可。您可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分扩展开发。根据你要显示内容的不同，这分几种情况。\n1、显示站点总访问量要显示站点总访问量，复制以下代码添加到你需要显示的位置。有两种算法可选：\n算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。\n本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次\n\n算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。\n本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次\n\n如果你是用的hexo，打开themes&#x2F;你的主题&#x2F;layout&#x2F;_partial&#x2F;footer.ejs添加即可。\n实例效果参考：\nhttps://blog.ccswust.org/busuanzi/\n2、显示单页面访问量要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。\n算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。\n本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次\n\n代码中文字是可以修改的，只要保留id正确即可。\n注意：不蒜子为保持极简，暂不支持在站点文章摘要列表中（如首页）逐个显示每篇文章的阅读次数，如果您非常需要这一功能，可以留言。根据需要程度再考虑开发相应的功能。\n实例效果参考：\nhttps://blog.ccswust.org/busuanzi/pv.html\n注意：不蒜子为保持极简，暂不支持在站点文章摘要列表中（如首页）逐个显示每篇文章的阅读次数，如果您非常需要这一功能，可以留言。根据需要程度再考虑开发相应的功能。\n3、显示站点总访问量和单页面访问量本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次\n\n实例效果参考：\nhttps://blog.ccswust.org/busuanzi/ip.html\n4、只计数不显示只安装脚本代码，不安装标签代码。\n至此，不蒜子已经可以正常运行\n附录：扩展开发（自定义）不蒜子之所以称为极客的算子，正是因为不蒜子自身只提供标签+数字，至于显示的style和css动画效果，任你发挥。\n\n**busuanzi_value_site_pv** 的作用是异步回填访问数，这个id一定要正确。\n**busuanzi_container_site_pv**的作用是为防止计数服务访问出错或超时（3秒）的情况下，使整个标签自动隐藏显示，带来更好的体验。这个id可以省略。\n\n因此，你也可以使用极简模式：\n本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次本站访客数  &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;  人次本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次\n或者个性化一下：\nTotal &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; views.您是xxx的第个小伙伴 Hits\n1、我只要统计不显示？ 只引入busuanzi.js，不引入显示标签即可。\n2、你的标签太丑了，我想美化一下可以么？ 可以的，您可以用自己站点的css进行控制，只要内层span的id正确以便回填访问次数即可，甚至标签都可以不是span。\n3、中文字体太丑了，我的主题不适合？ 您可以将本站总访问量xxx次改成view xxx times等英文以获得更和谐的显示效果。\n4、在访问量数据未取回来之前，我不想让页面显示为诸如“本站总访问量 次”，显得太low，怎么办？ 只需要如下css，不蒜子执行完毕会自动将标签显示出来，其他以此类推：\n 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次\n上面的做法还是很low？！看下这个https://blog.ccswust.org/busuanzi/diy.html 右键看下源码，没加载出来前就显示个菊花转转转: 首先，你要引入font-awesome字体：\n&lt;link rel=&quot;stylesheet&quot; href=&quot;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css&quot;&gt;或&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css&quot;&gt;\n其次，修改不蒜子标签：\n&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;i class=&quot;fa fa-spinner&quot;&gt;&lt;/i&gt;&lt;/span&gt; Hits或（旋转效果）&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&lt;/span&gt; Hits\n Hits或（旋转效果） Hits\ns\n","categories":["博客美化"],"tags":["美化"]},{"title":"GitHub贡献图表📊","url":"/Arknight-notes/posts/14584.html","content":"在博客网站等地方引用 Github 贡献图表Github 的提交记录，总的来说能够回顾这一年，看看你的工作效率是一种很棒的感觉，而这个小绿色日历实际上是我最喜欢的数据可视化之一。但是没有理由让它只限于出现在 Github 网站上\n来看一下 Github “提交狂魔” @ruanyf 的提交记录\n\n\n\n\n\n以上是如何做到的呢？这可不是截图，而是现成的 API，官网地址：https://ghchart.rshah.org/\n源码在 Github 上开源，仓库地址：https://github.com/2016rshah/githubchart-api\n感谢作者2016rshah提供此 API\n使用怎么使用这个 API 呢？很简单，使用img标签引用即可\n&lt;img src=&quot;https://ghchart.rshah.org/Zhongye1&quot; /&gt;\n\n将src中的Zhongye1使用自己的 Github 用户名替换即可\n也支持修改配色，只需在用户名前加上所需的十六进制颜色代码即可。例如，如果想要一个基于十六进制颜色的蓝色主题图表#409ba5\n自定义颜色例如，如果你想要一个基于十六进制颜色的蓝色主题图表 #409ba5，只需在用户名前加上所需的十六进制颜色代码即可。例如，如果想要一个基于十六进制颜色的蓝色主题图表#409ba5\n&lt;img src=&quot;https://ghchart.rshah.org/409ba5/Zhongye1&quot; /&gt;\n\n效果是这样的\n\nZhongye1's Github Chart \n\n附上HTML拾色器\n link HTML 取色器&#x2F;拾色器, https://www.runoob.com/tags/html-colorpicker.html, https://picx.zhimg.com/80/v2-7c046fc439e9fab342cda2e9291febdb_720w.webp?source=d16d100b \n如果有任何可以改进的内容，\n可以给作者在 Github 上提交 issue&#x2F;PR（\n=15% >\n"},{"title":"近期CDN状况分析","url":"/Arknight-notes/posts/19085.html","content":"原博主在 V2EX 发声, 表示其被威胁删帖: https://www.v2ex.com/t/1057993原博主首次在 V2EX 发帖: 《供应链投毒后，我们的选择还剩下哪些？》 https://v2ex.com/t/1056428\n原博文: https://www.54yt.net/435.html\n原博客文章备份: https://web.archive.org/web/https://www.54yt.net/435.html\n为了防止丢失并出于公共利益, 以下是全图文转载, 如有不妥可删除\n\n\n\n\n\nBootCDN&#x2F;Staticfile投毒分析供应链投毒后，我们的选择还剩下哪些？病毒分析分区附件样本、网址谨慎下载点击，可能对计算机产生破坏，仅供安全人员在法律允许范围内研究，禁止非法用途！\n禁止求非法渗透测试、非法网络攻击、获取隐私等违法内容，即使对方是非法内容，也应向警方求助！\n\n前言从早前的LNMP、OneinStack到XZ Utils，再到现在的Staticfile、BootCDN；供应链攻击总是让人猝不及防。纵观这些被攻击的项目，往往都是无处不在，经常被大家所使用，但是却并没有给提供者带来什么收入。 在突然有一天，提供者感到疲惫不堪，却又迫于用户们的压力无法关停服务的情况下，突然有新的组织&#x2F;个人来帮助一起进行开发或提供服务，甚至是直接的现金收购&#x2F;服务赞助；在这种情况下，接受帮助自然是首选的方案。 我认为建立有效的捐助途径不失为缓解这一问题的良方，正如AlmaLinux、RockyLinux或是cdnjs、jsdelivr一样，这些服务背后都有着可靠的企业长期提供捐助承诺，也帮助项目不断成长和有效地提供服务。序幕和WDCP、LNMP、OneinStack一样，这次的Staticfile、BootCDN、Polyfill事件也是背后指向同一个组织[[1]]。更进一步的研究表明这些组织似乎会恶意攻击其他提供类似服务的供应商，同时采取接触洽谈来并入攻击目标。 在这种做法下，曾经由七牛云提供服务的Staticfile.org被易手，而原先由个人提供服务、由又拍云提供接入服务的BootCSS也同样被易手。 但是这些背后的交易在事件发生前却没有人进行公开，也许是原来的提供者厌倦了日复一日付出却看不到回报的生活，也许是这些组织瞒天过海许下了虚假的承诺，让原本积累了大量用户的基础服务成为了这些组织用来攻击用户们的利刃。\n探究大多数关于这次攻击的报道集中于一个星期之前，然而事件的开始却远早于这个时间。一年以前，V2EX社区就有用户发文表示BootCSS的静态资源被投毒[2]。通过查阅记录可以发现，BootCSS.com由王赛于2012年底批量注册，建站初期主要提供的是BootStrap介绍和交流[3,4,5]。于此同时进行批量注册的还有golaravel.com等一系列技术栈的中文网，猜测是想使用站群方式来进行项目文档的本地化，同时积累受众用户。在2013年十一月初，BootStrap中文网上线了OpenCDN加速服务，由又拍云赞助，提供cdnjs的国内镜像[6]。也许是由于用户的增长又拍云难以承担高额的成本，又或者是又拍觉得收益无法Cover成本，这段关系一直持续到了2017年年底[7]。自此之后的一段时间，提供服务的CDN便开始快速变更，从白山云到京东云，最终到了10月份由于账单压力或是其他原因出现了大面积的服务中断[8]。在恢复后，原先的服务开始由猫云提供，自此开始BootCDN的服务出现了一些不连续的中断事件[9]。2019年3月、10月、2020年1月陆续出现小规模的中断，尽管如此，但是在接下来的几年时间中，猫云一直为BootCDN提供加速服务，只是加速域名从cdn.bootcss.com更换为了cdn.bootcdn.net；而于此同时百度静态资源公共库则彻底停止了服务。时间来到2022年，在1月份经历了中断后，2月份猫云或许是基于和又拍云同样的原因停止了赞助，服务商也从此开始变更为了极兔云[10]。或许是由于极兔云本身是融合CDN服务，与上一家同样类型的赞助商服务相冲突的原因，BootCDN发布公告表示将下线cdn.bootcss.com域名。在此期间，jsDelivr的备案被关停、解析被污染，从此基本断绝了在中国大陆的使用。\n梦醒2023年4月份，BootCDN的三个关联域名[bootcdn.net,bootcdn.cn,bootcss.com]ICP备案变更为郑州紫田网络科技有限公司，同时域名注册商也从阿里云转入腾讯云，由此揭幕了噩梦的来临[11]。2023年6月份，开始有用户陆续发现部分静态资源内存在投毒行为[12]。即便到现在，投毒行为仍在继续，大量用户反馈存在资源被投毒[13]。自此BootCDN这个拥有十多年历史的国内静态资源加速服务彻底沦为了攻击者的工具，恶意代码随意被嵌入无数正在使用的网站中。而由于BootCDN历史久远，以至于许多生产环境甚至都不知道他们曾经引入了该服务。而这样的攻击相信还会继续持续下去，直到大家渐渐意识到…又或是仍旧…\n巧合无独有偶，原本由七牛云提供服务的Staticfile CDN于2023年10月进行了备案信息变更和注册局转移[14]。两个关联域名staticfile.org和staticfile.net被转入河南泉磐网络科技有限公司。而先前BootCDN所转入的公司名称为郑州紫田网络科技有限公司，两者同为河南省郑州市的相同类型公司。而先前Ze-Zheng Wu所发现的几个域名由统一组织控制高度符合[15]。通过天眼查查询可知紫田科技旗下知名的一个产品为51.La站点统计平台。通过Bing搜索不难发现在2023年集中出现大量使用该统计平台遇到劫持的案例。通过天眼查对紫田科技股东徐征进行查询，发现其曾担任郑州帝恩爱斯网络科技有限公司法定代表人及高管，也曾担任河南云打包网络科技有限公司高管和股东。而Staticfile域名持有公司河南图网信息技术有限公司的法人申石磊同时任职郑州帝恩爱斯网络科技有限公司法定代表人。而Staticfile的域名注册商商中在线也与紫田科技关联的公司存在着说不清道不明的关系。自此可以确定这两个原本由不同云厂商所赞助的静态资源加速服务已经被同一组织所控制，与上述Ze-Zheng Wu的调查一致。看似似乎这只是一个名不见经传的小公司所为，然而这只不过是挡在云层前的迷雾。通过查阅可以发现郑州紫田网络科技有限公司总经理李跃磊同时担任河南亿恩科技股份有限公司股东。\n通过天眼查透视链可以查看到企业彼此之间的关联信息。故事到这里似乎就结束了，然而还有收购polyfill服务的那家公司Funnull需要进行调查。通过查询域名注册和备案信息可以发现背后的公司为南京妙彩文化传播有限公司。这家公司的主营业务则是为博彩网站提供国内优化CDN服务，与上述的劫持行为不谋而合。不过更为危险的是这家公司同时还提供诈骗、钓鱼、色站等令人发指的服务，将供应链攻击提升到了新的高度。\n答案这就像一张巨大的关系网，串联起了利益链中的彼此。每一家公司都看似运营者合规可靠的服务，背后进行的确实见不得人的勾当。\n郑州紫田网络科技有限公司商中在线科技股份有限公司河南亿恩科技股份有限公司南京妙彩文化传播有限公司河南图网信息技术有限公司河南云打包网络科技有限公司北京新网互联软件服务有限公司郑州帝恩爱斯网络科技有限公司\n\n镇痛从来没有什么疼痛能够有效缓解，更何况是这种绝症。目前最为可靠的同类服务为字节跳动静态资源公共库你可以将以下地址进行修改\ncdn.bootcss.comcdn.bootcdn.net/ajax/libscdn.staticfile.netcdn.staticfile.org\n\n替换为\n//zstatic.net 又拍云赞助s4.zstatic.net/ajax/libs//本站提供，回源南科大，使用火山云CDNcdnjs.snrat.com/ajax/libs\n\n或者你可以尝试其他的提供商\n//7EDuse.sevencdn.com/ajax/libs//Web缓存网cdnjs.webstatic.cn/ajax/libs///字节跳动 最后更新于2022年lf3-cdn-tos.bytecdntp.com/cdn/expire-1-Mlf6-cdn-tos.bytecdntp.com/cdn/expire-1-Mlf9-cdn-tos.bytecdntp.com/cdn/expire-1-Mlf26-cdn-tos.bytecdntp.com/cdn/expire-1-M//360奇舞团，长期未更新https://lib.baomitu.com///晓白云sf.akass.cn//泽瑶网络 jsDelivr镜像cdn.jsdmirror.com\n\n目前已经收到相关企业的威胁邮件*\n[1]https://www.bleepingcomputer.com/news/security/polyfillio-bootcdn-bootcss-staticfile-attack-traced-to-1-operator/[2]https://www.v2ex.com/t/950163[3]https://web.archive.org/web/20121206014141/http://www.bootcss.com/[4]https://ip.sb/whois/bootcss.com[5]https://www.icpapi.com/%E4%BA%ACICP%E5%A4%8711008151%E5%8F%B7/[6]https://web.archive.org/web/20131103022433/http://open.bootcss.com/[7]https://web.archive.org/web/20171230183848/http://www.bootcdn.cn/[8]https://global.v2ex.com/t/494375[9]https://web.archive.org/web/20190119210705/https://www.bootcdn.cn/[10]https://web.archive.org/web/20220208201547/https://www.bootcdn.cn/[11]https://whoisfreaks.com/tools/whois/history/lookup/bootcss.com[12]https://www.v2ex.com/t/950163[13]https://github.com/Tencent/vConsole/issues/683[14]https://www.icpapi.com/staticfile.net/[15]https://x.com/mdmck10/status/1806349965733544160\n\n附：\n\n\n\n\n发表于 2024-7-17 19:03**本帖最后由 你好，再见 于 2024-7-18 14:32 编辑\n\n\n\n\n这样说来到让我想起平时手机上搜索一些资料会访问到一些个人博客，也都是加载完成后过一会跳转到垃圾网站 以前我以为是运营商在搞鬼，现在看来还真有可能是这个公共库的问题 看了一下，我自己的博客也引用了bootcdn的资源，bootcdn用的人太多太多了 个人博客真的是重灾区，很多主题作者在开发的时候就已经把这些公共库资源写死了   ————————————————————————————————\n\n\n\n\n\n\n\n\n\n\n) |\n","categories":["随记"],"tags":["CDN"]},{"title":"将博客CDN从jsDelivr切换至自建反向代理源","url":"/Arknight-notes/posts/4746.html","content":"快速将Butterfly主题的CDN从jsDelivr切换至自建反向代理源最新版的Butterfly取消了原来设置在_config.yml里的默认CDN，导致不能快速替换掉现在极不稳定的jsDelivr CDN。本文的默认Butterfly版本为4.1.0。\n配置现在的默认CDN地址被放在了主题的/scripts/events/config.js中：\n/** * Butterfly * 1. Merge CDN * 2. Capitalize the first letter of comment name */&#x27;use strict&#x27;hexo.extend.filter.register(&#x27;before_generate&#x27;, () =&gt; &#123;  const themeConfig = hexo.theme.config  /**   * Merge CDN   */  const defaultCDN = &#123;    main_css: &#x27;/css/index.css&#x27;,    main: &#x27;/js/main.js&#x27;,    utils: &#x27;/js/utils.js&#x27;,    // pjax    pjax: &#x27;https://cdn.jsdelivr.net/npm/pjax/pjax.min.js&#x27;,    // comments    gitalk: &#x27;https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js&#x27;,    gitalk_css: &#x27;https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css&#x27;,    blueimp_md5: &#x27;https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js&#x27;,    valine: &#x27;https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js&#x27;,    disqusjs: &#x27;https://cdn.jsdelivr.net/npm/disqusjs@1/dist/disqus.js&#x27;,    disqusjs_css: &#x27;https://cdn.jsdelivr.net/npm/disqusjs@1/dist/disqusjs.css&#x27;,    utterances: &#x27;https://utteranc.es/client.js&#x27;,    twikoo: &#x27;https://cdn.jsdelivr.net/npm/twikoo/dist/twikoo.all.min.js&#x27;,    waline: &#x27;https://cdn.jsdelivr.net/npm/@waline/client/dist/Waline.min.js&#x27;,    giscus: &#x27;https://giscus.app/client.js&#x27;,    // share    addtoany: &#x27;https://static.addtoany.com/menu/page.js&#x27;,    sharejs: &#x27;https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js&#x27;,    sharejs_css: &#x27;https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css&#x27;,    // search    local_search: &#x27;/js/search/local-search.js&#x27;,    algolia_js: &#x27;/js/search/algolia.js&#x27;,    algolia_search_v4: &#x27;https://cdn.jsdelivr.net/npm/algoliasearch@4/dist/algoliasearch-lite.umd.js&#x27;,    instantsearch_v4: &#x27;https://cdn.jsdelivr.net/npm/instantsearch.js@4/dist/instantsearch.production.min.js&#x27;,    // math    mathjax: &#x27;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&#x27;,    katex: &#x27;https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css&#x27;,    katex_copytex: &#x27;https://cdn.jsdelivr.net/npm/katex@latest/dist/contrib/copy-tex.min.js&#x27;,    katex_copytex_css: &#x27;https://cdn.jsdelivr.net/npm/katex@latest/dist/contrib/copy-tex.css&#x27;,    mermaid: &#x27;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js&#x27;,    // count    busuanzi: &#x27;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&#x27;,    // background effect    canvas_ribbon: &#x27;https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/dist/canvas-ribbon.min.js&#x27;,    canvas_fluttering_ribbon: &#x27;https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/dist/canvas-fluttering-ribbon.min.js&#x27;,    canvas_nest: &#x27;https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/dist/canvas-nest.min.js&#x27;,    lazyload: &#x27;https://cdn.jsdelivr.net/npm/vanilla-lazyload/dist/lazyload.iife.min.js&#x27;,    instantpage: &#x27;https://cdn.jsdelivr.net/npm/instant.page/instantpage.min.js&#x27;,    typed: &#x27;https://cdn.jsdelivr.net/npm/typed.js/lib/typed.min.js&#x27;,    pangu: &#x27;https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js&#x27;,    // photo    fancybox_css_v4: &#x27;https://cdn.jsdelivr.net/npm/@fancyapps/ui/dist/fancybox.css&#x27;,    fancybox_v4: &#x27;https://cdn.jsdelivr.net/npm/@fancyapps/ui/dist/fancybox.umd.js&#x27;,    medium_zoom: &#x27;https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js&#x27;,    // snackbar    snackbar_css: &#x27;https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css&#x27;,    snackbar: &#x27;https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js&#x27;,    // effect    activate_power_mode: &#x27;https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/dist/activate-power-mode.min.js&#x27;,    fireworks: &#x27;https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/dist/fireworks.min.js&#x27;,    click_heart: &#x27;https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/dist/click-heart.min.js&#x27;,    ClickShowText: &#x27;https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/dist/click-show-text.min.js&#x27;,    // fontawesome    fontawesomeV6: &#x27;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/css/all.min.css&#x27;,    // Conversion between Traditional and Simplified Chinese    translate: &#x27;/js/tw_cn.js&#x27;,    // flickr-justified-gallery    flickr_justified_gallery_js: &#x27;https://cdn.jsdelivr.net/npm/flickr-justified-gallery@2/dist/fjGallery.min.js&#x27;,    flickr_justified_gallery_css: &#x27;https://cdn.jsdelivr.net/npm/flickr-justified-gallery@2/dist/fjGallery.min.css&#x27;,    // aplayer    aplayer_css: &#x27;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&#x27;,    aplayer_js: &#x27;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&#x27;,    meting_js: &#x27;https://cdn.jsdelivr.net/gh/metowolf/MetingJS@1.2/dist/Meting.min.js&#x27;,    // Prism.js    prismjs_js: &#x27;https://cdn.jsdelivr.net/npm/prismjs/prism.min.js&#x27;,    prismjs_lineNumber_js: &#x27;https://cdn.jsdelivr.net/npm/prismjs/plugins/line-numbers/prism-line-numbers.min.js&#x27;,    prismjs_autoloader: &#x27;https://cdn.jsdelivr.net/npm/prismjs/plugins/autoloader/prism-autoloader.min.js&#x27;  &#125;  // delete null value  const deleteNullValue = obj =&gt; &#123;    for (const i in obj) &#123;      obj[i] === null &amp;&amp; delete obj[i]    &#125;    return obj  &#125;  themeConfig.CDN = Object.assign(defaultCDN, deleteNullValue(themeConfig.CDN))  /**   * Capitalize the first letter of comment name   */  let &#123; use &#125; = themeConfig.comments  if (!use) return  if (typeof use === &#x27;string&#x27;) &#123;    use = use.split(&#x27;,&#x27;)  &#125;  const newArray = use.map(item =&gt; item.toLowerCase().replace(/\\b[a-z]/g, s =&gt; s.toUpperCase()))  themeConfig.comments.use = newArray&#125;)\n\n所以只要快速替换掉这里的CDN，就可以切换到我们自建的CDN上。\n成果将cdn.jsdelivr.net全部替换为自己的反代源后，成果就诞生了：\n/** * Butterfly * 1. Merge CDN * 2. Capitalize the first letter of comment name */&#x27;use strict&#x27;hexo.extend.filter.register(&#x27;before_generate&#x27;, () =&gt; &#123;  const themeConfig = hexo.theme.config  /**   * Merge CDN   */  const defaultCDN = &#123;    main_css: &#x27;/css/index.css&#x27;,    main: &#x27;/js/main.js&#x27;,    utils: &#x27;/js/utils.js&#x27;,    // pjax    pjax: &#x27;https://jsdelivr.pai233.top/npm/pjax/pjax.min.js&#x27;,    // comments    gitalk: &#x27;https://jsdelivr.pai233.top/npm/gitalk@latest/dist/gitalk.min.js&#x27;,    gitalk_css: &#x27;https://jsdelivr.pai233.top/npm/gitalk/dist/gitalk.min.css&#x27;,    blueimp_md5: &#x27;https://jsdelivr.pai233.top/npm/blueimp-md5/js/md5.min.js&#x27;,    valine: &#x27;https://jsdelivr.pai233.top/npm/valine/dist/Valine.min.js&#x27;,    disqusjs: &#x27;https://jsdelivr.pai233.top/npm/disqusjs@1/dist/disqus.js&#x27;,    disqusjs_css: &#x27;https://jsdelivr.pai233.top/npm/disqusjs@1/dist/disqusjs.css&#x27;,    utterances: &#x27;https://utteranc.es/client.js&#x27;,    twikoo: &#x27;https://jsdelivr.pai233.top/npm/twikoo/dist/twikoo.all.min.js&#x27;,    waline: &#x27;https://jsdelivr.pai233.top/npm/@waline/client/dist/Waline.min.js&#x27;,    giscus: &#x27;https://giscus.app/client.js&#x27;,    // share    addtoany: &#x27;https://static.addtoany.com/menu/page.js&#x27;,    sharejs: &#x27;https://jsdelivr.pai233.top/npm/social-share.js/dist/js/social-share.min.js&#x27;,    sharejs_css: &#x27;https://jsdelivr.pai233.top/npm/social-share.js/dist/css/share.min.css&#x27;,    // search    local_search: &#x27;/js/search/local-search.js&#x27;,    algolia_js: &#x27;/js/search/algolia.js&#x27;,    algolia_search_v4: &#x27;https://jsdelivr.pai233.top/npm/algoliasearch@4/dist/algoliasearch-lite.umd.js&#x27;,    instantsearch_v4: &#x27;https://jsdelivr.pai233.top/npm/instantsearch.js@4/dist/instantsearch.production.min.js&#x27;,    // math    mathjax: &#x27;https://jsdelivr.pai233.top/npm/mathjax@3/es5/tex-mml-chtml.js&#x27;,    katex: &#x27;https://jsdelivr.pai233.top/npm/katex@latest/dist/katex.min.css&#x27;,    katex_copytex: &#x27;https://jsdelivr.pai233.top/npm/katex@latest/dist/contrib/copy-tex.min.js&#x27;,    katex_copytex_css: &#x27;https://jsdelivr.pai233.top/npm/katex@latest/dist/contrib/copy-tex.css&#x27;,    mermaid: &#x27;https://jsdelivr.pai233.top/npm/mermaid/dist/mermaid.min.js&#x27;,    // count    busuanzi: &#x27;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&#x27;,    // background effect    canvas_ribbon: &#x27;https://jsdelivr.pai233.top/npm/butterfly-extsrc@1/dist/canvas-ribbon.min.js&#x27;,    canvas_fluttering_ribbon: &#x27;https://jsdelivr.pai233.top/npm/butterfly-extsrc@1/dist/canvas-fluttering-ribbon.min.js&#x27;,    canvas_nest: &#x27;https://jsdelivr.pai233.top/npm/butterfly-extsrc@1/dist/canvas-nest.min.js&#x27;,    lazyload: &#x27;https://jsdelivr.pai233.top/npm/vanilla-lazyload/dist/lazyload.iife.min.js&#x27;,    instantpage: &#x27;https://jsdelivr.pai233.top/npm/instant.page/instantpage.min.js&#x27;,    typed: &#x27;https://jsdelivr.pai233.top/npm/typed.js/lib/typed.min.js&#x27;,    pangu: &#x27;https://jsdelivr.pai233.top/npm/pangu/dist/browser/pangu.min.js&#x27;,    // photo    fancybox_css_v4: &#x27;https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css&#x27;,    fancybox_v4: &#x27;https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js&#x27;,    medium_zoom: &#x27;https://jsdelivr.pai233.top/npm/medium-zoom/dist/medium-zoom.min.js&#x27;,    // snackbar    snackbar_css: &#x27;https://jsdelivr.pai233.top/npm/node-snackbar/dist/snackbar.min.css&#x27;,    snackbar: &#x27;https://jsdelivr.pai233.top/npm/node-snackbar/dist/snackbar.min.js&#x27;,    // effect    activate_power_mode: &#x27;https://jsdelivr.pai233.top/npm/butterfly-extsrc@1/dist/activate-power-mode.min.js&#x27;,    fireworks: &#x27;https://jsdelivr.pai233.top/npm/butterfly-extsrc@1/dist/fireworks.min.js&#x27;,    click_heart: &#x27;https://jsdelivr.pai233.top/npm/butterfly-extsrc@1/dist/click-heart.min.js&#x27;,    ClickShowText: &#x27;https://jsdelivr.pai233.top/npm/butterfly-extsrc@1/dist/click-show-text.min.js&#x27;,    // fontawesome    fontawesomeV6: &#x27;https://jsdelivr.pai233.top/npm/@fortawesome/fontawesome-free@6/css/all.min.css&#x27;,    // Conversion between Traditional and Simplified Chinese    translate: &#x27;/js/tw_cn.js&#x27;,    // flickr-justified-gallery    flickr_justified_gallery_js: &#x27;https://jsdelivr.pai233.top/npm/flickr-justified-gallery@2/dist/fjGallery.min.js&#x27;,    flickr_justified_gallery_css: &#x27;https://jsdelivr.pai233.top/npm/flickr-justified-gallery@2/dist/fjGallery.min.css&#x27;,    // aplayer    aplayer_css: &#x27;https://jsdelivr.pai233.top/npm/aplayer/dist/APlayer.min.css&#x27;,    aplayer_js: &#x27;https://jsdelivr.pai233.top/npm/aplayer/dist/APlayer.min.js&#x27;,    meting_js: &#x27;https://jsdelivr.pai233.top/gh/metowolf/MetingJS@1.2/dist/Meting.min.js&#x27;,    // Prism.js    prismjs_js: &#x27;https://jsdelivr.pai233.top/npm/prismjs/prism.min.js&#x27;,    prismjs_lineNumber_js: &#x27;https://jsdelivr.pai233.top/npm/prismjs/plugins/line-numbers/prism-line-numbers.min.js&#x27;,    prismjs_autoloader: &#x27;https://jsdelivr.pai233.top/npm/prismjs/plugins/autoloader/prism-autoloader.min.js&#x27;  &#125;  // delete null value  const deleteNullValue = obj =&gt; &#123;    for (const i in obj) &#123;      obj[i] === null &amp;&amp; delete obj[i]    &#125;    return obj  &#125;  themeConfig.CDN = Object.assign(defaultCDN, deleteNullValue(themeConfig.CDN))  /**   * Capitalize the first letter of comment name   */  let &#123; use &#125; = themeConfig.comments  if (!use) return  if (typeof use === &#x27;string&#x27;) &#123;    use = use.split(&#x27;,&#x27;)  &#125;  const newArray = use.map(item =&gt; item.toLowerCase().replace(/\\b[a-z]/g, s =&gt; s.toUpperCase()))  themeConfig.comments.use = newArray&#125;)\n\n替换完后，运行hexo cl &amp;&amp; hexo g -d部署后，就成功切换到了你的反代源上。你也可以直接复制博主的成果进行使用\n\n原帖： https://cloud.tencent.com/developer/article/1987454 \n发表于2022-02-277**\n","categories":["博客美化"],"tags":["CDN"]},{"title":"数学分析笔记其二","url":"/Arknight-notes/posts/27543.html","content":"数分思维导图（分块对比版）\n\n\n\n\n\n\n\n\n\n\n\n\n\n一些公式和解题方法\n\n\n\n\n\n编辑于 2024-07-2707-27 \n","categories":["笔记"]},{"title":"广州大学选课脚本","url":"/Arknight-notes/posts/20869.html","content":"\n\n\n项目地址：\nhttps://github.com/Acring/gzhu-course-seizer\n广大选课脚本\n 本脚本只做学习使用, 禁止用作商业用途\n\n\nversion: 1.0.1\n\nauthor: acring\n\n简介:\n\n\n广大选课脚本, 可多线程自动选全校性选课和体育选课的课程\n\nusage:\n\n\n安装python3\n安装第三方库\npip install requests\npip install beautifulsoup4\n\n\n点开run.py, 按提示修改上面的学号,密码,目标老师等信息\n\ndata = &#123;    &quot;tag&quot;: &quot;xxx&quot;,  # 标志    &quot;username&quot;: &quot;xxx&quot;,  # 学号    &quot;password&quot;: &quot;xxx&quot;,  # 密码    &quot;cour_type&quot;: &quot;whole&quot;,  # 选课类型 sport/whole    &quot;teacher&quot;: &quot;方碧真&quot;,  # 目标老师    &quot;index&quot;: 1  # 相同老师,选第几个&#125;\n\n\npython run.py 运行脚本\n\n\npackage:\nrequests\nbs4\n\n\n运行截图\n\n\n\nbp)\n","categories":["Github项目"]},{"title":"数据结构复习其二","url":"/Arknight-notes/posts/42108.html","content":"\n\n\n——算法、线性表——概念明晰：随机存取、顺序存取、随机存储和顺序存储\n随机存取、顺序存取、随机存储和顺序存储这四个概念是完全不一样的，切不可将之混淆\n很多人包括我可能认为随机存取就是随机存储，顺序存取就是顺序存取，其实不是这样。\n\n下面完整的介绍一下这4个概念\n1、存取结构分为随机存取和非随机存取（又称顺序存取）\n1、随机存取就是直接存取，可以通过下标直接访问的那种数据结构，与存储位置无关。例如数组。\n 非随机存取就是顺序存取，不能通过下标访问了，只能按照存储顺序存取，与存储位置有关，例如链表。\n2、顺序存取就是存取第N个数据时，必须先访问前（N-1）个数据 （list）;\n 随机存取就是存取第N个数据时，不需要访问前（N-1）个数据，直接就可以对第N个数据操作 （array）。\n\n2、存储结构分为顺序存储和随机存储3、顺序存储结构\n\n在计算机中用一组地址连续的存储单元依次存储线性表的各个数据元素，称作线性表的顺序存储结构。\n- 顺序存储结构是存储结构类型中的一种，该结构是把**逻辑上相邻的节点**存储在**物理位置上相邻的存储单元**中，结点之间的逻辑关系由存储单元的邻接关系来体现。 - 由此得到的储结构为顺序存储结构，通常顺序存储结构是借助于计算机程序设计语言（例如c/c++）的数组来描述的。12\n\n – 主要优点：节省存储空间。\n 因为分配给数据的存储单元全用存放结点的数据（不考虑c&#x2F;c++语言中数组需指定大小的情况），结点之间的逻辑关系没有占用额外的存储空间。采用这种方法时，可实现对结点的随机存取，即每一个结点对应一个序号，由该序号可以直接计算出来结点的存储地址。\n – 主要缺点：不便于修改，对结点的插入、删除运算时可能要移动一系列的结点。\n\n4、随机存储结构\n在计算机中用一组任意的存储单元存储线性表的数据元素（这组存储单元可以是连续的，也可以是不连续的）。它不要求逻辑上相邻的元素在物理位置上也相邻。因此它没有顺序存储结构所具有的弱点，但也同时失去了顺序表可随机存取的优点。\n\n –随机存储最典型的代表为链式存储：\n链式存储结构特点\n1、比顺序存储结构的存储密度小 （每个节点都由数据域和指针域组成，所以相同空间内假设全存满的话顺序比链式存储更多）。\n2、逻辑上相邻的节点物理上不必相邻。\n3、插入、删除灵活 （不必移动节点，只要改变节点中的指针）。\n4、查找结点时链式存储要比顺序存储慢。\n5、每个结点是由数据域和指针域组成\n一、数据结构的概念1、基本概念:\n\n数据：描述客观事实的符号，是计算机中可以操作的对象，能被计算机识别，并输给计算机处理的符号集合。\n数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被成为记录。\n数据对象：是性质相同数据元素的集合，是数据的一个子集。\n数据项：一个数据元素可以由若干个数据项组成，数据项是数据不可分割的最小单位。\n数据结构：相互之间存在一种或者多种特定关系的数据元素的集合。可分为逻辑结构和物理结构。\n\n\n\n2、算法(1)概念\n解决特定问题的求解步骤的一种描述，它是指令的有限序列，其中的每条指令表示一个或多个操作。\n\n(2)重要特性：\n①输入：有零个输入或者多个输\n②输出：只有一个或者多个输出\n③有穷性：算法在执行有限个步骤时，会自动结束而不会陷入无限循环里面\n④确定性：算法的每一步都有确定的含义而不会出现二义性\n⑤可行性：算法的每一步都可以通过有限次数完成。\n\n3、算法的评价标准(“好”的算法应该考虑达到以下目标)\n①正确性。算法能够正确地求解问题。\n②可读性。算法能具有良好的可读性，以帮助人们理解。\n③健壮性。输入非法数据时，算法能适当地做出反应或进行处理。而不会产生莫名其妙的输出结果。\n④效率与低存储量需求。效率指算法执行的时间，存储量需求是指算法执行过程中所需的最大存储空间。\n\n4、算法的时空效率(1)时间复杂度根据算法写成的程序在执行时耗费时间的长度，记为T(n) &#x3D; O(n)(2)空间复杂度根据算法写成的程序在执行时占用存储单元的长度记为S(n)(3)语句频度一个算法中的语句执行次数称为语句频度或时间频度，记为T(n)\n时间复杂度：时间复杂度实际上是一个函数，代表基本操作重复执行的次数，进而分析函数虽变量的变化来确定数量级，数量级用O表示，所以算法的时间复杂度为： T（n）&#x3D;O（f（n））\n\n\n在一个算法存在最好、平均、最坏三种情况，我们一般关注的是最坏情况，原因是，最坏情况是任何输入实例在运行时间的上界，对于某些算法来说，最坏情况出现的比较频繁，从大体上来看，平均情况和最坏情况一样差。\n\n(4)一般O（n）的计算方法：\n①用 1代替所有运行时间中出现的加法常数；\n②在修改后的运行函数中**保留最高阶的项；\n③如果最高阶的项系数不是1，则去除这个项系数。\n④ 递归算法的时间复杂度为：递归总次数每次递归中基本操作执行的次数。\n\n(5)常见的时间复杂度有以下七种：\n① O（1）常数型；② O（log2N）对数型；③ O（N）线性型；④ O（Nlog2N）二维型；⑤ O（N^2)平方型；⑥ O（N^3)立方型；⑦ O（2^N）指数型。\n例如：\ni=1;①while (i&lt;=n)&#123;\ti=i*2; ②&#125;解：语句1的频度是1, 设语句2的频度是f(n),则：2^f(n)&lt;=n;f(n)&lt;=log2n  取最大值f(n)= log2n, T(n)=O(log2n )12345678\n\n二、线性表1、顺序存储(1)结构体的定义typedef int Position;typedef struct LNode * PtrToLNode;struct LNode&#123;    ElmenetType Data[ MAXSIZE ];    Position Last;&#125;;typedef PtrToLNode List;12345678\n\n(2)顺序表的初始化\n1、构造一个空表\n2、动态分配表结构所需的存储空间，然后将表中Last指针置为-1 表示表中没有数据。\n\nList MakeEmpty()&#123;    List L;\t    L = (List)malloc(sizeof(struct LNode));    L-&gt;Last = -1;\t//Last 置为-1 表示表中没有数据元素    Return L;&#125;1234567\n\n\n通过L我们可以访问相应线性表的内容。比如：下标为i 的元素：L-&gt;Data[i]\n查询线性表的长度：L-&gt;Last+1;\n\n(3)顺序表的查找(时间复杂度为O(n))\n在线性表中查找与给定值 X 相等的数据元素。\n由于线性表的元素都存储在数组Data中，所以这个查找的过程实际上就是在数组里顺序查找：\n\n从第 1 个元素 a1 起依次和 X 比较， 直到找到一个与 X 相等的数据元素，返回它在顺序表中的存储下标；\n或者查遍整个表都没有找到与 X 相等的元素，则返回错误信息 ERROR。\n\n\n#define ERROR -1  /* 将错误信息 ERROR 的值定义为任一负数都可以 */Position Find( List L, ElementType X )&#123;    Position i = 0;    While( i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i] != X)    \ti++;    if( i &gt; L-&gt;Last)    \treturn ERROR;\t/* 如果没有找到，则返回错误信息 */    else    \treturn i;\t/* 找到后返回的是存储位置 */&#125;1234567891011\n\n(4）顺序表的插入 (时间复杂度为O(n))\n在表的插入是指在表的第 i（1≤ i ≤ n + 1）个位序上插入一个值为 X 的新元素（也可以理解为在第 i 个元素之前插入新的元素）\n插入后使得原来长度为 n 的序列，变为长度为 n+1的序列（i &#x3D; 1时插入序列的最前端，i &#x3D; n+1 时插入序列的最后）\n\n将ai~an顺序向后移动（移动次序是从 an 到ai)，为新元素让出位置；\n将 X 放入空出的第 i 个位序；\n修改 Last 指针（相当于修改表长）,使之指向最后一个元素。\n\n\nbool Insert( List L, ElementType X, int i)&#123; /* 在 L 的指定位序 i 前插入一个新元素 X； 位序 i 元素数组位置下标为 i-1 */    Postion j;    if(L-&gt;Last == MAXSIZE-1)    &#123;/* 表空间已满，不能插入 */        printf(&quot;表满！\\n&quot;);        return false;    &#125;        if( i&lt;1 || i &gt; L-&gt;Last+2)    &#123;/* 检查插入位序的合法性：是否在 1~n+1； n为当前元素个数，即Last+1 */        printf（&quot;位序不合法！\\n&quot;);        return false;    &#125;        for( j = L-&gt;Last; j &gt;= i-1; j--) /*Last 指向序列最后元素an */        L-&gt;Data[j+1] = L-&gt;Data[j]; /* 将位序为 i 及以后的元素顺序向后移动 */   \tL-&gt;Data[i-1] = X;\t/* Last 仍指向最后一个元素 */    L-&gt;Last++;    return true;&#125;123456789101112131415161718192021\n\n(5)顺序表的删除（时间复杂度为O(n)）\n将表中的位序为 i（1≤ i ≤ n + 1）的元素从线性表中去掉，删除后使原长度为 n 的数组元素序列,变为长度为 n-1 的序列\n\n将a[i+1]~a[n] 顺序向前移动 ，a[i] 元素被a[i+1]覆盖；\n修改 Last 指针（相当于修改表长）使之仍指向最后一个元素。\n\n\nbool Delete(List L, int i)&#123;  /*从 L 中删除指定位序 i 的元素，该元素数组下标为 i-1*/\tPosition j;\t\tif(i &lt; 1 || i &gt; L-&gt;Last + 1)/* 检查空表及删除位序的合法性*/ \t&#123;\t\tprintf(&quot;位序%d不存在元素&quot;,i);\t\treturn false;\t&#125;     \tfor( j = i; i &lt;= L-&gt;Last; j++)\t\tL-&gt;Data[j-1] = L-&gt;Data[j];/*将位序 i+1 及以后的元素顺序向前移动*/ \tL-&gt;Last--;/*Last 仍指向最后元素*/ \treturn true; &#125;123456789101112131415\n\n2、链表存储(1）结构体的定义（时间复杂度为O(n)）typedef struct LNode * PtrToLNode;struct LNode&#123;    ElementType Data;    PtrToLNode Next;&#125;;typedef PtrToLNode Position; /*这里的位置是结点的地址 */typedef PreToLNode List;12345678\n\n(2)求表长（时间复杂度为O(n)）\n在顺序存储中求表长是很容易的，直接返回 Last+1 就可以了。但在链式存储中，需要将链表从头到尾遍历一遍\n\n设一个移动指针p和计数器cnt，初始化后，p从表的第 1 个结点开始逐步往后移，同时计数器 cnt+1.\n当后面不再有结点时，cnt 的值就是结点个数，即 表长。\n\n\n\nint Length(List L)&#123;//默认该链表是有头结点的   \tPosition p;\tint i=0;  /* 初始化计数器 */        //单向链表的遍历(三部曲)\tp = L-&gt;next; /* p指向表的第 1 个结点 */\twhile(p)\t&#123; /* 遍历单链表，统计结点数 */ \t\tp=p-&gt;next;  \t\ti++; \t&#125; \treturn i;&#125;1234567891011121314\n\n(3)判空int ListEmpty(LinkList L)&#123;\t//若 L 为空，则返回1，否侧返回 0\tif(L-&gt;Next) //非空        return 0;    else        return 1;&#125;1234567\n\n(4)查找（时间复杂度为O(n)）\n有两种 按序号查找（FindKth）和 按值查找（Find）\n\n①按序号查找 FindKth（时间复杂度为O(n)）\n对于顺序存储，按序号查找是很直接的事情，要得到第 K 个元素的值，直接取L-&gt;Data[K-1]即可。\n但是对于链式存储则需要采用跟求表长类似的思路：\n\n从链表的第 1 个元素结点起，判断当前结点是否是第 K 个；\n若是，则返回该结点的值，否则继续对比后一个，直到表结束为止。\n如果没有第 K 个结点则返回错误信息。\n\n\n#define ERROR -1 /* 一般定义为表中元素不可能取到的值 */ElementType FindKth(List L, int K) &#123;\t/* 根据指定的位序 K， 返回 L 中相应的元素 */\tPosition P;    int cnt = 1; /* 位序从 1 开始 */\tp = L; /* p 指向 L的第 1 个结点 */\twhile(p &amp;&amp; cnt &lt; K)\t&#123;\t\tp = p-&gt;next;\t\tcnt++\t&#125; \t\tif((cnt == K) &amp;&amp; p)\t\treturn p-&gt;Data;\t/* 返回第 K 个 */\telse\t\treturn ERROR;\t/* 否则返回错误信息 */&#125; 123456789101112131415161718\n\n②按值查找，即定位 Find（时间复杂度为O(n)）\n基本方法：也是从头到尾遍历，直到找到为止：\n\n从链表的第 1 个元素结点起，判断当前结点的值是否等于 X；\n若是，返回该结点的位置，否则继续对比后一个，直到表结束位置为止；\n找不到时返回错误信息。\n\n\n#define ERROR NULL /*空地址表示错误 */Position Find( List L, ElementType X)&#123;    Position p = L;/* p指向 L 的第 1 个元素 */    while(p &amp;&amp; p-&gt;Data != x)    &#123;        p = p-&gt;Next;    &#125;        if(p)     \t return p;    else        return ERROR;&#125;123456789101112131415\n\n(5)链表的插入（时间复杂度为O(n)）\n\nint  ListInsert_L(LinkList &amp;L, int i,ElementType e)&#123;    p = L;    j = 0;    while(p&amp;&amp; j&lt;i-1)    &#123;//寻找第 i-1 个结点        p = p-&gt;next;        ++=j;    &#125;    if(!p || j &gt; i-1)        return ERROR;//    s = (LinkList)malloc(sizeof(LNode));//生成新结点s    s-&gt;data = e;\t\t//将结点s 的数据域的值 更新为 e    s-&gt;next = p-&gt;next;  //将结点s 插入 L 中    p-&gt;next = s;    return OK;&#125;1234567891011121314151617\n\n(6)创建链表（时间复杂度为O(n)）1、带头结点的【头插法】（时间复杂度为O(n)）\n/* 带头结点的插入创建 */void createListHead( Linklist L, int n )&#123;  \t\t//建立头结点    \tL = (LNode*)malloc(sizeof(struct LNode));    \tL-&gt;Next = NULL;    \t//建立单链表（头插法）    \tLNode *temp = NULL;    \t//申请空间，写入数据    \tfor(int i = 0; i &lt; n; i++)        &#123;            tmp = (LNode*)malloc(sizeof(struct LNode)); /* 申请、填装结点 */            scanf(&quot;%d&quot;,&amp;tmp-&gt;Data);//输入元素值            //插入到头结点的后面       \t \ttmp-&gt;Next = L-&gt;Next;         \tL-&gt;Next = tmp;\t           &#125;&#125;123456789101112131415161718\n\n2、带尾结点的插入【尾插法】（时间复杂度为O(n)）/*带尾结点的插入*/void CreateList_L( Listlist &amp;L, int n )&#123; //正位序数输入 n 个元素的值，建立带表头结点的单链表L    \t//建立头结点   \t    L = (LNode*)malloc(sizeof(struct LNode));   \t\tL-&gt;Next = NULL;    \t//建立单链表（尾插法）   \t \tLNode r = L; //尾指针指向头结点    \t//申请空间，写入数据    \tfor(int i = 0;i &lt; n; i++)        &#123;           \tLNode *tmp = (LNode*)malloc(sizeof(struct LNode)); /* 申请新结点 */            scanf(&quot;%d&quot;,&amp;tmp-&gt;Data); //输入元素            tmp-&gt;Next = NULL;            //插入到尾结点后面        \tr-&gt;next = temp;         \tr = tmp;\t   //r指向新的尾结点        &#125;&#125;12345678910111213141516171819\n\n(7)删除（时间复杂度为O(n)）\n\n//将线性表L 中第 i 个数据元素删除int ListDelete_L(LinkList &amp;L, int i, ElementType &amp;e)&#123;    p=L;    int j=0;    while(p-&gt;next &amp;&amp; j &lt; i-1)    &#123;//寻找第 i 个结点，并令p指向其前驱        p = p&gt;next;        ++j;    &#125;    if(!(p-&gt;next)||j &lt; i-1)        return ERROR;//删除位置不合理        q = p-&gt;next;\t//临时保存被删除结点的地址以备释放    p-&gt;next = q-&gt;next; //改变被除结点的驱结点的指针域    e = q-&gt;data;\t//保存被删除结点的数据域    free(q);\t\t//释放被删除结点的空间    return OK;&#125;12345678910111213141516171819\n\n3、二者时间复杂度和优缺点的比较1、两者复杂度比较\n\n\n\n查找\n插入\n删除\n\n\n\n顺序表\nO(1)\nO(1)\nO(n)通过下标直接找到待操作元素，主要时间花在移动元素上。\n\n\n链表\nO(n)\nO(n)主要时间用于找到插入元素的位置\nO(n)主要时间用于找到待删除元素的位置\n\n\n2、两者优缺点比较\n\n\n数组\n优点\n缺点\n\n\n\n\n随机访问性强；查找速度快\n插入和删除效率低；可能浪费内存；内存空间要求高，必须有足够的连续内存空间；数组大小固定，不能动态拓展\n\n\n\n\n\n链表\n优点\n缺点\n\n\n\n\n插入删除速度快；内存利用率高，不会浪费内存；大小没有固定，拓展很灵活。\n不能随机查找，必须从第一个开始遍历，查找效率低\n\n\n\n两者的区别在于顺序结构的要求一片连续的存储空间，而链式结构的不要求存储空间连续。\n\n三、栈1、栈的顺序存储实现\n通常由一个一维数组和一个记录栈顶元素位置的变量组成。\n\n(1)顺序栈结构体的定义\n当 Top &#x3D; -1时，表示栈空；当Top &#x3D; MaxSize -1 时，栈满！\n\ntypedef int Position;typedef int ElementType;typedef struct SNode *PtrToNode;struct SNode&#123;\tElementType * Data;  /*存储元素的数组*/\tPosition Top;\t\t /*栈顶指针*/\tint MaxSize;\t\t /*堆栈最大容量*/ &#125;;typedef PtrToNode Stack;12345678910\n\n(2)顺序栈的创建Stack CreateStack(int MaxSize) /*顺序栈的创建*/ &#123;\tStack S = (Stack)malloc(sizeof(struct SNode));\tS-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));\tS-&gt;Top = -1;\t\t       /*&quot;-1&quot;表示空栈  &quot;MaxSize-1&quot;表示满栈*/ \tS-&gt;MaxSize = MaxSize;      /*指定栈的最大容量*/ \treturn S;&#125;12345678\n\n(3)判满bool IsFull(Stack S)\t\t/*判断栈是否满了*/ &#123;\treturn(S-&gt;Top == S-&gt;MaxSize-1);&#125;1234\n\n(4)判空bool IsEmpty(Stack S)\t/*判断堆栈是否为空*/ &#123;\treturn(S-&gt;Top == -1);&#125;1234\n\n(5)入栈\n在执行堆栈 Push 操作时，先判断栈是否满；\n\n若不满，Top 加1，并将新元素放入 Data数组的Top位置上\n若满，则返回错误标志\n\n\nbool Push(Stack S, ElementType X)\t/*顺序栈的 入栈 操作*/ &#123; \tif(IsFull(S)) \t&#123;\t\tprintf(&quot;堆栈满！&quot;);\t\treturn false;\t&#125;\telse\t&#123;\t\tS-&gt;Data[++(S-&gt;Top)] = X;\t/*若是栈不满，则Top加 1,并将新元素放入Data数组的Top位置中*/ \t\treturn true;\t&#125;&#125;12345678910111213\n\n(6)出栈\n执行Pop操作时，首先判别栈是否为空；\n\n若不为空，返回Data[Top]，同时将Top-1;\n否则要返回错误标志\n\n\nElementType Pop(Stack S) /*顺序栈 的 出栈 操作*/ &#123;\tif(IsEmpty(S))\t\t\t&#123;\t\tprintf(&quot;堆栈空！&quot;);\t\treturn ERROR;\t\t\t\t\t/*ERROR 是 ElementType 类型的特殊值，标志错误。必须是正常栈元素数据不可能取到的值 */ \t&#125;\telse\t\treturn(S-&gt;Data[(S-&gt;Top)--]);\t/*若不空，返回Data[Top]，同时将Top减 1*/  &#125;12345678910\n\n2、栈的顺序存储实现\n链栈与单链表类似，但其操作受限制，插入和删除操作只能在链栈的栈顶进行。\n\n(1)顺序栈结构体的定义typedef struct SNode *PtrToSNode;typedef int ElementType;struct SNode&#123;\tElementType Data;\tPtrToSNode Next;&#125;;typedef PtrToSNode Stack;12345678\n\n(2)顺序栈的创建Stack CreateStack()&#123;\t/*构建一个堆栈的头结点，返回该结点指针*/ \tStack S;\tS = (Stack)malloc(sizeof(struct SNode));\tS-&gt;Next = NULL;\treturn S;&#125;1234567\n\n(3)判空bool IsEmpty(Stack S)&#123;\t/*判断堆栈 S 是否为空，若是返回 true，否则返回 false*/ \treturn(S-&gt;Next == NULL);&#125;1234\n\n(4)判满 注意：链栈，不必判断堆栈是否满(5)入栈\n链栈，不必判断堆栈是否满\n\nbool Push(Stack S, ElementType X)&#123;\t/*将元素 X 压入堆栈 S */ \tPtrToSNode TmpCell;\tTmpCell = (PtrToSNode)malloc(sizeof(struct SNode));\tTmpCell-&gt;Data = X;        //头插法\tTmpCell-&gt;Next = S-&gt;Next;\tS-&gt;Next =TmpCell;\treturn true;&#125;1234567891011\n\n(6)出栈ElementType Pop(Stack S) ElementType Pop(Stack S)&#123;\t/*删除并返回堆栈 S 的栈顶元素*/  \tPtrToSNode FirstCell;\tElementType TopElem;\t\tif(IsEmpty(S))\t&#123;\t\tprintf(&quot;堆栈空！&quot;);\t\treturn ERROR;\t&#125;\telse\t&#123;\t\tFirstCell = S-&gt;Next;\t\tTopElem = FirstCell-&gt;Data;\t\tS-&gt;Next = FirstCell-&gt;Next;\t\tfree(FirstCell);\t\treturn TopElem;\t\t\t\t\t\t\t\t&#125;&#125;/*顺序栈 的 出栈 操作*/ &#123;\tif(IsEmpty(S))\t\t\t&#123;\t\tprintf(&quot;堆栈空！&quot;);\t\treturn ERROR;\t\t\t\t\t/*ERROR 是 ElementType 类型的特殊值，标志错误。必须是正常栈元素数据不可能取到的值 */ \t&#125;\telse\t\treturn(S-&gt;Data[(S-&gt;Top)--]);\t/*若不空，返回Data[Top]，同时将Top减 1*/  &#125;12345678910111213141516171819202122232425262728\n\n3、栈的应用四、队列1、队列的顺序存储实现(1) 循环队列的结构体定义typedef int Status; typedef int QElemType; /* QElemType类型根据实际情况而定，这里假设为int *//* 循环队列的顺序存储结构 */typedef struct QNode&#123;\tQElemType data[MAXSIZE];\tint front;    \t/* 头指针 */\tint rear;\t\t/* 尾指针，若队列不空，指向队列尾元素的下一个位置 */&#125;SqQueue;123456789\n\n(2)生成空队列/* 初始化一个空队列Q */Status CreateQueue(SqQueue *Q)&#123;    SqQueue *Q = (SqQueue)malloc(sizeof(struct QNode));    Q-&gt;data = (ElementType*)malloc(MaxSize * sizeof(ElementType));\tQ-&gt;front = Q-&gt;rear = 0;\treturn  OK;&#125;12345678\n\n(3)判空\n队空的条件是：rear&#x3D;front\n\nbool IsEmpty(SqQueue *Q)&#123;    return(Q-&gt;front == Q-&gt;rear);&#125;1234\n\n(4)判满\n队满的条件是：(rear+1)%数组的长度等于 front\n\nbool IsFull(SqQueue *Q)&#123;    return((Q-&gt;rear+1)% MaxSize == Q-&gt;front);&#125;1234\n\n(5)入队/* 若队列未满，则插入元素e为Q新的队尾元素 */Status EnQueue(SqQueue *Q,QElemType e)&#123;\tif ((Q-&gt;rear+1)%MAXSIZE == Q-&gt;front)\t/* 队列满的判断 */\t\treturn ERROR;\tQ-&gt;data[Q-&gt;rear]=e;\t\t\t/* 将元素e赋值给队尾 */\tQ-&gt;rear=(Q-&gt;rear+1)%MAXSIZE;/* rear指针向后移一位置， */\t\t\t\t\t\t\t\t/* 若到最后则转到数组头部 */\treturn  OK;&#125;12345678910\n\n(6)出队/* 若队列不空，则删除Q中队头元素，用e返回其值 */Status DeQueue(SqQueue *Q,QElemType *e)&#123;\tif (Q-&gt;front == Q-&gt;rear)\t\t\t/* 队列空的判断 */\t\treturn ERROR;\t*e=Q-&gt;data[Q-&gt;front];\t\t\t\t/* 将队头元素赋值给e */\tQ-&gt;front=(Q-&gt;front+1)%MAXSIZE;\t/* front指针向后移一位置， */\t\t\t\t\t\t\t\t\t/* 若到最后则转到数组头部 */\treturn  OK;&#125;12345678910\n\n2、队列的链式存储实现\n队列与堆栈一样，也可以采用链式存储结构，但队列的头（front）必须指向链表的头结点，队列的尾（rear）指向链表的尾结点。\n\n(1)队列的链式存储结构体定义typedef int Status; typedef int QElemType; /* QElemType类型根据实际情况而定，这里假设为int */typedef struct QNode\t/* 结点结构 */&#123;   QElemType data;   struct QNode *next;&#125;QNode,*QueuePtr;typedef struct\t\t\t/* 队列的链表结构 */&#123;   QueuePtr front,rear; /* 队头、队尾指针 */&#125;LinkQueue;123456789101112\n\n(2)生成空队列/* 构造一个空队列Q */Status InitQueue(LinkQueue *Q)&#123; \tQ-&gt;front=Q-&gt;rear=(QueuePtr)malloc(sizeof(QNode));\tif(!Q-&gt;front)\t\texit(OVERFLOW);\tQ-&gt;front-&gt;next=NULL;\treturn OK;&#125;123456789\n\n(3)判空\n队空的条件是：rear&#x3D;front\n\nStatus QueueEmpty(LinkQueue Q)&#123; \tif(Q.front==Q.rear)\t\treturn TRUE;\telse\t\treturn FALSE;&#125;1234567\n\n(4)判满 链式队列，不必判断堆栈是否满(5)入队/* 插入元素e为Q的新的队尾元素 */Status EnQueue(LinkQueue *Q,QElemType e)&#123; \tQueuePtr s=(QueuePtr)malloc(sizeof(QNode));\tif(!s) /* 存储分配失败 */\t\texit(OVERFLOW);\ts-&gt;data=e;\ts-&gt;next=NULL;\tQ-&gt;rear-&gt;next=s;\t/* 把拥有元素e的新结点s赋值给原队尾结点的后继，见图中① */\tQ-&gt;rear=s;\t\t/* 把当前的s设置为队尾结点，rear指向s，见图中② */\treturn OK;&#125;123456789101112\n\n(6)出队/* 若队列不空,删除Q的队头元素,用e返回其值,并返回OK,否则返回ERROR */Status DeQueue(LinkQueue *Q,QElemType *e)&#123;\tQueuePtr p;\tif(Q-&gt;front==Q-&gt;rear)\t\treturn ERROR;\tp=Q-&gt;front-&gt;next;\t\t/* 将欲删除的队头结点暂存给p，见图中① */\t*e=p-&gt;data;\t\t\t\t/* 将欲删除的队头结点的值赋值给e */\tQ-&gt;front-&gt;next=p-&gt;next;/* 将原队头结点的后继p-&gt;next赋值给头结点后继，见图中② */\tif(Q-&gt;rear==p)\t\t/* 若队头就是队尾，则删除后将rear指向头结点，见图中③ */\t\tQ-&gt;rear=Q-&gt;front;\tfree(p);\treturn OK;&#125;1234567891011121314\n\n五、栈和队列操作的特点\n\n\n\n相同点\n不同点\n\n\n\n堆栈(FILO)\n只允许在端点处插入和删除元素；\n栈是先进后出或者后进先出；栈是只能在表的一端进行插入和删除操作的线性表\n\n\n队列(FIFO)\n只允许在端点处插入和删除元素；\n队列是先进先出；队列是只能在表的一端进行插入，然后在另外一端进行删除操作的线性表\n\n\n六、数组存储地址的计算\n\n\n数组类型\n存储地址的计算（a是数组首地址，len是每个数组元素所占长度）\n\n\n\n一维数组\na[i]的存储地址：a+i*len\n\n\n二维数组:a[m] [n]\n按行存储：a+(i * n+j) * len；按列存储：a+(j * m+i) * len\n\n\n\n例子：数组存储地址的计算示例：1）已知一维数组a中每个元素占用2个字节，求a[10]的存储地址？答：a[10]的存储地址为：a+10*2&#x3D;a+202）已知二维数组a[4][5]中, 每个元素占用2个字节，求元素a[3][2]按行为主序存储的存储地址和按列为主序存储的存储地址？答： 按行存储：a+(35+2) *2 &#x3D; a+34按列存储：a+(24+3) *2 &#x3D; a+22\n\n———————树———————一、二叉树1、定义\n二叉树是每个节点最多有两个子树的树结构。\n它有五种基本形态:\n\n二叉树可以是空集;\n根可以有空的左子树或右子树；\n或者左、右子树皆为空。\n\n\n\n2、结点的度、孩子、双亲、深度、有序树、无序树、树的高度a.结点、叶子、树的度\n\n结点的度：结点拥有的子树的数目。\n叶子：度为零的结点。\n树的度：树中结点的最大的度\n\n\nb.孩子、双亲、兄弟、子孙、祖先\n\n双亲：若一个结点有子树，该结点称为子树根的”双亲”。\n孩子：子树的根是该结点的”孩子”。\n兄弟：有相同双亲的结点互为”兄弟”。\n子孙：一个结点的所有子树上的任何结点都是该结点的子孙。\n祖先：从根结点到某个结点的路径上的所有结点都是该结点的祖先。\n\n\nc.无序树、有序树、森林\n\n无序树：如果树中结点的各子树之间的次序是无次序的，可以交换位置。\n有序树：如果树中结点的各子树之间的次序是有次序的, 不可以交换位置。\n森林：0个或多个不相交的树组成。对森林加上一个根，森林即成为树；删去根，树即成为森林。\n\n\nd.层次、高度\n层次：根结点的层次为1，其余结点的层次等于该结点的双亲结点的层次加1。树的深度和高度：二叉树中节点的最大层次称为二叉树的深度或高度。\n\n2、性质\n性质1：二叉树第 i 层上最多为 2^(i-1) (i≥1)个结点。\n性质2：深度为k的二叉树至多有2^k - 1个结点(k≥1)。\n性质3：具有n个结点的【完全二叉树】的高度k为(log&lt;2&gt;n) +1）（[log2n]表示不大于与其的整数）\n性质4：在任意一棵二叉树中，若终端结点的个数为n0，度为2的结点数为n2，则n0&#x3D;n2+1。\n性质5：如果对一棵有 n个结点的完全二叉树（其深度为(log&lt;2&gt;n) +1）的结点按 【层序】编号（从第1层到第(log&lt;2&gt;n) +1） 层，每层从左到右），对任一结点 i （1≤ i ≤ n）有：\n\n如果 i &#x3D; 1，则结点 i是二叉树的根，无双亲；如果 i ＞ 1，则其双亲是结点 [i&#x2F;2];\n如果2i ＞n，则结点 i 无左孩子（即结点 i 为叶子结点）；否则其左孩子是结点 2i；\n如果 2i+1 ＞n，则结点 i 无右孩子；否则其右孩子是结点 2i+1。\n\n\n3、满二叉树、完全二叉树和二叉排序树a.满二叉树\n定义：高度为h，并且由2{h} –1个结点的二叉树，被称为满二叉树。\n\n\nb.完全二叉树\n定义：一棵二叉树中，只有最下面两层结点的度可以小于2，并且最下一层的叶结点集中在靠左的若干位置上。这样的二叉树称为完全二叉树。\n特点：叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。显然，一棵满二叉树必定是一棵完全二叉树，而完全二叉树未必是满二叉树。\n\n\nc.二叉查找树\n定义：二叉查找树(Binary Search Tree)，又被称为二叉搜索树。左小右大，任意结点的左、右子树也是二叉查找树\n\n\n\n在二叉查找树中：(01) 若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；(02) 任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；(03) 任意节点的左、右子树也分别为二叉查找树。(04) 没有键值相等的节点（no duplicate nodes）。\n\n二、静态查找1、顺序存储结构\n指用一组地址连续的存储单元依次自上而下、自左至右存储完全二叉树的结点元素，即将完全二叉树上编号为i的结点元素存储在一维数组下标i－1的分量中。\n\n2、顺序查找\n从表的一端开始，逐个将记录的关键字和给定值比较，若找到一个记录的关键字与给定值相等，则查找成功；若整个表中记录均比较过，仍未找到关键字等于给定值的记录，则查找失败。\n\n缺点：查找表的长度越长，查找效率越低。\n优点：简单、适应面广，对查找表结构没有要求，对顺序存储和链式存储都适用。\n3、二分查找（也称“折半查找”，是一棵“二叉排序树”）\n设查找表元素存储在一维数组r[1,…,n]中，在表中的元素已经按关键字递增方式排序的情况下，\n进行[折半查找]的方法是：首先将待查元素的关键字（key）值与表r中间位置上（下标为mid）记录的关键字关键字进行比较，\n\n若相等，则查找成功；\n若key&gt;r[mid].key,则说明待查记录只可能在后半个子表r[mid+1,…,n]中；\n若key&lt;r[mid].key，则说明待查记录只可能在前半个子表r[1,…,mid-1]中；\n\n这样逐步缩小范围，直到查找成功或子表为空时失败为止。\n\n注意：每次缩小范围后，改变的下标是哪个\n//递增的方式排序，则折半查找的算法为//在数组r[low...high],在数组r中找值为key的元素int Bsearch(int r[],int low,int high,int key)&#123;    int mid;    while(low &lt;= high)    &#123;        mid = (low + high)/2;        if(key == r[mid])            return mid;        else if(key &lt; r[mid])            high = mid-1;        else            low = mid+1;    &#125;    return -1;&#125; //折半查找，递归算法int Bsearch_rec(int r[],int low,int high,int key)&#123;    int mid;    if(low &lt;= high)    &#123;        mid = (low + high)/2;        if(key == r[mid])            return mid;        else if(key &lt; r[mid])            return Bsearch_rec(r,low,mid-1,key);        else            return Bsearch_rec(r,mid+1,high,key);    &#125;    return -1;&#125;12345678910111213141516171819202122232425262728293031323334\n\n\n折半查找的过程可以用一颗二叉树来描述，以当前查找区域间的中间位置序号作为根，左半个子表和右半个子表中的记录序号分别分别作为根的左子树和右子树上的结点，这样构造的二叉树称为折半查找判定树，从树上可以看出：\n 查找成功时，折半查找的过程恰好走了一条从根结点到被查找结点的路径，与关键字进行比较的次数即为被查找结点在树中的层数。因此，折半查找判定树在查找成功时进行比较的关键字个数最多不超过树的深度，而具有n个结点的判定树的深度为；所以折半查找在查找成功时和给定值进行比较的关键字个数最多为。\n优点：查找效率更高，但它要求查找表进行顺序存储并按关键字进行排序。缺点：对表进行插入或删除时，需要移动大量元素。适用：表不易变动，且又经常进行查找的情况\n4、二分查找判定树ASL计算\n折半查找的过程看，可用二叉树来描述，二叉树中的每个结点对应有序表中的一个记录，结点中的值为该记录在表中的位置。通常称这个描述折半查找二叉树的过程称为折半查找判定树。\n\n例如：顺序存储的序列{1,2,3,4,5,6,7,8,9,10} 来构建二叉判定树，计算其ASL\n\n例如：长度为10的折半查找判定树的具体生成过程：\t都遵循这个规律，左孩子结点&lt;根结点&lt;右孩子结点 【左小右大】    （1）在长度为10的有序表中进行折半查找，不论查找哪个记录，都必须和中间记录进行比较，而中间记录为（1+10）/2 =5  (注意要取整)   即判定数的的根结点为5，如图7-2（a）所示。     （2）考虑判定树的左子树，即将查找区域调整到左半区，此时的查找区间为[1,4],那么中间值为（1+4）/2 =2 (注意要取整) ，所以做孩子根结点为2,如图7-2（b）所示。     （3）考虑判定树的右子树，即将查找区域调整到右半区，此时的查找区间为[6,10],那么中间值为（6+10）/2 =8 (注意要取整) ，所以做孩子根结点为8,如图7-2（c）所示。       (4)重复以上步骤，依次去确定左右孩子、123456789101112\n\n特点：\n\n1.折半查找是一棵二叉排序树，每个根结点的值都大于左子树的所有结点的值，小于右子树所有结点的值。\n2.折半查找判定数中的结点都是查找成功的情况，将每个结点的空指针指向一个实际上不存在的结点————外结点，所有外界点都是查找不成功的情况，如图7-2（e）所示。如果有序表的长度为n,则外结点一定有n+1个。\n\n（1）查找成功的ASL\n折半查找判定数中，某结点所在的层数就是即将要比较的次数，整个判定树代表的有序表的平均查找长度即为查找每个结点的比较次数之和除以有序表的 长度。\n\nASL成功 &#x3D; 每层结点所在高度×每层结点数 之和 除以 总结点数\n 例如：长度为10的有序表的平均查找长度为\tASL=(1×1+2×2+3×4+4×3)/10=29/10;123\n\n（2）查找不成功的ASL\n折半查找判定数中，查找不成功的次数即为查找相应外结点(定义在上方）与内结点的比较次数。整个判定树代表的有序表的平均查找长度。查找失败时的有序表的平均查找长度即为查找每个外结点的比较次数之和除以外结点的个数。\n\nASL失败 &#x3D; （每层【补上的】结点所在高度-1）×每层【补上的】结点数 之和 除以 【补上的】总结点数\n例如：查找失败时，长度为10的有序表的平均查找长度为：\tASL=(3×5+4×6)/11=39/11;123\n\n三、动态查找1、二叉树链表结构描述如下：typedef struct TNode *Position;typedef Position BinTree; /* 二叉树类型 */struct TNode&#123;/*树结点定义 */    ElementType Data; /* 结点数据*/    BinTree Left; /*指向左子树*/    BinTree Right;/*指向右子树*/&#125;;12345678\n\n二叉链表至少包含3个域：数据域 data、左指针域 lchild和右指针域 rchild\n指针域： n个结点有2n个指针域。\n空指针域：n 个结点的二叉链表中含有 n+1 个空指针域。\n\n2、二叉搜索（排序、查找）树的构造过程(1)构造过程\n构造二叉排序树的过程，就是从空二叉树开始，逐个向树中插入节点的过程。\n设记录的关键码序列为：63,90,70,55,67,42,98,83,10,45,58\n\n\n(2)插入过程算法及其代码\n设待插入节点关键码值为 X ：\n（1）先在树中查找值为 X 的节点，若查找成功，说明节点已存在，无需插入；\n（2）若查找失败，说明节点不存在，则将其插入到树中\n因此，新插入节点一定是作为叶子节点插入的。\n\nBinTree Insert(Bintree BST, ElmentType X)&#123;    if(!BST)    &#123;/*若原来树为空，生成并返回一个结点的二叉搜索树*/        BST = (BinTree)malloc(sizeof(struct TNode));        BST-&gt;Data = X;        BST-&gt;Left = BST-&gt;Right = NULL;    &#125;    else    &#123;/*开始查找插入元素的位置*/        if(X &lt; BST-&gt;Data)            BST-&gt;Left = Insert(BST-&gt;Left, X);/*递归插入左子树*/        else if(X &gt; BST-&gt;Data)            BST-&gt;Right = Insert(BST-&gt;Right, X);/*递归插入右子树*/    &#125;    return BST;&#125;1234567891011121314151617\n\n(2)删除过程算法及其代码\n二叉搜索树的删除操作比其它操作更为复杂，要删除结点在树中的位置决定了操作所采用的策略。\n\na.若要删除的结点是叶子结点\n 可以直接删除，然后再修改其父结点的指针。\n\nb.若要删除的结点只有一个孩子结点（该结点不一定是叶结点，可以是子树的根）\n 删除之前需要改变父结点的指针，指向要删除结点的孩子结点。\nc.若要删除的结点有左、右两棵子树，有两种选择：\n 基本原则：保持二叉搜索树的有序性\n 1、取其右子树中的最小元素；\n 2、取其左子树中的最大元素。\n\n(3)查找过程算法及其代码\nBST树的查找思想:\n首先将给定的K值与二叉排序树的根节点的关键字进行比较：\n\n若相等，则查找成功；\n若给定的K值小于BST树的根节点的关键字：继续在该节点的左子树上进行查找；\n若给定的K值大于BST树的根节点的关键字：继续在该节点的右子树上进行查找。\n\n\na.二叉搜索树的递归查找函数\n在二叉排序树上进行查找，则是从根结点出发走了一条从根到待查结点的路径；\n若查找不成功，则是从根结点出发走了一条从跟到某一叶结点的路径。\n\nPosition Find(BinTree BST,ElementType X)&#123;    if(!BST-&gt;Data)        return NULL;/* 查找失败 */    if(X &gt; BST-&gt;Data)        return Find(BST-&gt;Right, X);/* 在 右子树 中递归查找 */    else if(X &lt; BST-&gt;Data)        return Find(BST-&gt;Left, X);/* 在 左子树 中递归查找 */    else        return BST;/* 在当前结点查找成功，返回当前结点的地址*/&#125;1234567891011\n\nb.迭代查找算法\n由于非递归函数的执行效率高，一般采用非递归的迭代来实现查找。很容易将递归函数改为迭代函数\nwhile循环 代替 Find递归调用即可\n\nPosition Find(BinTree BST,ElementType X)&#123;    while(BST)    &#123;        if(X &gt; BST-&gt;Data)            BST = BST-&gt;Right;/* 向 右子树 中移动，继续查找 */        else if(X &lt; BST-&gt;Data)            BST = BST-&gt;Left; /* 向 右子树 中移动，继续查找 */        else /* X == BST-&gt;Data;*/            break;/* 在当前结点查找成功，跳出循环 */    &#125;     return BST;/* 返回找到的结点地址，或是NULL */&#125;12345678910111213\n\n(4)查找最大值和最小值\n根据二叉搜索树的性质，最小元素一定是在树的最左分支的端点上。最左分支的端点：最左分支上无左孩子的结点。\n最大元素一定在最右分支的端结点上。\n\n从根结点开始，当其不为空时，沿左分支或者右分支逐个判断各结点的指针，直到遇到空指针为止。\n当左分支逐层推下来查找到的是最小元素。\n反之，当右分支逐层推下来查找到的是最大元素。\n\n\n\na.最小元素的递归函数Position FindMin(BinTree BST)&#123; /* 最小元素在最左端点 */    if(!BST)        return NULL;/* 空的二叉搜素树，返回NULL */    else if(!BST-&gt;Left)        return BST;\t/* 找到最左端点并返回 */    else        return FindMin(BST-&gt;Left); /*沿左分支递归查找 */&#125;123456789\n\nb.查找最大元素的迭代函数Position FindMax(BinTree BST)&#123;    if(BST)        while(BST-&gt;Right);    \t\tBST = BST-&gt;Right; /*沿右分支一直向下，直到最右端点 */    return BST;&#125;1234567\n\n四、二叉树的遍历\n指按照某种次序访问二叉树的所有结点，并且每个结点仅访问一次，得到一个线性序列。\n\n1、先序遍历\n（1）访问根结点（2）先序遍历左子树（3）先序遍历右子树\n-中序、后序遍历相似\n\n\n\n先序遍历：A → B → D → C中序遍历：B → D → A → C后续遍历：D → B → C → A层序遍历：A → B → C → D\n\nvoid PreOrderTraverse(BiTree T)    //链式二叉树先序遍历递归算法&#123;\tif (T != NULL)\t&#123;\t\tprintf_s(&quot;%d &quot;, T-&gt;data);    //访问根结点\t\tPreOrderTraverse(T-&gt;lchild);    //先序遍历左子树\t\tPreOrderTraverse(T-&gt;rchild);    //先序遍历右子树\t&#125;&#125;//链式二叉树中序遍历递归算法void InOrderTraverse(BiTree T) &#123;\tif (T != NULL) &#123;\t\tInOrderTraverse(T-&gt;lchild);\t\tprintf_s(&quot;%d &quot;, T-&gt;data);\t\tInOrderTraverse(T-&gt;rchild);\t&#125;&#125;//链式二叉树后序遍历递归算法void PostOrderTraverse(BiTree T) &#123;\tif (T != NULL) &#123;\t\tPostOrderTraverse(T-&gt;lchild);\t\tPostOrderTraverse(T-&gt;rchild);\t\tprintf_s(&quot;%d &quot;, T-&gt;data);\t&#125;&#125;123456789101112131415161718192021222324252627282930\n\n2、层序遍历(队列实现）\n仔细看看层序遍历过程，其实就是从上到下，从左到右依次将每个数放入到队列中，然后按顺序依次打印就是想要的结果。\n\n\n实现过程\n\n从队列中取出一个元素；\n访问该元素所指结点；\n若该元素所指结点的左、右孩子结点非空，则将其左、右孩子的指针顺序入队。\n\n不断执行这三步操作，直到队列为空，再无元素可取，二叉树的程序遍历就完成了。\n\nvoid LevelorDerTraversal(BinTree BT)&#123;    Queue Q;    BinTree T;        if(!BT)        return;/* 若是空树则直接返回 */        Q = CreatQueue();\t/* 创建空队列 */    AddQ(Q, BT);    while(!IsEmpty(Q))    &#123;        T = DeteleQ(Q);        printf(&quot;%d&quot;,T-&gt;Data); /* 访问取出队列的结点 */        if(T-&gt;Left)            AddQ(Q, T-&gt;Left);        if(T-&gt;Right)            AddQ(Q, T-&gt;Right);    &#125;&#125;1234567891011121314151617181920\n\n3、由遍历序列还原二叉树\n已知先序遍历和中序遍历，可以还原二叉树；已知中序遍历和后序遍历，可以还原二叉树；已知先序遍历和后序遍历，不可以还原二叉树.\n\na.已知先序遍历和中序遍历还原二叉树\n\n算法思路：1、根据先序遍历结果确定根节点。先序遍历的第一个节点为根节点。2、 在中序遍历结果中找到根节点，根节点左侧的部分为左子树节点，根节点右侧的部分为右子树节点。3、 将中序遍历的结果按根节点分为两部分，迭代的执行第一步和第二步，直到还原整个二叉树。\n\n例如：已知先序遍历的结果为：ABDHIEJKCFLMGNO,中序遍历的结果为：HDIBJEKALFMCNGO\n则二叉树为以下结构：\n\n其后序遍历结果为：HIDJKEBLMFNOGCA\nb.已知后序遍历和中序遍历还原二叉树\n算法思路：1、根据后序遍历结果确定根节点。后序遍历的最后一个节点为根节点。2、在中序遍历结果中找到根节点，根节点左侧的部分为左子树节点，根节点右侧的部分为右子树节点。3、将中序遍历的结果按根节点分为两部分，迭代的执行第一步和第二步，直到还原整个二叉树。\n\n例如：已知后序遍历的结果为：HIDJKEBLMFNOGCA,中序遍历的结果为：HDIBJEKALFMCNGO\n则二叉树为以下结构：\n\n其先序遍历结果为：ABDHIEJKCFLMGNO\n五、递归遍历算法的应用1、求二叉树的深度//求树的深度int TreeDeep(BiTree T) &#123;    int deep = 0;    if (T != NULL)     &#123;        int leftDeep = TreeDeep(T-&gt;lchild);        int rightDeep = TreeDeep(T-&gt;rchild);        deep = leftDeep &gt;= rightDeep ? leftDeep + 1 : rightDeep + 1;    &#125;    return deep;&#125;123456789101112\n\n2、求二叉树的叶子树//求叶子树int LeafCount(BinTree T,int num)&#123;    if(T)    &#123;        if(!T-&gt;Left &amp;&amp; !T-&gt;Right)        &#123;            nm++;        &#125;        TreeDeep(T-&gt;lchild, num);        TreeDeep(T-&gt;rchild, num);    &#125;    return num; &#125;1234567891011121314\n\n3、交互（换）左、右子树void Swap(BiTree *&amp;right,BiTree *&amp;left)&#123;\tBiTree *temp=right;\tright=left;\tleft=temp;&#125;void SwapSubtrees(BiTree *T)&#123;\tif(!T)\t\treturn ;\tSwapSubtrees(T-&gt;rchild);\tSwapSubtrees(T-&gt;lchild);\tSwap(T-&gt;rchild,T-&gt;lchild);&#125;123456789101112131415\n\n六、静态查找和动态查找的根本区别\n上述基于二叉排序树的动态查找，它的基本原理和基于线性表的静态二分查找很相似，都是利用有序性不断缩小查找空间。\n而之所以有静态和动态之分，主要是为了适应不同的应用需求。\n\n\n\n\n\n适合用于\n\n\n\n静态查找\n数据一旦建立好，不需要或者很少进行 删除 和 插入 操作\n\n\n动态查找\n频繁的数据变化，插入 和 删除 是基本操作\n\n\n七、树&#x2F;森林与二叉树的转换1、树、森林与二叉树的转换由于二叉树是有序的，为了避免混淆，对于无序树，我们约定树中的每个结点的孩子结点按从左到右的顺序进行编号。\n\n将树转换成二叉树的步骤是：（1）加线。就是在所有兄弟结点之间加一条连线；（2）抹线。就是对树中的每个结点，只保留他与第一个孩子结点之间的连线，删除它与其它孩子结点之间的连线；（3）旋转。就是以树的根结点为轴心，将整棵树顺时针旋转一定角度，使之结构层次分明。\n\n2、森林转换为二叉树森林是由若干棵树组成，可以将森林中的每棵树的根结点看作是兄弟，由于每棵树都可以转换为二叉树，所以森林也可以转换为二叉树。\n\n将森林转换为二叉树的步骤是：（1）先把每棵树转换为二叉树；（2）第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子结点，用线连接起来。当所有的二叉树连接起来后得到的二叉树就是由森林转换得到的二叉树。\n\n\n3、二叉树转换为树\n二叉树转换为树是树转换为二叉树的逆过程，其步骤是：（1）若某结点的左孩子结点存在，将左孩子结点的右孩子结点、右孩子结点的右孩子结点……都作为该结点的孩子结点，将该结点与这些右孩子结点用线连接起来；（2）删除原二叉树中所有结点与其右孩子结点的连线；（3）整理（1）和（2）两步得到的树，使之结构层次分明。\n\n4、二叉树转换为森林\n二叉树转换为森林比较简单，其步骤如下：（1）先把每个结点与右孩子结点的连线删除，得到分离的二叉树；（2）把分离后的每棵二叉树转换为树；（3）整理第（2）步得到的树，使之规范，这样得到森林。\n\n5、转换以后的特点： (1、 根据树与二叉树的转换关系以及二叉树的遍历定义可以推知：\n\n树的先序遍历与其转换的相应的二叉树的先序遍历的结果序列相同；\n树的后序遍历与其转换的二叉树的中序遍历的结果序列相同；\n树的层序遍历与其转换的二叉树的后序遍历的结果序列相同。\n\n（2、 由森林与二叉树的转换关系以及森林与二叉树的遍历定义可知：\n 森林的先序遍历和中序遍历与所转换得到的二叉树的先序遍历和中序遍历的结果序列相同。\n八、线索二叉树\n传统的二叉链表仅能体现出一种父子关系，不能直接得到结点在遍历中的前驱或后继。引入【线索二叉树】正是为了加快查找结点前驱和后继的速度。（1、定义：\n\n前驱与后继：在二叉树的先序、中序或后序遍历序列中的两个相邻的结点；\n线索：指向前驱或后继的结点的指针；\n线索二叉树：加上线索的二叉链表的二叉树；\n线索化：对二叉树按某个遍历次序使其变为线索二叉树的过程。\n\n（2、规定：【口诀：左前右后，0孩1前后】\n\n若无左子树，令lchild指向其前驱结点；\n若无右子树，令rchild执行指向其后继结点\n增加两个标志域标识是指左/右孩子还是指向前驱/后继。\n\n\n1、存储结构//线索二叉树存储结构typedef struct ThreadNode&#123;\tchar data;\tstruct ThreadNode *lchild, *rchild;\t// 左右孩子指针\tint ltag, rtag;\t// 左右线索标志&#125;ThreadNode, *ThreadTree;123456\n\n\n2、如何判断是孩子还是线索其标志位含义如下： 【口诀：左前右后，0孩1前后】\n\n\n这种加上线索的二叉链表称为线索链表，相应的二叉树称为线索二叉树。\n根据线索性质的不同， 线索二叉树可分为前序线索二叉树、 中序线索二叉树和后序线索二叉树三种。\n\n3、三种遍历\n因为线索化后， 各个结点指向有变化， 因此原来的遍历方式不能使用， 需要使用新的方式遍历线索化二叉树。\n中序线索二叉树的结点中隐含了线索二叉树的前驱和后继信息。\n在对其遍历时，需要找到第一个具有前驱结点的左结点，然后依次找结点的后继。\n在中序线索二叉树中找结点后继的规律是:\n\n若其右标志为1，则右链为线索，指示其后继;\n否则遍历右子树中第一个访问的结点（右子树中最左下的结点）为其后继。\n\n\nvoid InOrderTraverse(BiThrTree T)&#123; // 中序输出    if(T)    &#123;        InOrderTraverse(T-&gt;lchild); //中序遍历左子树        cout&lt;&lt; T-&gt;data;        InOrderTraverse(T-&gt;rchild); //中序遍历右子树    &#125;&#125;12345678\n\n九、哈夫曼树1、带权路径长度WPL\n2、哈夫曼树的构造（算法）\n构造 Huffman 树的基本思想：权值大的结点用短路径，权值小的结点用长路径。\n\n\n\n构造过程\n\n\n\n3、哈夫曼树的性质\n4、哈夫曼编码\n\n———散列查找———一、散列查找1、基本概念\n散列函数\n\n 在进行查找时，在记录的存储位置与它的关键字之间建立一个确定的对应关系h,以线性表中每个元素的关键字K为自变量，通过函数h(K)计算出该元素的存储位置，我们将h函数称为散列函数或哈希函数。h(K)的值称为散列地址或哈希地址。\n\n冲突\n\n 在实际应用中，通常可能出现一个待插入元素的散列地址单元已被占用情况，使得该元素无法直接存入此单元，这种情况称为冲突。\n\n同义词\n 具有不同关键字而具有相同散列地址的元素称为同义词，即key1≠key2，但h(key1)&#x3D;h(key2)。由同义词引起的冲突称作同义词冲突。\n\n装填因子(α)\n指散列表中已存入的元素数n与散列表空间大小m的比值,即：α&#x3D;n&#x2F;m。当α越小时，冲突可能性就越小，但同时，存储空间利用率就越低。\n\n\n散列表：根据设定的哈希函数及处理冲突的方法将一组关键字映象到一个有限的连续的地址集上，即把记录存放在表中映象的位置上，这种表便称为散列表(哈希表)。\n\n一个散列表的好坏与三个因素有关：1.装填因子 2、所采用的散列函数 3、解决冲突的方法\n\n\n假定一个线性表为A&#x3D;(18,75,60,43,54,90,46)，选取散列函数为：h(K)&#x3D;K%m 取m&#x3D;13则得每个元素散列地址：h(18)&#x3D;18 % 13&#x3D;5h(75)&#x3D;75 % 13&#x3D;10h(60)&#x3D;60 % 13&#x3D;8h(43)&#x3D;43 % 13&#x3D;4h(54)&#x3D;54 % 13&#x3D;2h(90)&#x3D;90 % 13&#x3D;12h(46)&#x3D;46 % 13&#x3D;7根据散列地址，实现元素的存储映象H[m]：\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\nH\n\n\n54\n\n43\n18\n\n46\n60\n\n75\n\n90\n\n\n\n\n例：如向下表中再插入元素70时，70%13&#x3D;5，则出现了冲突\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\nH\n\n\n54\n\n43\n18\n\n46\n60\n\n75\n\n90\n\n\n\n2、散列函数[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OtlYI1uv-1641217649135)(myReviewPicture&#x2F;散列函数.png)]\n 构造散列函数的目标是使散列地址尽可能均匀分布在散列空间上，同时使计算尽可能简单，以节省计算时间。1\n\n（1、关键词为数字时：a.直接定址法\nb.除留余数法(常用)\nc.数字分析法分析数字关键字在各位上的变化情况，取比较随机的位作为散列地址，如电话号码、身份证号码某几位会比较随机；1\n\n\n**例：**有一组关键字如下：\n 92326875\n 92739628\n 92343634\n 92706816\n 92774638\n 92381262\n 92394220\n通过分析：每个关键字从左到右第1、2、3位和第6位取值较集中，不宜作散列地址，其余的第4、5、7、8位取值分散，可以选择，若取最后两位作散列地址，得：(2,75,28,34,16,38,62,20)\n\nd.平方取中法key取平方再取中间几位1\n\n（2、关键词为字符时：a、ASCII码加和法h(key)=(求和key[i])mod TableSize1\n\nb、前3个字符移位法h(key)=(key[0]*27*27+key[1]*27+key[2])mod TableSize1\n\n二、处理冲突的方法1、开放定址法\na.线性探测法\n\n\n注意：查找某个值时，用散列函数计算完后，如果那个结果位置上的数字与关键词不一样时，并不能断定关键词不存在，还应该按照冲突解决策略继续找，直到找到空位置了还没找到，才能断定该关键词不存在。\nb、平方探测（二次探测）\n\n举例：h(key)&#x3D;key mod 11;\n\n\n\n**注意：**取素数是为了减少公因子（减少冲突）\n\nc.在散列法\n2、分离链接法\n\n———————————————图————————————————一、图的基本概念\n集合只有同属于一个集合；线性结构存在一对一的关系；树形结构存在一对多的关系；图状结构存在多对多的关系。\n\n\n\n1、简单图\n简单图满足以下两条内容：\n1）不存在重复边\n2）不存在顶点到自身的边\n\n2、完全图\n任意两顶点之间都存在边\n\n3、连通分量\n在无向图中，两顶点有路径存在，就称为连通的。若图中任意两顶点都连通，同此图为连通图。无向图中的极大连通子图称为连通分量。\n\n4、强连通分量\n在有向图中，两顶点两个方向都有路径，两顶点称为强连通。\n若任一顶点都是强连通的，称为强连通图。有向图中极大强连通子图为有向图的强连通分量。\n\n5.顶点的度、入度和出度\n顶点的度为以该顶点为一个端点的边的数目。\n对于无向图，顶点的边数为度，度数之和是顶点边数的 2 倍。\n对于有向图，入度是以顶点为终点，出度相反。有向图的全部顶点入度之和等于出度之和且等于边数。顶点的度等于入度与出度之和\n\n注意：入度与出度是针对有向图来说的\n二、图的存储1、数组（邻接矩阵）表示法\n建立一个顶点表（记录各个顶点信息）和一个邻接矩阵（表示各个顶点之间关系）。\n\n设图A&#x3D;（V，E）有n个顶点，则\n\n\n图的邻接矩阵是一个二位数组A.arcs[n] [n]，定义为：\n\n\nåœ¨è¿™é‡Œæ’å¥å›¾ç‰‡æè¿°\na.无向图的邻接矩阵表示法\n分析1：无向图的邻接矩阵是对称的；分析2：顶点i的度&#x3D;第i行（列）中1的个数；特别：完全图的邻接矩阵中，对角元素为0，其余1。\n\n\nb.有向图的邻接矩阵表示法\n注：在有向图的邻接矩阵中，第 i 行含义：以结点vi为尾的弧（即出度边）第 i 列含义：以结点vi为头的弧（即入度边）分析1：有向图的邻接矩阵可能是不对称的；分析2：顶点的出度 &#x3D; 第 i 行元素之和顶点的入度 &#x3D; 第 i 列元素之和顶点的度 &#x3D; 第 i 行元素之和 + 第 i 列元素之和\n\n\nc.有权图（网）的邻接矩阵表示法\n\n2.邻接表（顺序存储与链式存储结合）![\na.无向图的邻接表\nb.有向图的邻接表与逆邻接表\nc.带权值的网图\n三、图的遍历1、深度优先遍历算法\n深度优先搜索类似于树的先序遍历。\n其基本思想是：\n\n首先访问起始顶点v，然后由v出发，访问与v 邻接且未被访问的任一顶点w1，再访问与w1 邻接且未被访问的任一顶点W2……重复上述操作。\n当不能再继续向下访问时，依次退回到最近被访问的顶点，若它还有邻接顶点未被访问过，则从该点开始继续上述搜索过程，直至图中所有顶点均被访问过为止。\n\n\n\n\n从顶点a 出发，进行深度优先遍历，可以得到的一种顶点序列为：a e d f c b\n\n2、广度优先遍历算法\n广度优先搜索类似于二叉树的层序遍历算法。\n其基本思想是：\n\n首先访问起始顶点v，接着由ν出发，依次访问v 的各个未访问过的邻接顶点W1，W2，…，Wi，然后依次访问W1，W2，…，Wi的所有未被访问过的邻接顶点；\n再从这些访问过的顶点出发，访问它们所有未被访问过的邻接顶点，直至图中的所有顶点都被访问过为止。\n若此时图中尚有顶点未被访问，则另选图中的一个未被访问的顶点作为始点，重复上述过程，直至图中所有顶点都被访问到为止。\n\n\n\n\n从顶点1 出发，按照广度优先规则遍历，可以得到的一种顶点序列是： 1234576\n\n二、最小生成树1、性质\n2、Prim算法\n\n\n3、Kruskal算法\n三、拓扑排序\n\n四、最短路径迪杰斯特拉算法\n通过迪杰斯特拉算法计算图G中的最短路径时，需要指定起点s。\n 此外，需要引进两个集合S和U。\n\nS的作用：记录已求出最短路径的顶点（以及相应的最短路径长度），\nU的作用：记录还未求出最短路径的顶点（以及该顶点到起点s的距离）。\n初始时，S中只有起点s；\nU中是除s之外的顶点，并且U中顶点的路径是“起点s到该顶点的路径”。\n然后，从U中找到路径最短的顶点，并将其加入到S中；\n接着，更新U中的顶点和顶点对应的路径。\n然后，再从U中找到路径最短的顶点，并将其加入到S中；接着，更新U中的顶点和顶点对应的路径。\n重复上述操作，直到遍历完所有顶点。\n\n\n\n\n具体过程1、初始化，所有顶点的距离初始化为无穷大（INFINITY)\n\n2、选定点A，更新（A-A距离设为0)\n\n3、S集合为{A,B}，考察B的所有邻接点\n\n为什么选定B加入集合S？因为不可能还有其他路径比2还短，我不管经过C到B还是D到B都不可能是路径小于2，所以我们得到了A-&gt;B的最短路径\n\n\n\n做完这一步，下一步加入集合S的是D因为目前A-&gt;D的路径长度最短，为3（我已经知道了A直接到D和A经过B到D的路径长度）如果A-&gt;B-&gt;X-&gt;D小于min{A-&gt;D,A-&gt;B-&gt;D},那么A-&gt;B-&gt;X小于min{A-&gt;D,A-&gt;B-&gt;D}，那么加入集合的应该是X，这是矛盾的（接下来的操作都是一样的道理\n\n4、S集合为{A,B,D}，在U中没有D的邻接点，不操作\n5、S集合为{A,B,D,C}，在U中没有C的邻接点，不操作\n6、S集合为{A,B,D,C,F}，更新\n\n7、S集合为{A,B,D,C,F,E}，在U中没有E的邻接点，不操作\n8、S集合为{A,B,D,C,F,E,G}，在U中没有G的邻接点，不操作\n9、最终结果如上图。\n———排序———一、排序的类别\n1、插入排序基本思想：\n【1】直接插入排序（1、基本思想：\n1）、将待排序的一组序列（有N个数）分为已排好的和未排好的 2个部分；\n2）、初始状态时，已排序序列仅包含第1 个元素，未排序序列中的元素为除去第1 个元素意外的N-1 个元素；\n3）、此后，将未排序序列中的元素逐一插入到已排序的序列中；\n4）、如此往复，经过N-1 次插入后，未排序序列中元素个数为0 ，则排序完成。\n\n（2、执行过程\n\n（3、时空效率及稳定性\n【2】希尔排序（1、基本思想：\n1）、将带排序序列的一组元素按一定间隔分为若干序列分别进行插入排序；\n2）、开始时设置的“间隔”较大，在每轮排序中，将**”间隔“逐步缩小**\n3）、直到“间隔”为 1，也就到了最后一步，做简单插入排序。\n\n（2、执行过程\n（3、时空效率及稳定性\n2、交换排序基本思想：\n【1】冒泡排序（1、基本思想：\n（2、执行过程\n（3、时空效率及稳定性\n【2】快速排序（1、基本思想：\n1)、将未排序元素根据一个作为基准的“主元（pivot）分为两个子序列；\n2）、其中一个子序列的记录均大于“主元”，另一个序列则均小于“主元；\n3）、递归地对两个子序列用类似的方法进行排序。\n\n（2、执行过程\n\n\n（3、时空效率及稳定性\n3、选择排序基本思想：\n【1】简单选择排序（1、基本思想：\n1）、在未排序的序列中选出最小元素和序列的首位元素交换，\n2）、再在剩下的排序序列中再选出最小元素与序列的第2 个位置元素交换\n3）、以此类推，最后形参从小到大的已排序序列。\n\n（2、执行过程\n（3、时空效率及稳定性\n【2】堆排序（1、基本思想：\n1）、利用**最大堆（或最小堆）*输出*堆顶元素，即最大值（或最小值）；\n2）、将剩余元素重新生成最大堆（或最小堆），继续输出堆顶元素；\n3）、重复此过程，知道全部元素都已输出，得到的输出元素序列即为有序序列\n\n（2、执行过程要点&lt;1&gt;初始化堆的过程\n\n\n下面是构建初始堆的过程\n\n\n\n下面是堆排序的过程\n\n\n\n（3、时空效率及稳定性\n4、归并排序\n二、各种排序的比较口诀：快选堆希不稳，选堆归基不变\n不稳：说的是 算法不稳定\n不变：说的是 关于移动次数和关键字顺序无关的排序\n\n\nend\nend\n","categories":["笔记"]},{"title":"typora图床设置","url":"/Arknight-notes/posts/39599.html","content":"兰空图床安装可以去看另一篇文章 搭建一个属于自己的图床\n一、安装和配置picgo\n首先到picgo的官方仓库下载安装包 Molunerfinn&#x2F;PicGo: A simple &amp; beautiful tool for pictures uploading built by vue-cli-electron-builder (github.com) 安装过程一路next就ok，安装完成后的界面：\n\n\n安装兰空图床插件\n这里可以直接到picgo的插件设置里面搜索兰空安装插件，或者是直接到官方github下载并且手动安装，链接：hellodk34&#x2F;picgo-plugin-lankong: A PicGo uploader for 兰空图床 lsky-pro，支持 V1 和 V2。 (github.com)教程在链接里面有。\n\n\n获取兰空图床token\n这里使用postman请求一个token，信息按照图片里的填就ok，记得把域名换成你自己图床的域名。\n\n\n设置picgo\n\n打开图床设置，选择lankong，照着写即可。\n\n\n检测效果\n图床选lankong，随便上传一张图片，看看能不能成功。\n\n\n\n\n二、对接typora打开typora，前往偏好设置，进行如下设置：\n\n并点击验证图片上传选项：\n\n能出现如图界面说明成功了。\n现在你往typora拖拽图片能自动上传到兰空图床图床\n","categories":["博客美化"]},{"title":"数据结构复习其一","url":"/Arknight-notes/posts/49533.html","content":"大一下数据结构泡图书馆战斗几个星期从日到夜好不容易勉强过了\n艹\n\n\n\n\n\n\n第一章：数据结构绪论一、数据1.数据是信息的载体，是描述客观事物的数、字符、以及所有能输入到计算机中，被计算机程序识别和处理的符号的集合。\n2.数据分为：数值性数据和非数值性数据。\n二、数据元素1.数据元素是数据的基本单位，是数据集合的个体。\n2.一个数据元素可以由若干数据项组成（此时数据元素被称为记录）。\n3.数据元素又称为元素、结点、记录。\n三、数据项1.数据项是具有独立含义的最小标识单位。\n2.数据项是数据的最小单位。\n四、数据对象1.数据对象是具有相同性质的数据元素的集合，是数据的一个子集。\n（整数数据对象，字母字符数据对象）\n五、结构1.结构是元素之间的。\n2.结构包含空间位置关系，相互作用和依赖关系。\n3.四种基本结构：集合结构、线性结构、树形结构、图形结构。\n(1)集合结构：结构中的数据元素之间除“同属一个集合”外，别无其他关系。\n(2)线性结构：数据元素一对一关系。\n(3)树形结构：一对多。\n(4)图形结构：多对多。\n六、数据结构1.形式定义：某一数据对象的所有数据成员之间的关系。记为：\nData_Structure&#x3D;{D,S}\n其中,D是某一数据对象，即数据元素的有限集合，S是该对象中所有数据成员之间的关系的有限集合。\n2.数据结构是相互之间存在一种或多种特点关系的数据元素的集合。\n3.数据结构包含三方面的内容：逻辑结构，存储结构和数据的运算。\n2.线性数据结构：L&#x3D;{K,R}（其中K为点集，R为关系&lt;&gt;）\n3.树形数据结构：T&#x3D;{K,R}（其中K为点集，R为关系&lt;&gt;）\n4.图形数据结构：G&#x3D;{K,R}（其中K为点集，R为关系() ）\n七、数据结构要解决的问题1.从广义上讲，数据结构描述现实世界实体的数学模型及其上的操作在计算机中的表示和实现。\n八、逻辑结构1.逻辑结构描述数据元素之间的关系。\n2.逻辑结构包括线性结构和非线性结构。\n（1）线性结构包括线性表（表、栈、队列、串）。栈、队列、串是受限线性表。\n（2）非线性结构包括树（二叉树、赫夫曼树、二叉排序树）和图（有向图、无向图）。\n九、物理结构（存储结构）1.物理结构是数据结构在计算机中的表示（或映像）。（存储结构是逻辑结构在计算机中的存储映像，包括数据元素映像和关系映像，但是逻辑结构是独立于存储结构的。）\n2.物理结构包括：顺序存储表示、非顺序存储（链式存储表示、索引存储表示、散列存储表示）。\n注意：有序表属于逻辑结构；顺序表、哈希表、单链表属于存储结构\n(1)顺序存储：逻辑上相邻的元素，存储的物理位置也相邻。优点：随机存取，每个元素占用最少的存储空间；缺点：只能使用相邻的一整块存储单元，可能产生较多的外部碎片。\n(2)链式存储：不要求逻辑上相邻的元素，存储的物理位置也相邻。借助指针表示元素之间的逻辑关系。优点：不会出现碎片现象，充分利用所有存储单元；缺点：每个元素因存储指针占用额外的存储空间，且只能实现顺序存取。\n(3)索引存储：建立附加索引表。优点：检索速度快；缺点：附加的索引表占内存，增加和删除数据也会修改索引表，花费较多时间。\n(4)散列存储：根据关键字直接计算存储地址。优点：检索、删除、增加都很快；缺点：会发生冲突，花费时间。\n十、数据类型1.数据类型是一个值的集合和定义在这个值集上的一组操作的总称。\n（如int整型变量，其值集为某个区间上的整数，定义在其上的操作为+、-、x、&#x2F;等)\n2.原子数据类型是不可分解的数据类型（如int、float、char、*等等）。\n3.结构数据类型\n（1）由若干成分（原子类型或结构类型）按照某种结构组成的数据类型）\n（2）结构数据类型可以看做是一种数据结构和定义在其上的一组操作组成的整体。\n（3）如数组，由若干个分量组成，每个分量可以是整数，也可以是数组（int A[10]）。\n4.抽象数据类型\n（1）由用户定义，用以表示应用问题的数据模型。\n（2）由基本的数据类型组成，并包括一组相关的操作。\n（3）信息隐蔽和数据封装，使用与现实相分离。\n（4）抽象数据类型ADT是一个数学模型以及定义在该模型上的一组操作。\n（5）抽象数据类型&#x3D;数据结构+定义在此数据结构上的一组操作。\n（6）（D，S，P）三元组表示。（D是数据对象，S是D上的关系集，P是对D的基本操作集）\n（7）ADT定义：\nADT 抽象数据类型名{\n数据对象：&lt;数据对象的定义&gt;\n数据关系：&lt;数据关系的定义&gt;\n基本操作：&lt;基本操作（函数）的定义&gt;\n}ADT 抽象数据类型名\n例子：\nADT Triplet {\n数据对象：D &#x3D; {e1,e2,e3 | e1,e2,e3∈ElemSet}\n数据关系：R = &#123;&lt;e1,e2&gt;, &lt;e2,e3&gt;&#125;基本操作：Max(T, &amp;e)                           \n\n初始条件：三元组T已存在。\n操作结果：用e返回T的3个元素中的最大值。　　\n　　　　 Min(T, &amp;e)\n初始条件：三元组T已存在。\n操作结果：用e返回T的3个元素中的最小值。　\n} ADT Triplet\n（7）抽象数据类型可以通过固有的数据类型来实现：\n抽象数据类型：类class\n数据对象：数据成员\n基本操作：成员函数（方法）\n十一、算法1.算法是对特定问题求解步骤的一种描述。\n2.算法是一有限长的操作序列。\n3.算法特性：\n（1）有穷性：算法在执行有穷步后能结束。\n（2）确定性：每步定义都是确切、无歧义，相同输入相同输出。\n（3）可行性：每一条运算应足够基本（已验算正确）。\n（4）输入：有0个或多个输入。\n（5）输出：有1个或多个输出。\n4.算法设计要求（目标）：\n（1）正确性：满足具体题目的需求。\n（2）可读性：便于理解和修改。\n（3）健壮性：当输入数据非法时，也能适当反应。\n（4）效率高：执行时间少。\n（5）空间省:执行中需要的最大存储空间少。\n十二、时间复杂度1.算法效率的度量是通过时间复杂度和空间复杂度来描述的。\n衡量算法的效率，主要依据算法执行所需要的时间，即时间复杂度。\n注意：算法分析的目的：分析算法的效率以求改进。\n2.事后统计法：计算算法开始时间与完成时间差值。\n缺点：（必须执行程序；其它因素遮盖算法本质）\n3.事前统计法：依据算法选用何种策略及问题的规模n，是常用的方法。\n4.（事前统计法）和算法执行时间相关的因素：\n（1）算法选用的策略（主要）\n（2）问题的规模（主要）\n（3）编写的语言\n（4）编译程序产生的机器代码的质量\n（5）计算机执行指令的速度\n5.一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，算法的时间量度记作 T(n)&#x3D;O(f(n))，称作算法的渐近时间复杂度,简称时间复杂度。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同。\n（1）加法规则：T(n)&#x3D;T1(n)+T2(n)&#x3D;O(f(n))+O(g(n))&#x3D;O(max(f(n),g(n)))\n（2）乘法规则：T(n)&#x3D;T1(n)*T2(n)&#x3D;O(f(n)) * O(g(n))&#x3D;O(f(n)*g(n))\n6.时间复杂度除常量阶[O(1)], 线性阶[O(n)], 平方阶[O(n^2)]外，还有对数阶[O(logn)]，排列阶[O(n!)]，指数阶[O(2^n)]等，是相对于问题规模n的增长率的表示方法。\n（1）多项式：O(1)&lt;O(log2(n))&lt;O(n)&lt;O(nlog2(n))&lt;O(n^2)&lt;O(n^3)\n（2）指数时间：O(2^n)&lt;O(n!)&lt;O(n^n)\ni=1;while(i&lt;=n)i=i*2;//令执行x次，2^x=n，x=log2(n)，即时间复杂度为O(log2(n))//递归算法，时间复杂度是O(n) int rec(int n)   &#123;      if (n==1) return 1;                       else return (n*rec(n-1));   &#125;\n\n7.如果算法的执行有多种可能的操作顺序，则求其平均时间复杂度。\n如果无法求取平均时间复杂度，则采用最坏情况下的时间复杂度。\n时间复杂度是衡量算法好坏的一个最重要的标准。\nvoid bubble-sort(int a[]，int n)&#123;    for(i=n-1,change=TURE;i&gt;1 &amp;&amp; change;--i)      &#123;           change=false;           for(j=0;j&lt;i;++j)               if (a[j]&gt;a[j+1]) &#123;                     a[j] ←→a[j+1];                    change=TURE&#125;       &#125;     &#125;//最好情况：0次（全部升序排列）//最坏情况：n*(n-1)/2次（全部降序排列）//5 4 3 2 1（5要比较（n-1）次，1被移到最前面了，比较0次，共有n个元素，使用求和公式0+1+...+(n-1)=n*(n-1+0)/2//平均时间复杂度：O(n^2)\n\n十三、空间复杂度1.空间复杂度指算法执行时，所需要存储空间的量度，它也是问题规模的函数，即：S(n) &#x3D; O(f(n))。\n2.算法的存储量包括：\n（1）程序本身所占空间（与算法无关）\n（2）输入数据所占空间（与算法无关）\n（3）辅助变量所占空间（若所需额外空间相对于输入数据量来说是常数，则称此算法为原地工作。否则,按最坏情况分析）\n注意：只有辅助变量所占空间与算法有关\n第二章：线性表一、线性数据结构的特点在数据元素的非空有限集中 ：\n1.存在惟一的一个被称作“第一个”的数据元素。\n2.存在惟一的一个被称作“最后一个”的数据元素。\n3.除第一个元素外，每个数据元素均只有一个前驱 。\n4.除最后一个元素外，每个数据元素均只有一个后继 。\n二、线性表1.线性表是最简单的一类线性数据结构。\n2.线性表是由n个数据元素组成的有限序列，相邻数据元素之间存在着序偶关系，可以写为：(a1, a2,…ai-1, ai, ai+1,…an-1, an)其中,ai是表中元素,i表示元素ai的位置,n是表的长度。\n3.线性表中的元素具有相同的特性，属于同一数据对象，如：1.26个字母的字母表: (A,B,C,D,…,Z)2.近期每天的平均温度:(30℃, 28℃, 29℃,…)。\n三、顺序表1.顺序表是线性表的顺序表示。（线性表的顺序存储称为顺序表）\n2.用一组地址连续的存储单元依次存储线性表的数据元素。逻辑相邻，物理也相邻。\n3.顺序表数据元素的位置：\nloc(a[i])&#x3D;loc(a[i-1])+length\nloc(a[i])&#x3D;loc(a[1])+(i-1)*length\n其中length表示元素占用的内存单元数。\n4.顺序表的插入操作：\n（1）顺序表的插入操作是指在顺序表的第i-1个数据元素和第i个数据元素之间插入一个新的数据元素，即将长度为n的顺序表：(a1,…ai-1, ai, …, an) 变成长度为n+1的顺序表：(a1,…ai-1, e, ai, …, an)\n（2）在顺序表中的第i个位置插入一个元素，需要向后移动的元素个数为：n-i+1\n（3）平均移动元素数为（假设在第i个元素之间插入的概率为pi）：Eis &#x3D; ∑ pi x (n-i+1) 其中i从1到n+1。\n（4）当插入位置等概率时pi&#x3D;1&#x2F;(n+1)，因为可以插在最后面。因此：\nEis &#x3D; ∑ [1&#x2F;(n+1)] x (n-i+1) &#x3D; n&#x2F;2其中i从1到n+1。\n\n注意：顺序表插入平均移动元素数为n&#x2F;2\n（5） 顺序表插入操作的时间复杂度为O(n)。\n5.顺序表的删除操作：\n（1）顺序表的删除操作是指将顺序表的第i个数据元素删除，即将长度为n的顺序表：(a1,…ai-1, ai, ai+1,…, an) 变成长度为n-1的顺序表：(a1,…ai-1, ai+1, …, an)\n（2）在顺序表中删除一个元素，需要向前移动元素个数为：n-i（不用加一）\n（3）平均移动元素数为：Edl &#x3D; ∑ qi x (n-i) 其中i从1到n。\n\n（4）当删除位置等概率时qi&#x3D;1&#x2F;n，因为只有n个元素可以删除。因此：\nEdl &#x3D; ∑ [1&#x2F;n] x (n-i) &#x3D; (n-1)&#x2F;2其中i从1到n。\n\n注意：顺序表删除平均移动元素数为(n-1)&#x2F;2\n（5）顺序表删除操作的时间复杂度为O(n)。\n6.顺序表的其它操作:\n（1）查找第i个位置的元素值。\n（2）查找元素所在位置。\n（3）得到表长。\n（4）置空表。\n（5）销毁表(析构函数~SqList())。\n7.顺序表的优缺点：\n（1）优点：元素可以随机存取；元素位置可用一个简单、直观的公式表示并求取。通过首地址和元素序号,O(1)内找到指定元素。存储密度高，每个结点只存储数据元素。\n（2）缺点：在作插入或删除操作时，需要移动大量元素 。\n注意：一个顺序表的第一个元素存储地址为2001,每个元素占用4个地址单元，第6个元素的存储地址为：2001+（6-1）5&#x3D;2021；对于顺序存储的线性表，删除、增加结点的时间复杂度为O(n)\n四、链表1.链表是线性表的链式存储表示。\n2.链表中逻辑关系相邻的元素不一定在存储位置上相连，用指针表示元素之间的邻接关系。\n3.线性表的链式存储表示主要有三种形式：线性链表、循环链表、双向链表。\n4.线性链表：\n（1）线性链表的元素称为结点。\n（2）结点除包含数据元素信息的数据域外，还包含指示直接后继的指针域。\n（3）每个结点，在需要时动态生成，在删除时释放。\n（4）N个结点(ai(1≤i ≤ n)的存储映像)链结成一个链表,即为线性表的链式存储结构。\n（5）链表的每个结点中只包含一个指针域,故又称线性链表或单链表。\n（6）线性链表可由头指针惟一确定。\n（7）以线性表中的第一个数据元素a1的存储地址作为线性表的地址，称作线性表的头指针。\n（8）有时为了操作方变，在第一个节点之前虚加一个”头结点“，以指向头结点的指针为链表的头指针。\nLNode *head;//头指针head = new LNode;//生成头结点  head-&gt;[ |^]//head-&gt;[ |-]-&gt;[a|-]-&gt;[b|-]-&gt;....\n\n注意：头结点和头指针区分：不管带不带头结点，头指针始终指向链表的第一个结点，而头结点是带头结点的链表中第一个结点，结点内通常不存储信息。增加头结点的目的是为了方便运算。\n头结点的优点:(1)由于第一个数据结点的位置被存放在头结点的指针域中，所以在链表的第一个位置上的操作和在表的其他位置上的操作一致，无需进行特殊处理；(2)无论链表是否为空，其头指针都指是向头结点的非空指针（空表中头结点的指针域为空）\n单链表的头指针为head，不带头结点的判空条件：head&#x3D;&#x3D;NULL\n带头结点的判空条件：head-&gt;next&#x3D;&#x3D;NULL (L -&gt;[ |^] (head-&gt;next&#x3D;&#x3D;NULL))\n（9）找第i个元素getelement：在线性链表中找到第i个元素，并返回指针；从头结点开始，顺链一步步查找；查找第i个数据元素的基本操作为：移动指针，比较k和i（k为当前指针所指向的结点序号）。时间复杂度为O(n)。\n（10）线性链表的插入：在线性链表的第i-1个元素与第i和元素之间插入一个新元素。s-&gt;next&#x3D;p-&gt;next;p-&gt;next&#x3D;s。（其中s为新元素）时间复杂度主要取决于getelement的时间复杂度，getelement的时间复杂度为O(n)，因此线性链表插入的时间复杂度为O(n)。\n注意：在单链表中第i个结点之前进行插入的基本操作：找到线性表中的第i-1个结点p，创建新结点s，然后修改第i-1个结点和s结点的后继指针。s-&gt;next&#x3D;p-&gt;next;p-&gt;next&#x3D;s\n（11）线性链表的删除：将线性链表的第i个元素删除。\n找到线性表中第i-1个结点p，修改其指向后继的指针。\nq&#x3D;p-&gt;next;p-&gt;next&#x3D;q-&gt;next;(e&#x3D;q-&gt;data)delete q;（删除p-&gt;next这个结点）时间复杂度主要取决于getelement的时间复杂度，getelement的时间复杂度为O(n)，因此线性链表删除的时间复杂度为O(n)。\n（12）线性链表的创建：链表是一个动态的结构，不需要预分配空间，生成链表的过程是一个结点”逐个插入“的过程。依次调用insert即可，时间复杂度O(n^2)。n个结点，每个结点每次插入Insert函数，头指针指向最后，表尾插入故为n*n。\n（13）线性链表的创建-头插法：即表头不断插入新结点。逆序输入数据值。头插法时间复杂度O(n)。\n（14）线性链表的创建-尾插法：即表尾不断插入新结点。按链表序输入数据值。为记录尾结点，增加一个尾指针tail，指向最后一个结点。尾插法时间复杂度O(n)\n（15）单链表的合并：将两个有序链表合并成一个有序链表。\n（16）拷贝构造函数被调用的三种情况：一个对象以值传递的方式传入函数体；一个对象以值传递的方式从函数返回；一个对象需要通过另一个对象进行初始化。\n（17）赋值函数被调用的时机：当一个类的对象向该类的另一个对象赋值时，就会用到该类的赋值函数。\n（18）拷贝构造函数与赋值函数比较：\n调用拷贝构造函数来初始化一个对象：\nA a;A b(a); A b&#x3D;a;\n都是拷贝构造函数来创建对象b（b还不存在）\n调用赋值函数对对象复制：\nA a;A b;b&#x3D;a;\n强调：这里a,b对象是已经存在的，是用a 对象来赋值给b的！！\n5.静态链表：线性链表也可以采用静态数组实现。\n与顺序表有两点不同：\n（1）每个元素包括数据域和指针域。\n（2）元素的逻辑关系由指针确定。\n与单链表的区别：\n（1）静态链表暂时不用结点，链成一个备用链表。\n（2）插入时，从备用链表中申请结点。\n（3）删除结点时，将结点放入备用链表。\n6.循环链表：\n（1）循环链表是一种特别的线性链表。\n（2）循环链表中最后一个结点的指针域指向头结点，整个链表形成一个环。\n（3）在只有尾指针的单循环链表中：\n表头插入结点：在只有尾指针的情况下，要在表头插入结点，首先需要找到尾结点，然后将新结点插入到尾结点之后。因此，表头插入结点的时间复杂度为 O(1)（常数时间），因为无论链表有多长，插入操作所需的时间都是相对固定的。\n虽然在只有尾指针的情况下，插入结点时需要找到尾结点，但这并不会导致时间复杂度变为 O(n)。在单循环链表中，尾结点指向头结点，因此我们可以直接通过尾指针找到头结点，然后在头结点之后插入新结点。\n因此，表头插入结点的时间复杂度仍然是 O(1)，因为无论链表有多长，插入操作所需的时间都是相对固定的。\n表尾插入结点：由于只有尾指针，直接在尾结点之后插入新结点即可。因此，表尾插入结点的时间复杂度同样为 O(1)。\n（4）查找、插入和删除：与线性链表基本一致，差别仅在于算法中的循环条件不是p-&gt;next或p是否为空（^)，而是它们是否等于头指针(L)。\n注意循环链表带头结点判空：head-&gt;next&#x3D;&#x3D;head\n7.双向链表\n（1）双向链表是一种特殊的线性链表：每个结点有两个指针，一个指针指向直接后继(next)，另一个指针指向直接前驱(prior)。\n（2）对于任何一个中间节点有：p&#x3D;p-&gt;next-&gt;prior&#x2F;p&#x3D;p-&gt;prior-&gt;next。\n（3）插入操作需要改变两个方向的指针：s-&gt;next&#x3D;p;s-&gt;prior&#x3D;p-&gt;prior;p-&gt;prior-&gt;next&#x3D;s;p-&gt;prior&#x3D;s;\n（4）删除操作需要改变两个方向的指针：p-&gt;prior-&gt;next&#x3D;p-&gt;next;p-&gt;next-&gt;prior&#x3D;p-&gt;prior;\n8.双向循环链表\n（1）存在两个环：一个是直接后继环，另一个是直接前驱环。\n五、一元多项式1.pn (x) &#x3D; p0 + p1x + p2 x^ 2 + … + pn x^ n\n在计算机中，可以用一个线性表来表示：P &#x3D; (p0 , p1 , …，pn)\n2.pn(x)&#x3D;p1x^e1+p2x^e2+…+pmx^em\n线性表示((p1,e1),(p2,e2),…,(pm,em))\n六、顺序表与链表的比较1.基于空间的比较\n（1）存储分配的方式：顺序表的存储空间是静态分配的，链表的存储空间是动态分配的。\n（2）存储密度&#x3D;结点数据本身所占的存储量&#x2F;结点结构所占的存储总量\n顺序表的存储密度&#x3D;1，链表的存储密度&lt;1\n2.基于时间的比较\n（1）存取方式：顺序表可以随机存取也可以顺序存取，链表必须顺序存取。\n（2）插入、删除时移动元素个数：顺序表平均需要移动近一半元素，链表不需要移动元素只需要修改指针。\n3.基于应用的比较 （1）线性表主要是存储大量数据，并用于查找时，采用顺序表比较好。\n（2）若线性表存储的数据元素要经常插入和删除，采用链表比较好。\n注意：某线性表中最常用的操作是在最后一个元素之后插入一个元素和删除第一个元素，则采用带尾指针的单循环链表最节省时间。\n仅有尾指针的单循环链表，可以非常方便地找到尾结点，尾结点后面的第一个结点往往是头结点，头结点的下一个结点就是线性表的第一个结点。对最后一个元素和第一个元素操作对带尾指针的单循环链表是非常方便的\n循环链表是线性表，它是线性表的链表存储结构之一。\n在一个以h为头的单循环链表中，p指针指向链尾的条件是p-&gt;next&#x3D;h。\n第三章：栈和队列一、栈1.栈是限定仅在表尾(top)进行插入或删除操作的线性表。\n2.允许插入和删除的一端称为栈顶(top，表尾)，另一端称为栈底(bottom，表头）\n3.特点：后进先出 (LIFO)\n4.栈的存储结构：顺序栈和链式栈。\n5.顺序栈：\n（1）顺序栈是栈的顺序存储结构。\n（2）利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素。\n（3）指针top指向栈顶元素在顺序栈中的下一个位置，base为栈底指针，指向栈底的位置。\n（4）top&#x3D;0 或top&#x3D;base 表示空栈。\n（5）base&#x3D;NULL表示栈不存在。\n（6）当插入新的栈顶元素时,指针top+1。\n（7）删除栈顶元素时，指针top-1。\n（8）当top&gt;stacksize时，栈满，溢出。\n注意：向顺序表中压入新元素，应当先移动栈顶指针，再入栈，出栈时先取栈顶元素再移动指针\n6.链栈：\n（1）栈的链式存储结构称为链栈，它是运算受限的单链表，可插入和删除操作仅限制在表头位置上进行。\n（2）由于只能在链表头部进行操作，故链表没有必要像单链表那样附加头结点。栈顶指针就是链表的头指针。\n（3）链栈中为何不设头指针？因为链栈只在链表头插入和删除结点,不可能在链表中间插入或删除结点,算法实现很简单,所以一般不设置头结点。\n（4）链栈对比顺序栈主要优点在于，通常不会栈满的情况\n7.C++中栈容器：\n（1）stack 模板类的定义在头文件中。\n（2）定义stack 对象的示例代码如下：stack s1;stack s2;\n（3）stack 的基本操作有：\n入栈，如例：s.push(x);\n出栈，如例：s.pop();注意，出栈操作只是删除栈顶元素，并不返回该元素。\n访问栈顶，如例：s.top()\n判断栈空，如例：s.empty()，当栈空时，返回true。\n访问栈中的元素个数，如例：s.size()。\n8.栈的应用举例\n（1）数值转换：\n将十进制转换为其他进制（d）：N&#x3D;(N*d)*d+N mod d\n（计算顺序与输出顺序相反）\n（2）行编辑程序\n（3）迷宫求解（用一个栈来记录已走过的路径）\n设定当前位置为入口位置　\ndo {若当前位置可通，则 {\n　将该位置插入栈顶(Push)；若该位置是出口，则结束\n　否则切换当前位置的东邻方块为当前位置；\n&#125; 否则 &#123;      　\n\n若栈不空则｛\n    　  如果栈顶位置的四周均不可通,则删除栈顶位置(Pop)      　并重新测试新的栈顶位置\n\n　　如果找到栈顶位置的下一方向未经探索，则将该方向\n　　方块设为当前位置}}}while(栈不空)；找不到路径；\n（4）表达式求值：表达式由操作数、运算符和界限符组成，它们皆称为单词。\n操作数：常数或变量。运算符：+, -, *, &#x2F; 等。界限符：(, ), #(表达式开始及结束符)。\n计算步骤：假设操作数栈NS和运算符栈OS，\n–（1）依次读取表达式，若为操作数，则直接进栈；\n若为运算符(记为op2)，转（2）\n–（2）将op2与运算符栈顶元素(记为op1)按P53的表3.13 比较优先权，并按如下规则进行操作：\n若prec(op1) &lt; prec(op2), 则op2入OS;\n若prec(op1) &#x3D; prec(op2), 则op1出栈，回到（1）；\n若prec(op1) &gt; prec(op2), 则NS出2个操作数 num2,num1,op1出栈，\n计算num2 op1 num2，结果入NS；回到(2) 。\n–（3）重复（1）、（2）直至整个表达式求值完毕。\n\n例如: Exp &#x3D; a x b + (c - d &#x2F; e) x f\n前缀式: + x a b x - c &#x2F; d e f\n中缀式: a x b + c - d &#x2F; e x f\n后缀式: a b x c d e &#x2F; - f x +\n前缀式的运算规则为:连续出现的两个操作数和在它们之前且紧靠它们的运算符构成一个最小表达式;\n中缀式丢失了括弧信息,致使运算的次序不确定;（编译系统中：中缀转后缀进行计算）\n后缀式的运算规则为: 运算符在式中出现的顺序恰为表达式的运算顺序; 每个运算符和在它之前出现 且 紧靠它的两个操作数构成一个最小表达式。\n结论：操作数之间的相对次序不变；运算符的相对次序不同。\n得到后缀表达式后，我们在计算表达式时，可以设置一个栈，从左到右扫描后缀表达式，每读到一个操作数就将其压入栈中；每到一个运算符时，则从栈顶取出两个操作数进行运算，并将结果压入栈中，一直到后缀表达式读完。最后栈顶就是计算结果。\n\n9.栈与递归的实现\n（1）当在一个函数的运行期间调用另一个函数时，在运行该被调用函数之前，需先完成三项任务：将所有的实在参数、返回地址等信息传递给被调用函数保存；为被调用函数的局部变量分配存储区；将控制转移到被调用函数的入口。\n（2）从被调用函数返回调用函数之前，应该完成下列三项任务：保存被调函数的计算结果；释放被调函数的数据区；依照被调函数保存的返回地址将控制转移到调用函数\n（3）多个函数嵌套调用：后调用先返回！此时的内存管理实行“栈式管理”。\n（4）递归函数执行的过程可视为同一函数进行嵌套调用。\n注意：n个不同元素进栈，出栈元素不同排列个数为：(1&#x2F;(n+1))C(2n,n)其中C为组合数，从2n个选n个\n二、队列1.队列是只允许在表的一端进行插入，而在另一端删除元素的线性表。\n2.在队列中，允许插入的一端叫队尾（rear），允许删除的一端称为对头(front)。特点：先进先出 (FIFO)\n3.顺序队列：采用一组地址连续的存储单元依次存储从队列头到队列尾的元素。顺序队列有两个指针：队头指针front和队尾指针rear\n4.顺序队列的进队和出队原则：进队时，新元素按rear指针位置插入，然后队尾指针增一，即 rear &#x3D; rear + 1；出队时，将队头指针位置的元素取出，然后队头指针增一，即 front &#x3D; front + 1；队头指针始终指向队列头元素；队尾指针始终指向队列尾元素的下一个位置。\n5.顺序队列存在的问题：\n（1）当队尾指针指向队列存储结构中的最后单元时，如果再继续插入新的元素，则会产生溢出当队列发生溢出时。\n（2）不能用rear&#x3D;&#x3D;maxsize判断队满。\n（3）队列存储结构中可能还存在一些空白位置（已被取走数据的元素），假上溢。(前面还有空位)\n\n（3）解决办法之一：将队列存储结构首尾相接，形成循环(环形)队列。\n6.循环队列：\n（1）循环队列采用一组地址连续的存储单元。\n（2）将整个队列的存储单元首尾相连。\n（3）判断对空和队满：\n对循环队列而言，无法通过front&#x3D;&#x3D;rear来判断队列“空”还是“满”。 解决此问题的方法至少有三种：\n其一是另设一个布尔变量以匹别队列的空和满；\n其二是少用一个元素的空间，约定入队前，测试尾指针在循环意义下加1后是否等于头指针，若相等则认为队满（注意：rear所指的单元始终为空！！）；\nfront &#x3D; rear，（都指向空）循环队列空；(rear+1) % MAXQSIZE &#x3D; front，循环队列满。\n\n其三是使用一个计数器记录队列中元素的总数（实际上是队列长度）。\n（4）循环队列：\n初始时：front&#x3D;rear&#x3D;0\n出队，队首指针加一：front&#x3D;(front+1)%maxsize\n进队，队尾指针加一：rear&#x3D;(rear+1)%maxsize\n队列长度：(rear-front+maxsize)%maxsize\n若牺牲一个单元来区分队列空和队列满，队列少用一个队列单元：\n队满：(rear+1)%maxsize&#x3D;&#x3D;front\n队空：front&#x3D;&#x3D;rear\n题目：假设Q[ 11] (下标为从0到10)是一个循环队列,初始状态为front&#x3D;rear&#x3D;0;画出分别做完下列操作后队列的头尾指针的装填变化情况,若不能入队,请指出其元素,说明理由..(采用少用一个元素空间的方式)\nd,e,b,g,h入队\nd,e出队\ni,j,k,l,m入队\nb 出队\nn,o,p,q,r 入队\n\n(上述答案采用front指向空，应改为rear时刻指向空！)\n7.链队列\n（1）链队列采用链表存储单元链队列中，有两个分别指示队头和队尾的指针。\n（2）链式队列在进队时无队满问题，但有队空问题。\n（3）链队列是链表操作的子集。\n设长度为n的链队列用单循环链表表示，若只设头指针，则入度时间复杂度为O(n)，出队时间复杂度为O(1);若只设尾指针，则入队时间复杂度和出队时间复杂度都为O(1)，出队队头之间是tail-&gt;next即可。\n删除一个结点，即出队时的指针操作为：front&#x3D;front-&gt;next\n8.C++中的队列容器\n（1）queue 模板类的定义在头文件中。\n（2）定义queue 对象的示例代码如下：queue q1;queue q2;\n（3）queue 的基本操作有：\n入队，如例：q.push(x); 将x 接到队列的末端。\n出队，如例：q.pop(); 弹出队列的第一个元素，注意，并不会返回被弹出元素的值。\n访问队首元素，如例：q.front()，即最早被压入队列的元素。\n访问队尾元素，如例：q.back()，即最后被压入队列的元素。\n判断队列空，如例：q.empty()，当队列空时，返回true。\n访问队列中的元素个数，如例：q.size()\n9.C++中的map容器\n（1）map是c++的一个标准容器，提供了key和value的映射。map 模板类定义在头文件中。\n（2）map对象定义：map&lt;string , int &gt; mapstring;\n（3）map添加数据：map&lt;int ,string&gt; maplive; -1.maplive.insert(pair&lt;int,string&gt;(102,“aclive”));\n-2.maplive.insert(map&lt;int,string&gt;::value_type(321,“hai”));\n-3.maplive[112]&#x3D;”April”;&#x2F;&#x2F;map中最简单最常用的插入添加！\n（4）map中查找数据：\n-1.使用map的下标运算符重载\nmap&lt; std::string,int&gt; mapTest;\ncout&lt;&lt;mapTest[“index”]&lt;&lt;endl;\n-2.使用map的find接口。\nmap&lt; std::string,int&gt; mapTest;\nmap&lt; std::string,int&gt;::iterator it &#x3D; mapTest.find(“index”);\nif(it!&#x3D;mapTest.end()) cout&lt;&lt; it-&gt;second&lt;&lt;endl;\n大题重点：表达式求值\n\n(同种符号比较，先出现的优先级高)\n第四章：串一、字符串1.字符串是n个字符的有限序列。\n2.字符串术语：\n（1）空串：不含任何字符的串，串长度&#x3D;0。\n（2）空格串：仅由一个或多个空格组成的串。\n（3）子串：由串中任意个连续的字符组成的子序列。\n（4）主串：包含子串的串。\n（5）位置：字符在主串中的序号。子串在主串中的位置以子串第一个字符在主串中的位置来表示。\n（6）串相等的条件：当两个串的长度相等且各个对应位置的字符都相等时才相等。\n（7）模式匹配：确定子串在主串中首次出现的位置的运算\n3.字符串与线性表的关系\n—串的逻辑结构和线性表极为相似：\n（1）它们都是线性结构。\n（2）串中的每个字符都仅有一个前驱和一个后继。\n—串与线性表又有区别，主要表现为：\n（1）串的数据对象约定是字符集。\n（2）在线性表的基本操作中，以“单个元素”作为操作对象。\n（3）在串的基本操作中，通常以“串的整体”作为操作对象，如：在串中查找某个子串、在串的某个位置上插入一个子串等。\n4.字符串的操作\n13种操作中的最小操作子集(五种)：串赋值StrAssign;串比较StrCompare;求串长StrLength;串联接Concat;求子串SubString。\n最小操作集：\n这些操作不可能利用其他串操作来实现，反之，其他串操作（除串清除ClearString和串销毁DestroyString外）可在这个最小操作子集上实现。\n5.字符串的操作(index)\n（1）串匹配(查找)的定义: INDEX (S, T, pos)\n（2）初始条件：串S和T存在，T是非空串，1≤pos≤StrLength(S)。\n（3）操作结果：若主串S中存在和串T值相同的子串返回它在主串S中第pos个字符之后第一次出现的位置；否则函数值为0。\n二、串的表示和实现1.定长顺序存储表示（静态存储分配）\n（1）用一组地址连续的存储单元存储字符序列。\n（2）如C语言中的字符串定义(以“\\0”为串结束标志) char Str[MAXSTRLEN+1];\n（3）定义了长度为MAXSTRLEN字符存储空间字符串长度可以是小于MAXSTRLEN的任何值（最长串长度有限制，多余部分将被截断）\n（4）隐含：一般可使用一个不会出现在串中的特殊字符在串值的尾部来表示串的结束。\n优点:便于系统自动实现。\n缺点:不利于某些操作(如合并).\n例如，C语言中以字符‵\\0′表示串值的终结，这就是为什么在上述定义中，串空间最大值maxstrlen为256，但最多只能存放255个字符的原因。\n（5）显式：若不设终结符，可用一个整数来表示串的长度，那么该长度减1的位置就是串值的最后一个字符的位置（下标）。\n优点:便于在算法中用长度参数控制循环过程。\n2.堆分配存储表示\n（1）在程序执行过程中，动态分配（malloc）一组地址连续的存储单元存储字符序列。\n（2）在C++语言中，由new和delete动态分配与回收的存储空间称为堆。\n（3）堆分配存储结构的串既有顺序存储结构的特点，处理方便,操作中对串长又没有限制,更显灵活。\n3.链存储表示\n（1）采用链表方式存储串值。\n（2）每个结点中，可以存放一个字符，也可以存放多个字符。\n（3）存储密度&#x3D;数据元素所占存储位&#x2F;实际分配的存储位。\n三、串的匹配算法1.求子串位置函数Index()\n（1）子串的定位操作通常称做串的模式匹配。\n（2）算法（穷举法，朴素算法，BF(Brute-Force)算法）：\n从主串的指定位置开始，将主串与模式（要查找的子串）的第一个字符比较：\n若相等，则继续逐个比较后续字符；若不等，从主串的下一个字符起再重新和模式的字符比较。\n（3）在最好的情况下，除比较成功的位置外，其余位置仅需比较一次（模式第一个字符），其时间复杂度为：O(n+m)(n，m分别为主串和模式的长度)\n（4）但在最坏的情况下，如模式为‘00000001’，主串为‘0000000000000000000000000000000001’,则每次模式的前7个0都要与主串逐一比较，因此，其时间复杂度为：O(n*m)\n2.KMP算法（时间复杂度O(n+m))\n（1）当一趟匹配过程中出现字符比较不等(失配)时\n–1.不需回溯i指针\n–2.利用已经得到的“部分匹配”的结果\n–3.将模式向右“滑动”尽可能远的一段距离(next[j])后，继续进行比较\n（2）在模式串中第j个字符“失配”时,模式串第k个字符再同主串中对应的失配位置(i)的字符继续进行比较 ：‘p1p2…pk-1’ &#x3D; ‘pj-k+1pj-k+2…pj-1’\nk值可以在做串的匹配之前，求出一般用next函数求取k值。\n（3）next函数定义为（下标从1开始）：\n–当j&#x3D;1时next[j] &#x3D; 0；\n–next[j] &#x3D; max{k | 0&lt;k&lt;j且‘p1…pk-1’&#x3D;‘pj-k+1…pj-1’}；(直接等于0~j-1的字符串的最长公共前后缀的长度+1)\n–当其它情况时next[j]&#x3D;1。\n\n（4）next函数定义为（下标从0开始）：\n–当j&#x3D;0时next[j] &#x3D; -1；\n–next[j] &#x3D; max{k | 0&lt;k&lt;j且‘p0…pk-1’&#x3D;‘pj-k…pj-1’}；(直接等于0~j-1的字符串的最长公共前后缀的长度)\n–当其它情况时next[j]&#x3D;0。\n\n即寻找当前j前可相互重叠（不完全重叠）的最长真子串的长度。从第一个字符开始的子串的下一个元素的下标，指示出，如果j所指示的模式串的字符与目标串中的当前字符不相等时，j应回退的位置。\n\n（5）求next[j]值的算法：\n–1. j的初值为0, next[0]&#x3D;-1, k&#x3D;-1\n–2. While(j&lt;模式串长度-1) {\n–(1).若k&#x3D;-1或者Tj&#x3D;Tk,则j++,k++,next[j]&#x3D;k\n–(2).否则,k&#x3D;next[k]\n}\n这实际上也是一个匹配的过程，不同在于：主串和模式串是同一个串。\n（6）KMP算法：\n–1.令i的初值为pos,j的初值为0\n–2. While((i&lt;主串长度)且(j&lt;模式串长度)) {\n–(1).若j&#x3D;－1或者si&#x3D;pj,则i++, j++\n–(2).否则,j&#x3D;next[j]\n}&#x2F;&#x2F;j&#x3D;－1表示第一个字符失配\n（7）时间复杂度：\nKMP()函数的时间复杂度为O(n)，为了求模式串的next值,其算法与KMP很相似,其时间复杂度为O(m)，因此,KMP算法的时间复杂度为O(n+m)。\n（8）nextval：\n–1.首先计算next\n–2.比较当前字符t.ch[j]与其next值k所指字符 t.ch[k]\n–（1）不等： nextval[j]&#x3D;next[j]（即维持不变）\n–（2）相等： nextval[j]&#x3D;nextval[k]\n\nvoid getnext(string p)&#123;    int j,k;    j=0,k=-1;    next[0]=-1;//!    while(j&lt;p.size()-1)    &#123;        if(k==-1||T[j]==T[k])            next[++j]=++k;        else            k=next[k];    &#125;&#125;\n\n大题题目重点：字符串匹配\n题目：求串eefegeef的next值。写出计算过程。假设主串为eefeefegeebeefegeeb，写出KMP算法查找串eefegeef的过程。\n\n第五章：数组和广义表一、数组的定义1.数组\n数组是相同类型的数据元素的集合\n数组是一种定长的线性表\n数组一般不作插入和删除操作\n一旦建立了数组，则结构中的数据元素个数和数据元素之间的关系就不再发生变动\n判断：“数组的处理比其它复杂的结构要简单”，对吗？\n答：对的。因为——① 数组中各元素具有统一的类型；② 数组元素的下标一般具有固定的上界和下界，即数组一旦被定义，它的维数和维界就不再改变。③数组的基本操作比较简单，除了结构的初始化和销毁之外，只有存取元素和修改元素值的操作。\n2.一维数组\n一维数组是一种简单的定长线性表\n一维数组中的每个数据元素是一个(数)值\n(原子)如：int A[8]&#x3D;{8,7,5,4,6,1,3,2} b&#x3D;8，有8个数据元素，每个元素都是一个数值\n3.二维数组\n二维数组是这样一个定长线性表，其每个数据元素也是一个定长线性表(一维数组)\n\nAmxn&#x3D; ((a00 a01…a0,n-1), (a10 a11…a1,n-1),…,(am-1,0 …am-1,n-1))\n4.多维数组\n多维数组是这样一个定长线性表，其每个数据元素也是一个定长线性表(降一维)\n如果其数据元素不是一维数组，则其数据元素的每个数据元素也是一个定长线性表\n一直到最后一个定长线性表是一维数组，其每个数据元素为一个(数)值\n二、数组的表示1.数组的顺序表示\n顺序存储：数组由相同类型的数据组成，且一般不作插入和删除操作，一般采用顺序存储结构表示数组\n次序约定：计算机中，存储单元是一维结构，而数组为多维结构，则用一组连续的存储单元存放数组的数据元素时，有一个次序约定问题\n\nAmxn&#x3D; ((a00 a01…a0,n-1), (a10 a11…a1,n-1),…,(am-1,0 …am-1,n-1))\nAmxn&#x3D; ((a00 a10…am-1,0), (a01 a11…am-1,1),…,(a0,n-1 …am-1,n-1))\n（1）行序（m行n列）\nLOC(aij) &#x3D; LOC(a00) + (i x n + j) x L\nLOC(a00)是二维数组的起始存储地址\nL为每个数据元素占用存储单元的长度(数目)\nLoc(aij)&#x3D;Loc(a11)+[(j-1) +(i-1) * n ]*K\n（2）列序（m行n列）\nLOC(aij) &#x3D; LOC(a00) + (i + j x m) x L\nLOC(a00)是二维数组的起始存储地址\nL为每个数据元素占用存储单元的长度(数目)\nLoc(aij)&#x3D;Loc(a11)+[(j-1) * m+(i-1)]*K\n注意：已知二维数组Am,m按行存储的元素地址公式是： Loc(aij)&#x3D; Loc(a11)+[(i-1) * m+(j-1)]K , 请问按列存储的公式相同吗？\n答：尽管是方阵，但公式仍不同。应为： Loc(aij)&#x3D;Loc(a11)+[(j-1) * m+(i-1)]K\n2.多维数组的顺序表示\n（1）以行序为主序存储,多(K)维数组元素存储位置\nLOC(aj1,j2,..,jk) &#x3D; LOC(a00 0) + ((b2xb3x…xbkxj1)+(b3x…xbkxj2)+…+jk) x L\n（2）以列序为主序存储,多(K)维数组元素存储位置\nLOC(aj1,j2,..,jk) &#x3D; LOC(a00 0) + ((b1xb2x…xbk-1xjk)+(b1x…xbk-2xjk-1)+…+j1)xLp\n三、矩阵的压缩存储1.矩阵的压缩存储\n（1）如果矩阵中有许多值相同的元素或者零元素(特殊矩阵、稀疏矩阵)，为了节省存储空间，可以对这类矩阵进行压缩存储\n（2）压缩存储：为多个值相同的元素只分配一个存储空间；对零元素不分配空间\n2.特殊矩阵\n（1）特殊矩阵：矩阵中，值相同的元素或者零元素的分布有一定规律\n（2）对称矩阵：矩阵中，对角线两边对应位置上元素的值相同(aij&#x3D;aji)\n（3）三角矩阵：矩阵中，对角线**上(下)边元素值为常数(或者0)，称下(上)**三角矩阵\n（4）如果只存储对称矩阵对角线上的值和对角线以上部分的值，则与上三角矩阵存储方法相同；如果只存储对称矩阵对角线上的值和对角线以下部分的值，则与下三角矩阵存储方法相同。\n\nLOC(aij) &#x3D; LOC(a00) + ((i+1)*i&#x2F;2+j) *L\n若i&gt;&#x3D;j，数组元素a[i] [j]在数组B中的存放位置为：1+2+..+i+j&#x3D;(i+1)*i&#x2F;2+j\n(i+1)*i&#x2F;2为前i行元素总数，j为第i行第j个元素前元素个数（因为下标都从0开始）\n若 i &lt; j，数组元素 a[i] [j] 在矩阵的上三角部分, 在数组 B 中没有存放，可以找它的对称元素a[j] [i]：&#x3D; j *(j +1) &#x2F; 2 + i (在上则找对称到下)\n\n若i &lt;&#x3D; j，数组元素A[i] [j]在数组B中的存放位置为 n + (n-1) + (n-2) + … + (n-i+1) + j-i&#x3D;(2*n-i-1) * i&#x2F;2+j-i\n其中(2*n-i-1) *i&#x2F;2为前i行元素总数，j-i为第i行第j个元素前元素个数\n若i &gt; j，数组元素A[i] [j]在矩阵的下三角部分，在数组 B 中没有存放。因此，找它的对称元素A[j] [i]。 A[j] [i]在数组 B 的第 (2*n-j-1) * j &#x2F; 2 + i 的位置中找到。\n3.稀疏矩阵\n（1）稀疏矩阵：矩阵中有许多值相同的元素或者零元素，而且分布没有任何规律\n假设在mxn的矩阵中，有t个非零元素，令：\nδ&#x3D; t &#x2F;(m x n)\n如果稀疏因子δ≤0.05，则称该矩阵为稀疏矩阵\n（2）用三元组存储稀疏矩阵中的非零元素\n三元组(i,j,aij)表示矩阵中i行、j列位置的值为aij\n\n（3）转置\n设矩阵列数为m，对矩阵三元组表扫描m次\n第k次扫描，找寻所有列号为k的项\n将其行号变列号、列号变行号，顺次存于转置矩阵三元组表中\n\n四、广义表1.广义表的定义\n（1）广义表：由n(≥0)个表元素组成的有限序列：\nLS &#x3D; (a0, a1, a2, …, an-1)\n（2）LS是广义表的名称\n（3）ai是广义表的元素，既可以是表(称为子表)，也可以是数据元素(称为原子)\n（4）n为广义表的长度(n&#x3D;0的广义表为空表)\n2.广义表的举例\nA&#x3D;( ); &#x2F;&#x2F;表A是一个空表\nB&#x3D;(e); &#x2F;&#x2F;表B有一个原子\nC&#x3D;(a,(b,c,d)); &#x2F;&#x2F;两个元素，分别为原子a和子表(b,c,d)\nD&#x3D;(A,B,C); &#x2F;&#x2F;有三个元素均为列表\nE&#x3D;(a,E); &#x2F;&#x2F;递归的列表\n其中，“表”以及“列表”，均指广义表\n3.广义表的存储\n广义表一般采用链式存储结构\n表结点[Tag&#x3D;1|hp|tp]；原子结点[Tag&#x3D;0|atom]；hp表示表头，tp表示表尾\n\n4.广义表的表头\n表头(head)：广义表的第一个元素\n表头既可以是原子，也可以是列表(广义表)\nGetHead(B) &#x3D; e；GetHead(D) &#x3D; A；GetHead((B,C)) &#x3D; B\n5.广义表的表尾\n表尾(tail)：广义表中，除表头外的部分\n注意：表尾一定是列表，要加括号！\nGetTail(B) &#x3D; ()；GetTail(D) &#x3D; (B,C)；GetTail((B,C)) &#x3D; (C)\n\nGetTail【(b, k, p, h)】＝ （k,p,h） ;\nGetHead【( (a,b), (c,d) )】＝ （a,b） ;\nGetTail【( (a,b), (c,d) )】＝（(c,d)） ;\nGetTail【 GetHead【((a,b),(c,d))】】＝（b）;\nGetTail【（e）】＝（）;\nGetHead 【 ( ( ) )】＝（）；\nGetTail【 ( ( ) ) 】＝ （）；\n\n第六章：树与二叉树一、树的概念与基本术语1.树的定义(Tree)\n（1）树是有n(n≥0)个结点的有限集合。\n（2）如果 n&#x3D;0，称为空树；\n（3）如果 n&gt;0,称为非空树,对于非空树,有且仅有一个特定的称为根(Root)的节点(无直接前驱)\n（4）如果 n&gt;1，则除根以外的其它结点划分为 m (m&gt;0)个互不相交的有限集 T1, T2 ,…, Tm，其中每个集合本身又是一棵树，并且称为根的子树(SubTree)。(此为递归定义)\n（5）每个结点都有唯一的直接前驱，但可能有多个后继。\n2.树的基本术语\n（1）结点：包含一个数据元素及若干指向其子树的分支；（包括分支！）\n（2）结点的度：结点拥有的子树数；结点的深度是从根结点开始自顶向下逐层累加；结点的高度是从叶节点开始自底向上逐层累加。\n（3）叶结点：度为0的结点[没有子树的结点] (终端结点 )\n（4）分支结点：度不为0的结点[包括根结点]，也称为非终端结点。除根外称为内部结点。\n注意：除根之外都是内部结点！\n（5）孩子：结点的子树的根[直接后继，可能有多个]\n（6）双亲：孩子的直接前驱[最多只能有一个]\n（7）兄弟：同一双亲的孩子\n（8）子孙：以某结点为根的树中的所有结点\n（9）祖先：从根到该结点所经分支上的所有结点\n（10）层次：根结点为第一层，其孩子为第二层，依此类推\n（11）深度：树中结点的最大层次（从根算第一层），也为树的高度。\n（12）有序树：子树之间存在确定的次序关系。\n（13）无序树：子树之间不存在确定的次序关系。\n（14）森林：互不相交的树的集合。对树中每个结点而言，其子树的集合即为森林。任何一棵非空树是一个二元组 Tree &#x3D; （root，F）其中：root 被称为根结点 ，F 被称为子树森林。\n3.树型结构与线性结构的区别在于：一个元素可以有多个后继。\n4.树的相关性质：\n（1）树中的结点数等于所有结点的度数加一\n（2）度为m的树中第i层上至多有m^(i-1)个结点\n（3）高度为h的m叉树至多有(m^h-1)&#x2F;(m-1)个结点\n（4）具有n个结点的m叉树的最小高度为logm(n(m-1)+1)\n二、二叉树1.二叉树是一种特殊的树，每个结点最多有2棵子树，子树有左右之分。\n2.在二叉树的第i层上最多有**2^(i-1)**个结点。\n3.深度为k的二叉树最多有2^k-1个结点。\n4.如果二叉树终端结点数为n0(也为叶子结点数),度为2的结点数为n2,则n0&#x3D;n2+1\n三、满二叉树1.一个深度为k且有2^k-1个结点的二叉树。\n2.每层上的结点数都是最大数。\n3.可以自上而下、自左至右连续编号。\n四、完全二叉树1.当且仅当每一个结点都与深度相同的满二叉树中编号从1到n的结点一一对应的二叉树。\n2.叶子结点只在最大两层上出现。\n3.左子树深度与右子树深度相等或大１。\n4.具有n个结点的完全二叉树,其深度为floor(log2(n)) +1\n5.在完全二叉树中，结点i的双亲为 i&#x2F;2;\n结点i的左孩子LCHILD(i)&#x3D;2i;\n结点i的右孩子RCHILD(i)&#x3D;2i+1.\n五、二叉树的顺序存储结构1.用一组连续的存储单元依次自上而下,自左至右存储结点。\n\n六、二叉树的链式存储结构1.二叉链表：二叉链表结点由一个数据域和两个指针域组成，采用数据域加上左、右孩子指针。\n\n2.三叉链表：采用数据域加上左、右孩子指针及双亲指针。\n\n七、遍历二叉树1.遍历二叉树：树的遍历就是按某种次序访问树中的结点，要求每个结点访问一次且仅访问一次（非线性结构线性化）。\n2.一个二叉树由根节点与左子树和右子树组成，设访问根结点用D表示，遍历左、右子树用L、R表示，如果规定先左子树后右子树，则共有三种组合\n（1）DLR [先序遍历]\n（2）LDR [中序遍历]\n（3）LRD [后序遍历]\n\n八、线索二叉树1.利用空指针\n（1）在有n个结点的二叉树中，必定存在n+1个空链域；\n（2）因为每个结点有两个链域（左、右孩子指针），因此共有2n个链域；\n（3）除根结点外，每个结点都有且仅有一个分支相连，即n-1个链域被使用。\n\n十、树与森林1.树的存储结构\n（1）双亲表示法：采用一组连续的存储空间；由于每个结点只有一个双亲，只需要一个指针。\n\n（2）孩子表示法：可以采用多重链表，即每个结点有多个指针，最大缺点是空链域太多[(d-1)n+1个]。将每个结点的孩子排列起来，用单链表表示；将每个结点排列成一个线性表。\n\n（3）孩子兄弟表示法（常用）：采用二叉链表左边指针指向第一个孩子，右边指针指向兄弟。\n\n2.树与二叉树的对于关系\n（1）树与二叉树都可以采用二叉链表作存储结构。\n（2）任意给定一棵树，可以找到一个唯一的二叉树(没有右子树)。\n\n3.森林与二叉树的对应关系\n\n4.树的遍历：\n（1）先根（次序）遍历（树的先根—–二叉树的先序）\n\n（2）后根（次序）遍历（树的后根—–二叉树的中序）\n\n5.森林的遍历：\n（1）先序遍历：依次从左至右对森林中的每一棵树进行先根遍历。\n（2）中序遍历：依次从左至右对森林中的每一棵树进行后根遍历。\n\n十一、赫夫曼树及其应用1.最优二叉树\n（1）路径：从树中一个结点到另一个结点之间的分支构成这两个结点之间的路径\n（2）路径长度：路径上的分支数目\n（3）树的路径长度：从树根到每个结点的路径长度之和\n（4）结点的带权路径长度：从结点到树根之间的路径长度与结点上权的乘积\n（5）树的带权路径长度(WPL)：树中所有叶子结点的带权路径长度之和（是叶子结点！）\n（6）最优二叉树：假设二叉树有n个叶子，其每个叶子结点带权wi，则带权路径长度WPL最小的二叉树称为最优二叉树\n（7）赫夫曼(Huffman)树就是一棵最优二叉树\n2.赫夫曼树\n（1）在Huffman树中，权值最大的结点离根最近；权值最小的结点离根最远。\n（2）构建算法：\n—1.根据给定的n个权值(w1, w2, …, wn)构成n棵二叉树的集合F&#x3D;{T1, T2, …, Tn}，其中每棵二叉树Ti中只有一个带权为wi的根结点，左右子树为空。\n—2.在F中选取两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树，且置其根结点的权值为其左右子树根结点的权值之和。\n—3.在F中删除这两棵树，同时将新得到的二叉树加入F中。\n—4.重复2, 3，直到F只含一棵树为止。\n\n注意：画图时每一次要把所有点都画出来！\n（3）编码算法：（从叶子开始！）\n—1.从Huffman树的每一个叶子结点开始\n—2、依次沿结点到根的路径，判断该结点是父亲结点的左孩子还是右孩子，如果是左孩子则得到编码‘0’，否则得到编码‘1’，先得到的编码放在后面\n—-3、直到到达根结点，编码序列即为该叶子结点对应的Huffman编码\n（4）译码算法：\n—1.指针指向Huffman树的根结点，取第一个Huffman码\n—2、如果Huffman码为‘0’，将指针指向当前结点的左子树的根结点；如果Huffman码为‘1’，将指针指向当前结点的右子树的根结点\n—3、如果指针指向的当前结点为叶子结点，则输出叶子结点对应的字符；否则，取下一个Huffman码，并返回2\n—4、如果Huffman码序列未结束，则返回1继续译码\n题目：（4）设给出一段报文：GOOD_GOOD_GOOD_GOOOOOOOO_OFF字符集合是 { O, G, _, D, F}，各个字符出现的频度(次数)是 W＝{ 15, 4, 4, 3, 2}。\n若给每个字符以等长编码 O: 000 G: 001 _: 010 D: 011 F: 100\n则总编码长度为 (15+4+4+3+2) * 3 &#x3D; 84.\n若按各个字符出现的概率不同而给予不等长编码，可望减少总编码长度。\n各字符{ O, G, _, D, F }出现概率为\n{ 15&#x2F;28, 4&#x2F;28, 4&#x2F;28, 3&#x2F;28, 2&#x2F;28 },化整为 { 15, 4, 4, 3, 2 }\n令左孩子分支为编码‘0’，右孩子分支为编码‘1’将根结点到叶子结点路径上的分支编码，组合起来，作为该字符的Huffman码，则可得到：　\n\nO:1 _:011 G:010 D:001 F:000\n则总编码长度为 15*1+(2+3+4+4) *3 &#x3D; 54 &lt; 84\nHuffman是一种前缀编码，解码时不会混淆\n如GOOD编码为：01011001\n如Huffman编码序列01011001，译码后的字符串为GOOD\n（5）前缀编码：指的是，任何一个字符的编码都不是同一字符集中另一个字符的编码的前缀。利用赫夫曼树可以构造一种不等长的二进制编码，并且构造所得的赫夫曼编码是一种最优前缀编码，即使所传电文的总长度最短。\n题目：（1）设有字符集{A, B, C, D}，各字符在电文中出现的次数集为{1, 3, 5, 7}，则哈夫曼树构造过程如下图所示：\n\n\n（最终哈夫曼树的构造结果如上，一定要记得写结果！）\n\n（2）已知一颗完全二叉树第7层有20个结点，则整棵树的结点数？\n83\n（3）在二叉树中，指针p指向的结点是叶子，则p满足条件？\np-&gt;leftChild&#x3D;&#x3D;NULL&amp;&amp;p-&gt;rightChild&#x3D;&#x3D;NULL\n（4）由3个结点组成的二叉树最多有多少种形态？\n5\n（5）已知一棵完全二叉树有100个结点，根节点编号为1，按层次遍历编号，则结点45的父亲编号为？结点50的孩子编号情况如何？\n22;100,101\n第七章：图一、图的定义与术语1.图是由顶点集合(vertex)及顶点间的关系集合组成的一种数据结构： Graph＝( V, E )\n其中V &#x3D; {x | x属于数据对象}是顶点的有穷非空集合\nE是顶点之间关系的有穷集合，包括E1 &#x3D; {(x, y) | x, y 属于 V } 边的集合或E2 &#x3D; {&lt;x, y&gt; | x, y 属于 V } 弧的集合\n注意：在一个图中，所有顶点的度数之和等于边数的2倍！\n2.无向图（无向图的邻接矩阵是对称矩阵）\n用(x,y)表示两个顶点x,y之间的一条边(edge)N&#x3D;{V,E}，V&#x3D;{0,1,2,3,4,5}，E&#x3D;{(0,1), (0,4), (0,5), (1,2), (1,3), (1,5), (2,3), (3,4), (3,5), (4,5)}\n（1）邻接点：如果(x,y)属于E,称x,y互为邻接点，即x,y相邻接\n（2）依附：边(x,y)依附于顶点x,y\n（3）相关联：边(x,y)与x,y相关联\n（4）顶点的度：和顶点相关联的边的数目，记为TD(x)\n3.无向图（完全图）：如果无向图有n(n-1)&#x2F;2条边，则称为无向完全图。\n4.有向图\n用&lt;x,y&gt;表示从x到y的一条弧(Arc)，且称x为弧尾，y为弧头，N&#x3D;{V,E}，V&#x3D;{0,1,2,3,4}，E&#x3D;{&lt;0,1&gt;，&lt;0,3&gt;，&lt;0,4&gt;，&lt;1,2&gt;，&lt;2,4&gt;，&lt;3,2&gt; }\n（1）邻接：如果&lt;x,y&gt;属于E,称x邻接到y,或y邻接\n（2）自x相关联：弧&lt;x,y&gt;与x,y相关联\n（3）入度：以顶点为头的弧的 数目，记为ID(x)\n（4）出度：以顶点为尾的弧的 数目，记为OD(x)\n（5）度：TD(x)&#x3D;ID(x)+OD(x)\n4.有向图（完全图）：如果有向图有n(n-1)条边，则称为有向完全图。\n5.路径：是一个从顶点x到y的顶点序列(x, vi1, vi2,…, vin, y)其中，(x,vi1),(vij-1,vij),(vin,y)皆属于E。\n6.回路：\n（1）回路或环：路径的开始顶点与最后一个顶点相同，即路径中(x, vi1, vi2,…, vin, y)，x&#x3D;y\n（2）简单路径：路径的顶点序列中，顶点不重复出现\n7.连通：\n（1）连通：如果顶点x到y有路径，称x和y是连通的\n（2）连通图：图中所有顶点都连通\n8.子图：\n设有两个图 G＝(V, E) 和 G’＝(V’, E’)。\n若 V’包含于 V 且 E’包含于E, 称图G’是图G的子图\n9.生成树\n一个连通图的生成树是一个极小连通子图，它含图中全部n个顶点，但只有足以构成一棵树的n-1条边。\n二、图的存储结构图的存储结构有4种：邻接矩阵，邻接表，十字链表（有向），邻接多重表（无向）\n1.邻接矩阵\n（1）邻接矩阵：记录图中各顶点之间关系的二维数组。\n（2）对于不带权的图，以1表示两顶点存在边(或弧)(相邻接)，以0表示两顶点不邻接，即 如果(i,j)属于E 或 &lt;i,j&gt;属于E，A[ i ] [ j ] &#x3D;1 否则等于0。\n（3）无向图的邻接矩阵为对称矩。\n（4）其第i行1的个数等于顶点i的出度OD(i)，第j列1的个数等于顶点j的入度ID(j)。\n2.邻接矩阵（网络）\n在网络中，两个顶点如果不邻接，则被视为距离为无穷大；如果邻接，则两个顶点之间存在一个距离值(即权值)，即如果(i,j)属于E 或 &lt;i,j&gt;属于E，A[ i ] [ j ] &#x3D;wi,j 否则等于**∞**。\n\n3.邻接表\n（1）邻接表是图的一种链式存储结构。\n（2）在邻接表中，每个顶点设置一个单链表，其每个结点都是依附于该顶点的边（或以该顶点为尾的弧）。\n\n无向图中，注意左侧的表格数组！\n\n（邻接表（有向网络））\n（3）在一个无向图的邻接表表示中，每个顶点对应一个链表，链表中包含该顶点相邻的其他顶点。每条边在邻接表中对应两个链表结点，因为无向图的边是双向的。给定图包含 10 个顶点和 20 条边，那么每个顶点的平均度数是 2×边数&#x2F;顶点数&#x3D;4。\n由于每个链表结点对应一条边，总的链表结点数是 2×边数。所以，邻接表包含 2×20&#x3D;40 个链表结点。\n注意：n个结点，e条边的无向图邻接表中，有n个头结点和2e个表结点\n（4）在有向图的邻接表中不易找到指向该顶点的弧。\n（5）对于有向图的邻接表，其第i个链表中结点的个数只是该顶点的出度；如果要计算入度，必须遍历整个邻接表[也可以建立一个逆邻接表]要判定两个顶点i和j是否有边（或弧），必须搜索整个第i个和第j个链表，不及邻接矩阵方便。\n在有向图的逆邻接表找每个结点入度：\n\n（5）无向邻接表所需存储空间O(|V|+2|E|)，有向邻接表所需存储空间O(|V|+|E|)\n（6）对于稀疏图，采用邻接表能极大节省空间。\n4.十字链表（有向图！）\n（1）十字链表是有向图的另一种存储结构\n（2）十字链表是将有向图的邻接表和逆邻接表结合起来的一种存储结构\n\n\n绿色代表：相同弧尾（邻接表）\n红色代表：相同弧头（逆邻接表）\n5.邻接多重表（无向图！）\n（1）邻接多重表是无向图的另一种存储结构\n（2）在无向图中，一条边要用2个结点表示(分别从2个顶点的角度看)\n（3）在邻接多重表中，一条边只用一个结点表示\n（4）将所有具有某顶点的结点，全部用链连结起来，链所在的域为该顶点对应的指针域\n\n三、图的遍历1.从图的某一顶点开始，访遍图中其余顶点，且使每一个顶点仅被访问一次\n2.图的遍历主要应用于无向图\n3.深度优先搜索DFS\n（1）图的深度优先搜索是树的先根遍历的推广\n（2）图中可能存在回路，且图的任一顶点都可能与其它顶点相通，在访问完某个顶点之后可能会沿着某些边又回到了曾经访问过的顶点。\n（3）为了避免重复访问，可设置一个标志顶点是否被访问过的辅助数组 visited [ ]\n（4）算法：\n所有顶点访问标志visited[]设置为FALSE\n从某顶点v0开始，设v&#x3D;v0\n–1.如果visited[v]&#x3D;FALSE，则访问该顶点，且设visited[v]&#x3D;TRUE\n–2.如果找到当前顶点的一个新的相邻顶点w,设v&#x3D;w,重复1\n–3.否则(说明当前顶点的所有相邻顶点都已被访问过，或者当前顶点没有相邻顶点)，如果当前顶点是v0，退出；否则返回上一级顶点，重复2\n（5）存储结构未定，则遍历顺序不确定。\n\n4.广度优先搜索（BFS）\n（1）广度优先搜索(BFS)是一种分层搜索方法\n（2）BFS每向前走一步可能访问一批顶点, 不存在往回退的情况\n（3）BFS不是一个递归的过程。\n（4）算法：\n所有顶点访问标志visited[]设置为FALSE\n从某顶点v0开始，访问v0，visited[v0]&#x3D;TRUE，将v0插入队列Q\n–1.如果队列Q不空，则从队列Q头上取出一个顶点v,否则结束\n–2.依次找到顶点v的所有相邻顶点v’，如果visited[v’]&#x3D;FALSE，访问该顶点v’，visited[v’]&#x3D;TRUE，将v’插入队列Q\n–3.重复1,2\n5.结论\n（1）如果图为连通图，则从该图的任意一个顶点开始执行一次深度优先遍历或广度优先遍历，即可访问该连通图的所有顶点。\n（2）如果图为非连通图，则依次从未访问过的顶点开始执行深度优先遍历或广度优先遍历，直至所有的顶点均被访问。\n（3）事实上执行一次深度优先可以遍历一个连通分支。图有多少个连通分支，就调用多少次深度优先遍历。\n6.时间复杂度\n（1）可以看出无论是深度优先遍历还是广度优先遍历,其实质都是透过边或弧找邻接点的过程,只是访问的顺序不同。\n（2）两者的时间复杂度相同，取决于采取的存储结构，若用邻接矩阵为O(N^2),若 用邻接表则为O(N+E) 即O(n)。\n注意：深度优先搜索遍历类似于树的先根遍历，广度优先搜索遍历类似于树的层次遍历。\n**题目：**假设用邻接表存储，下图中边上序号表示边输入顺序(链表头插入)，画出该图邻接表，写出用该邻接表存储时其深度优先顺序和广度优先顺序。\n\n四、图的连通性问题1.无向图的连通性\n如果无向图中，存在不连通的顶点，则该图称为非连通图。\n2.无向图的连通分量\n（1）非连通图的极大连通子图叫做连通分量。\n（2）若从无向图的每一个连通分量中的一个顶点出发进行DFS或BFS遍历，可求得无向图的所有连通分量的生成树(DFS或BFS生成树)。\n（3）所有连通分量的生成树组成了非连通图的生成森林。\n（4）连通分量是无向图的极大连通子图，其中极大的含义是将依附于连通分量中顶点的所有边都加上，所以连通分量中可能存在回路。\n（5）生成树是一个连通图的极小连通子图，包含连通图的所有顶点，且使其连通的边数最少。\n（6）极大连通子图是无向图（不一定连通）的连通分量。极小连通子图是连通无向图的生成树。\n（7）任何连通图的连通分量只有一个，即使其自身。\n3.无向图的生成树\n（1）由DFS遍历，求得连通分量称为DFS生成树\n（2）由BFS遍历，求得连通分量称为BFS生成树\n4.有向图的强连通分量\n强连通图是指在有向图中，对于每一对不同的顶点u和v，都存在从u到v及v到u的路径，n个顶点用弧向同一方向连接形成一个环时，就是强连通图，需要弧最少。\n（1）深度优先搜索算法是求有向图的强连通分量的有效方法。\n（2）在有向图G上，从某个顶点出发沿该顶点为尾的弧进行深度优先搜索，并按其所有邻接点的搜索都完成（即退出dfs函数）的顺序将顶点排列起来。\n（3） 在有向图G上，从最后搜索的顶点出发，沿着以该顶点为头的弧作逆向的深度优先搜索遍历。若此次遍历不能访问到有向图中的所有顶点，则从余下顶点中最后完成搜索的顶点出发继续进行逆向的深度优先搜索遍历。\n（4）每次调用dfs作逆向深度优先遍历所访问到的顶点集便是有向图G中的一个强连通分量的顶点集。\n（5）为了实现以上遍历，需要对深度优先遍历算法作以下修改\n–1.在进入DFStraverse函数时，对计数变量count进行初始化，count&#x3D;0\n–2.在退出DFS函数之前，将完成搜索的顶点号记录在另一个辅助数组finish【vernum】中，在DFS函数结束之前加上finished【++count】&#x3D;v\n5.最小生成树\n（1）如果无向图中，边上有权值，则称该无向图为无向网\n（2）如果无向网中的每个顶点都相通，称为连通网\n（3）最小生成树(Minimum Cost Spanning Tree)是代价最小的连通网的生成树，即该生成树上的边的权值和最小\n（4）准则：必须使用且仅使用连通网中的n-1条边来联结网络中的n个顶点；不能使用产生回路的边；各边上的权值的总和达到最小。常用于道路建设、线路铺设等应用中计算成本。\n6.Prim普里姆算法生成最小生成树\n（1）假设N&#x3D;(V,E)是连通网\n（2）TE是N上最小生成树中边的集合\n–1.U&#x3D;{u0}，(u0属于V), TE&#x3D;{}\n–2.在所有u属于U,v属于V-U的边(u,v)属于E中找一条代价最小的边(u,v0)并入集合TE，同时v0并入U\n–3.重复2，直到U&#x3D;V。T&#x3D;(V，TE)即为所求最小生成树。\n\n（记得每一次画上所有点！）\n\n（Prim V1-Vn mindis flag U)\n（3）在生成树的构造过程中，图中 n 个顶点分属两个集合：已落在生成树上的顶点集 U 和尚未落在生成树上的顶点集V-U，应在所有连通U中顶点和V-U中顶点的边中选取权值最小的边逐渐加入TE,相应顶点加入U中。\n7.Kruscal克鲁斯卡尔算法生成最小生成树\n（1）假设N&#x3D;(V,E)是连通网\n–1.非连通图T&#x3D;{V,{}}，图中每个顶点自成一个连通分量\n–2.在E中找一条代价最小，且其两个顶点分别依附不同的连通分量的边，将其加入T中\n–3.重复2，直到T中所有顶点都在同一连通分量上\n\n（2）把边按照从小到大的顺序排序；\n判断边的顶点不在同一个联通分支-》并查集。\n8.生成最小生成树：\n当为稠密图（邻接矩阵）prim算法 O(n^2)\n当为稀疏图（邻接表）Kruscal算法O(eloge)\n\n五、最短路径1.最短路径\n（1）最短路径是求从图（或网）中某一顶点，到其余各顶点的最短路径\n（2）最短路径与最小生成树主要有三点不同：\n–1.最短路径的操作对象主要是有向图(网)，而最小生成树的操作对象是无向图\n–2.最短路径有一个始点，最小生成树没有（Prim算法有起点）\n–3.最短路径关心的是始点到每个顶点的路径最短，而最小生成树关心的是整个树的代价最小\n2.基本概念\n（1）路径长度:一条路径上所经过的边的数目\n（2）带权路径长度:路径上所经过边的权值之和\n（跟树的带权路径长度区分好！）\n（3）最短路径:(带权)路径长度(值)最小的那条路径\n（4）最短路径长度或最短距离:最短路径长度\n3.Dijkstra算法(O(n^3))\n（1）Dijkstra算法思想：采用按路径长度递增的次序产生最短路径\n–1.设置两个顶点的集合U和T，集合U中存放已找到最短路径的顶点，集合T中存放当前还未找到最短路径的顶点。\n–2.初始状态时，集合U中只包含源点，设为v0；\n–3.然后从集合T中选择到源点v0路径长度最短的顶点u加入到集合U中；\n–4.集合U中每加入一个新的顶点u都要修改源点v0到集合T中剩余顶点的当前最短路径长度值，集合T中各顶点的新的当前最短路径长度值，为原来的当前最短路径长度值与从源点过顶点u到达该顶点的路径长度中的较小者。\n–5.转到3，此过程不断重复，直到集合T中的顶点全部加入到集合U中为止。\n（2）在Dijkstra算法中，引进了一个辅助向量D\n每个分量D[i]表示当前所找到的从始点到每个终点vi的最短路径长度。\nD[i]初值为始点v0到各终点vi的直接距离，即若从始点到某终点有(出)弧，则为弧上的权值，否则为∞。\n（3）得到路径：\n–1.设置另一个辅助向量path[]，用来存放得到的从源点v0到其余各顶点的最短路径上到达目标顶点的前一顶点下标。\n–2.为每一个顶点i设置辅助向量pathi，用来存放得到的从源点v0到该顶点的最短路径中依次访问过的顶点。第一个值是路径上的顶点数。\n**题目：**对下图求从V0出发到各顶点的最短路径。\n\n\n（最后的过程5“无”一定要加，且要补充最后最短路径的结果!)\n4.求n个顶点之间的最短路径\n（1）用Dijkstra算法也可以求得有向图G&#x3D;(V，E)中每一对顶点间的最短路径。\n方法是： 设置二维数组D [i] [j]，数组每一行D[i]表示从顶点vi出发到其它顶点的最短路径，即每次以一个不同的顶点vi为源点重复Dijkstra算法便可求得每一对顶点间的最短路径，时间复杂度是O(n^3) 。\n（2）弗罗伊德(Floyd)算法，其时间复杂度仍是O(n^3) ， 但算法形式更为简明，步骤更为简单，数据结构是基于图的邻接矩阵。\n\n将图中一个顶点Vk 加入到S中，修改A[i] [j]的值，修改方法是：\nA[i] [j] &#x3D; Min{ A[i] [j] , (A[i] [k]+A[k] [j]) }\n找路径：定义二维数组Path[n] [n] (n为图的顶点数) ，元素Pathi保存从Vi到Vj的最短路径所经过的顶点。若Path[i] [j]&#x3D;k：从Vi到Vj 经过Vk ，最短路径序列是(Vi , …, Vk , …, Vj) ，则路径序列：(Vi , …, Vk)和(Vk , …, Vj)一定是从Vi到Vk和从Vk到Vj 的最短路径。从而可以根据Path[i] [k]和Path[k] [j]的值再找到该路径上所经过的其它顶点，…依此类推。\n初始时令Path[i] [j]&#x3D;-1，表示从Vi到Vj 不经过任何(S中的中间)顶点。当某个顶点Vk加入到S中后使A[i] [j]变小时，令Path[i] [j]&#x3D;k。\n六、有向无环图及其应用1.AOV网（有向图！）\n（1）如果用有向图的顶点表示活动，用弧表示活动间的优先关系，则称该有向图为顶点表示活动的网AOV(Activity On Vertex Network)\n（2）AOV的应用包括流程图、工程安排等。对AOV网，应判定图中不存在环，因为存在环意味着某项活动应以自己为先决条件。\n2.有向无环图(DAG)Directed Acycline Graph\n3.检查有向图中是否有回路：\n（1）深度优先搜索 ：从某个顶点v出发，进行DFS，如果存在一条从顶点u到v的回边，则有向图中存在环。\n（2）拓扑排序：由严格偏序定义得到的拓扑有序的操作称拓扑排序。\n若集合X上的关系R是：⑴.自反的：x R x⑵.反对称的：x R y &#x3D;&gt; y R x⑶.传递的：xRy &amp; yRz &#x3D;&gt; xRz 则称R是集合X上的偏序关系。\n全序：设关系R是集合X上的偏序，如果对每个x,y属于X，必有xRy或者yRx，则称R是X上的全序关系。\n偏序：指集合中仅有部分成员之间可比较。\n全序：指集合中全体成员之间均可比较\n算法：⑴.在有向图中选一个没有前驱的顶点(无入度)且输出之⑵.从图中删除该顶点和所有以它为尾的弧；重复⑴⑵两步，直到所有顶点输出为止或跳出循环。\n（3）拓扑排序与AOV网：\n拓扑排序可检测AOV网是否存在环。如果通过拓扑排序能将AOV网络的所有顶点都排入一个拓扑有序的序列中, 则该网络中必定不会出现有向环。反之其中存在环。\n4.拓扑排序实现\n（1）没有前驱的顶点 &#x3D;&#x3D; 入度为零的顶点\n（2）删除顶点及以它为尾的弧 &#x3D;&#x3D; 弧头顶点的入度减1\n题目:写出某AOV网的邻接表存储结构如下，写出分别用队列和栈存储入读为零的顶点时的拓扑排序序列。\n\n栈的拓扑：C4,C0,C2,C1,C3,C5\n队列的拓扑：C2,C4,C0,C1,C5,C3\n5.AOV-网\n（1）如果用有向图的顶点表示事件，用弧表示活动，则称该有向图为边表示活动的网AOE(Activity On Edge)\n（2）AOE应该同样是DAG，AOE包括估算工程的完成时间。\n注意：AOE网和AOV网都是有向无环图，不同在于AOE网中的边有权值；而AOV网中的边无权值，仅表示顶点之间的前后关系。\n6.关键路径\n（1）工程问题的AOE网中，从工程开始(顶点)到工程结束(顶点)之间路径长度最长的路径叫关键路径（最长路径！）\n（2）提前完成关键路径上的活动，工程进度会加快\n（3）提前完成非关键路径上的活动，对工程无帮助\n7.关键活动\n（1）关键路径上的所有活动称为关键活动\n（2）找到工程AOE中的所有关键活动，即找到了关键路径\n8.关键活动有关的量\n（1）e(i)：活动ai最早开始时间\n（2）l(i)：活动ai最迟开始时间\n（3）l(i)-e(i)：活动ai开始时间余量\n（4）如果l(i)&#x3D;e(i)，则称活动ai为关键活动\n（5）ve(j)：事件vj最早开始时间\n（6）vl(j)：事件vj最迟开始时间\n（7)e(i)&#x3D;ve(j)\n（8）l(i)&#x3D;vl(k)-dut(&lt;j,k&gt;) 　\ndut(&lt;j,k&gt;)为活动ai的持续时间\n（9）活动的最早开始时间是活动的弧尾事件的最早发生时间，\n活动的最晚发生时间是活动的弧头事件的最晚发生时间减去活动的持续时间。\nj——&gt;k(此边即活动的编号为i)\n（10）从ve(0)&#x3D;0开始向前递推（事件的最早发生时刻）\n事件的最早发生时间是以其为弧头事件的所有弧尾事件的最早发生时间与对应弧活动的持续时间之和的最大值\n（11）从vl(n-1)&#x3D;ve(n-1)起向后递推（事件的最晚发生时刻）\n事件的最晚发生时间是以其为弧尾事件的所有弧头事件的最晚发生时间与对应弧活动的持续时间之差的最小值。\n9.求关键活动算法（先计算事件，再计算活动）\n（1）从始点v0出发，令ve[0]&#x3D;0（源点），按拓扑有序求ve[j]\n&lt;vj,vk&gt;即vk为vj的任意后续\nve[k]&#x3D;max{ve[j]+Weight(vj,vk)}\n（2）从终点vn-1出发，令vl[n-1]&#x3D;ve[n-1]（汇点），按逆拓扑有序求vl[i]\n&lt;vk,vj&gt;即vk为vj的任意前驱\nvl[k]&#x3D;min{ vl[j]-Weight(vk,vj)}\n（简单记忆：我们都想晚点开学早点放假，晚点开学即最早开始取max，早点放假即最晚开始取min)\n（3）根据各顶点的ve和vl值，求每条弧(活动)ai的最早开始时间e[ai]和最迟开始时间l[ai]\n若边&lt;vk,vj&gt;表示活动ai,则e(i)&#x3D;ve[k]\nl[i]&#x3D;vl[j]-Weight(vk,vj)\n（4）如果e[ai]&#x3D;l[ai]，则ai为关键活动(e[i]-l[i]&#x3D;&#x3D;0)\n（5）如果ve[i]&#x3D;vl[i]，则vi为关键路径上的事件\n**题目：**下表给出了某工程各工序之间的优先关系和各工序所需的时间。\n\n\n\n工序代号\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n所需时间\n3\n2\n2\n3\n4\n3\n2\n1\n\n\n先驱工序\n-\n-\nA\nA\nB\nB\nC,E\nD\n\n\n问: 该工程是否能够顺利进行? 如果能，请问要花多长时间？ 缩短那些工序可以缩短整个工程的完工时间？\n\n第九章：查找一、查找的概念1.查找表\n（1）查找表是由同一类型的数据元素(或记录)构成的集合\n（2）对查找表的操作:\n–1.查询某个“特定的”数据元素是否在查找表中；\n–2.检索某个“特定的”数据元素的各种属性；\n–3.在查找表中插入一个数据元素；\n–4.从查找表中删去某个数据元素\n（3）静态查找表：仅作查询和检索操作的查找表。\n（4）动态查找表：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已存在的某个数据元素。\n2.关键字\n（1）关键字是数据元素（或记录）中某个数据项的值，用以标识（识别）一个数据元素（或记录\n注意：关键字是某个数据项的值！不是数据元素\n（2）主关键字：可以识别唯一的一个记录的关键字\n（3）次关键字：能识别若干记录的关键字\n3.查找\n（1）查找是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。\n（2）查找成功：在查找表中查找到指定的记录。\n（3）查找不成功：在查找表中没有找到指定记录。\n4.衡量查找算法的标准\n（1）时间复杂度\n（2）空间复杂度\n（3）平均查找长度ASL\n5.平均查找长度ASL\n（1）平均查找长度定义为确定记录在表中的位置所进行的和关键字比较的次数的平均值。\n（2）ASL &#x3D; ∑ PiCi （i为1到n）\n\nn为查找表的长度，即表中所含元素的个数；Pi为查找第i个元素的概率(∑Pi&#x3D;1)；Ci是查找第i个元素时同给定值K比较的次数。\n二、静态查找表（顺序、折半、分块）1.顺序查找\n（1）顺序查找算法是顺序表的查找方法。\n（2）在顺序查找算法中，以顺序表或线性链表表示静态查找表。\n（3）顺序查找算法：\n–1.从表中最后一个记录开始\n–2.逐个进行记录的关键字和给定值的比较\n–3.若某个记录比较相等，则查找成功\n–4.若直到第1个记录都比较不等，则查找不成功\n（4）算法性能分析\n对顺序表而言，Ci&#x3D;n-i+1\n在等概率查找的情况下，Pi&#x3D;1&#x2F;n\nASL（成功）&#x3D;n*P1 +(n-1)P2 +…+ 2Pn-1+ Pn &#x3D; (n+1)&#x2F;2\n（5）顺序查找(不等概率)\n如果被查找的记录概率不等时，取 Pn≥Pn-1≥···≥P2≥P1；\n若查找概率无法事先测定，则查找过程采取的改进办法是，在每次查找之后，将刚刚查找到的记录直接移至表尾的位置上。\n（6）特点：\n优点：1.简单2.适应面广(对表的结构无任何要求)\n缺点：1.平均查找长度较大2.特别是当n很大时，查找效率很低。\n2.折半查找（有序表！）\n（1）折半查找算法是有序表的查找方法。\n（2）在折半查找算法中，静态查找表按关键字大小的次序，有序地存放在顺序表中。\n（3）折半查找的原理是：1.先确定待查记录所在的范围(前部分或后部分)2.逐步缩小(一半)范围直到找(不)到该记录为止。\n（4）算法：\n–1.n个对象从小到大存放在有序顺序表ST中，k为给定值\n–2.设low、high指向待查元素所在区间的下界、上界，即low&#x3D;1, high&#x3D;n\n–3.设mid指向待区间的中点，即mid&#x3D;(low+high)&#x2F;2\n–4.让k与mid指向的记录比较若k&#x3D;ST[mid].key，查找成功\n若k&lt;ST[mid].key，则high&#x3D;mid-1 [上半区间]\n若k&gt;ST[mid].key，则low&#x3D;mid+1 [下半区间]\n–5.重复3,4操作，直至low&gt;high时，查找失败。（严格大于）\n（5）折半查找（判定树）\n判定树：描述查找过程的二叉树。\n有n个结点的判定树的深度为floor(log2(n)) +1（与含有 n 个结点的完全二叉树的深度相同）\n折半查找法在查找过程中进行的比较次数最多不超过floor(log2(n)) +1\n题目：假设某有序表查找中有12个元素，请问该查找表查找成功时的平均查找长度为多少？（查找失败的ASL：为白块到根结点的路径长度之和&#x2F;白块个数；ASL&#x3D;1&#x2F;2 * 成功+1&#x2F;2* 失败）\n\n（6）性能分析\n设有序表的长度n&#x3D;2^h-1（即h&#x3D;log2(n+1)）,则描述折半查找的判定树是深度为h的满二叉树。\n树中层次为1的结点有1个，层次为2的结点有2个，层次为h的结点有2^(h-1)个。\n假设表中每个记录的查找概率相等，则查找成功时折半查找的平均查找长度：ASL（成功）&#x3D;[(n+1)&#x2F;n]*log2(n+1)-1\n（7）特点\n折半查找的效率比顺序查找高(特别是在静态查找表的长度很长时)。\n折半查找只能适用于有序表，并且以顺序存储结构存储。\n3.分块查找\n（1）分块查找是一种索引顺序表(分块有序表)查找方法，是折半查找和顺序查找的简单结合。\n（2）**索引顺序表(分块有序表)**将整个表分成几块，块内无序，块间有序。\n（3）所谓块间有序是指后一块表中所有记录的关键字均大于前一块表中的最大关键字。\n（4）分块查找(分块有序表)\n主表：用数组存放待查记录,每个数据元素至少含有关键字域。\n索引表：每个结点含有最大关键字域和指向本块第一个结点的指针。\n（5）采用折半查找方法在索引表中找到块[第2块]，用顺序查找方法在主表对 应块中找到记录[第3记录]。\n（6）性能分析：\n若将长度为n的表分成b块，每块含s个记录，并设表中每个记录查找概率相等。\n用折半查找方法在索引表中查找索引块，ASL块间≈log2(n&#x2F;s+1)\n用顺序查找方法在主表对应块中查找记录，ASL块内&#x3D;s&#x2F;2\nASL(成功)≈log2(n&#x2F;s+1) + s&#x2F;2\n三、动态查找表1.动态查找表\n（1）表结构本身是在查找过程中动态生成的\n（2）若表中存在其关键字等于给定值key的记录,表明查找成功；\n（3）否则插入关键字等于key的记录。\n2.二叉排序树（将判定树的结点信息从下标改为数据即为二叉排序树）\n（1）空树或者是具有如下特性的二叉树：\n–⑴.若它的左子树不空，则左子树上所有结点的值均小于根结点的值；\n–⑵.若它的右子树不空，则右子树上所有结点的值均大于根结点的值；\n–⑶.它的左、右子树也都分别是二叉排序树。\n（2）二叉排序树又称二叉查找树\n查找算法： 给定值与根结点比较：–1.若相等，查找成功–2.若小于，查找左子树–3.若大于，查找右子树\n生成举例：\n题目：画出在初始为空的二叉排序树中依次插入56,64,92,80,88,75时该树的生长全过程\n\n（3）二叉排序树(插入)\n二叉排序树是一种动态树表；\n当树中不存在查找的结点时，作插入操作；\n新插入的结点一定是叶子结点（只需改动一个结点的指针）；\n该叶子结点是查找不成功时路径上访问的最后一个结点左孩子或右孩子(新结点值小于或大于该结点值)。（最后一个！）\n（4）中序遍历二叉排序树，可得到一个关键字的有序序列。\n（5）二叉排序树(删除)\n删除二叉排序树中的一个结点后，必须保持二叉排序树的特性（左子树的所有结点值小于根结点，右子树的所有结点值大于根结点）也即保持中序遍历后，输出为有序序列。\n被删除结点具有以下三种情况：1.是叶子结点（直接删除结点，并让其父结点指向该结点的指针变为空）；2.只有左子树或右子树（删除结点,让其父结点指向该结点的指针指向其左子树(或右子树),即用孩子结点替代被删除结点即可）；3.同时有左、右子树。（以中序遍历时的直接前驱s替代被删除结点p，然后再删除该直接前驱（只可能有左孩子））\n\n（6）性能分析\n\n（注意根算1！）\n对于每一棵特定的二叉排序树，均可按照平均查找长度的定义来求它的 ASL 值。\n显然，由值相同的 n 个关键字，构造所得的不同形态的各棵二叉排序树的平均查找长度的值不同，甚至可能差别很大。\n在最坏的情况下，二叉排序树为近似线性表时(如以升序或降序输入结点时)，其查找深度为n量级，即其时间复杂性为O(n)\n（7）特性\n一个无序序列可以通过构造一棵二叉排序树而变成一个有序序列（通过中序遍历）。\n插入新记录时，只需改变一个结点的指针，相当于在有序序列中插入一个记录而不需要移动其它记录。\n二叉排序树既拥有类似于折半查找的特性，又采用了链表作存储结构。\n但当插入记录的次序不当时(如升序或降序)，则二叉排序树深度很深，增加了查找的时间。\n3.平衡二叉树\n（1）平衡二叉树是二叉排序(查找)树的另一种形式\n（2）平衡二叉树又称AVL树(Adelsen-Velskii and Landis)\n（3）其特点为：树中每个结点的左、右子树深度之差的绝对值不大于1，即|hL-hR|≤1\n（4）平衡因子：每个结点附加一个数字, 给出该结点左子树的高度减去右子树的高度所得的高度差,这个数字即为结点的平衡因子balance （左减右！）\n（5）AVL树任一结点平衡因子只能取 -1, 0, 1\n（6）平衡二叉树(删除)与二叉排序树相同\n如果被删结点A最多只有一个孩子，那么将结点A从树中删去，并将其双亲指向它的指针指向它的唯一的孩子，并作平衡化处理。\n如果被删结点A没有孩子，则直接删除之，并作平衡化处理。\n如果被删结点A有两个子女，则用该结点的直接前驱S替代被删结点，然后对直接前驱S作删除处理(S只有一个孩子或没有孩子)。\n4.AVL平衡化旋转\n（1）如果在一棵平衡的二叉查找树中插入一个新结点，造成了不平衡。此时必须调整树的结构，使之平衡化。\n（2）平衡化旋转(处理)有两类：\n–1.单向旋转 (单向右旋和单向左旋)\n\n–2.双向旋转 (先左后右旋转和先右后左旋转)\n\n（3）每插入一个新结点时, AVL树中相关结点的平衡状态会发生改变。\n–1.在插入一个新结点后，需要从插入位置沿通向根的路径回溯，检查各结点的平衡因子。\n–2.如果在某一结点发现高度不平衡，停止回溯。(出现2或者-2)\n–3.从发生不平衡的结点起，沿刚才回溯的路径取直接下两层的结点。（做旋转操作）\n题目：画出在初始为空的AVL树中依次插入64,5,13,21,19,80,75,37,56时该树的生长过程，并在有旋转时说出旋转的类型。\n\n四、哈希表1.哈希表（散列表）\n（1）哈希(Hash)表又称散列表散列表，是一种直接计算记录存放地址的方法，它在关键码与存储位置之间直接建立了映象。\n（2）哈希函数是从关键字空间到存储地址空间的一种映象。\n（3）哈希函数在记录的关键字与记录的存储地址之间建立起一种对应关系。可写成：addr(ai)&#x3D; H(keyi)，H(·)为哈希函数k，eyi是表中元素ai关键字,addr(ai)是存储地址。\n2.哈希表(查找)\n（1）哈希查找也叫散列查找，是利用哈希函数进行查找的过程。\n–1.首先利用哈希函数及记录的关键字计算出记录的存储地址.。\n–2.然后直接到指定地址进行查找\n–3.不需要经过比较，一次存取就能得到所查元素\n3.哈希表(冲突)\n（1）不同的记录，其关键字通过哈希函数的计算，可能得到相同的地址。把不同的记录映射到同一个散列地址上，这种现象称为冲突。\n4.哈希表(定义)\n（1）根据设定的哈希函数 H(key) 和所选中的处理冲突的方法\n（2）将一组关键字映象到一个有限的、地址连续的地址集 (区间) 上\n（3）并以关键字在地址集中的“象”作为相应记录在表中的存储位置\n（4）如此构造所得的查找表称之为“哈希表”\n5.哈希函数(均匀性)\n（1）哈希函数实现的一般是从一个大的集合（部分元素，空间位置上一般不连续）到一个小的集合（空间连续）的映射\n（2）一个好的哈希函数，对于记录中的任何关键字，将其映射到地址集合中任何一个地址的概率应该是相等的\n（3）即关键字经过哈希函数得到一个“随机的地址“\n6.哈希函数(要求)\n（1）哈希函数应是简单的，能在较短的时间内计算出结果。\n（2）哈希函数的定义域尽可能包括需要存储的全部关键字，如果散列表允许有 m 个地址时，其值域必须在 0 到 m-1 之间。\n（3）散列函数计算出来的地址应能均匀分布在整个地址空间中。\n7.哈希函数(直接定址法)\n（1）直接定址法中，哈希函数取关键字的线性函数： H(key) &#x3D; a x key + b（其中a和b为常数）\n（2）直接定址法仅适合于地址集合的大小与关键字集合的大小相等的情况\n（3）当a&#x3D;1时，H(key)&#x3D;key，即用关键字作地址\n（4）在实际应用中能使用这种哈希函数的情况很少\n8.哈希函数(数字分析法)\n（1）假设关键字集合中的每个关键字都是由 s 位数字组成 (u1, u2, …, us)。\n（2）分析关键字集中的全体\n（3）从中提取分布均匀的若干位或它们的组合作为地址\n\n（4）数字分析法仅适用于事先明确知道表中所有关键码每一位数值的分布情况\n（5）数字分析法完全依赖于关键码集合\n（6）如果换一个关键码集合，选择哪几位要重新决定\n9.哈希函数(平方取中法)\n（1）以关键字的平方值的中间几位作为存储地址。\n（2）求“关键字的平方值” 的目的是“扩大差别”\n（3）同时平方值的中间各位又能受到整个关键字中各位的影响。\n（4）此方法在词典处理中使用十分广泛。它先计算构成关键码的标识符的内码的平方, 然后按照散列表的大小取中间的若干位作为散列地址。\n\n（5）平方取中法是较常用的构造哈希函数的方法\n（6）适合于关键字中的每一位都有某些数字重复出现且频度很高的情况\n（7）中间所取的位数，由哈希表长决定\n10.哈希函数(折叠法)\n（1）将关键字分割成位数相同的若干部分(最后部分的倍数可以不同)，然后取它们的叠加和(舍去进位)为哈希地址。\n（2）移位叠加:将分割后的几部分低位对齐相加。\n（3）间界叠加:从一端沿分割界来回折送，然后对齐相加。\n\n（4）折叠法适合于关键字的数字位数特别多，而且每一位上数字分布大致均匀的情况。\n11.哈希函数(除留余数法)\n（1）取关键字被某个不大于哈希表长m的数p除后所得余数为哈希地址： H(key) &#x3D; key MOD p ( p≤m )\nm为表长 p为不大于m的素数或是不含20以下的质因子\n（2）除留余数法是一种最简单、最常用的构造哈希函数的方法\n（3）不仅可以对关键字直接取模(MOD)，也可在折叠、平方取中等运算之后取模\n12.处理冲突的方法\n“处理冲突” 的实际含义是：为产生冲突的地址寻找下一个哈希地址。\n处理冲突的方法主要有三种：1.开放定址法2.再哈希法3.链地址法\n13.处理冲突的方法(开放定址法)\n（1）为产生冲突的地址 H(key) 求得一个地址序列： H0, H1, H2, …, Hs，1≤s≤m-1\n（2）Hi &#x3D; [H(key)+di] MOD m\ni&#x3D;1,2,…,s\nH(key)为哈希函数\nm为哈希表长\n（3）开放定址法－线性探测：\n当di取1,2,3,…,m-1时，称这种开放定址法为线性探测再散列\n\n（4）开放定址法－二次探测：\n当di取&#x3D; 1^2, -1^2，2^2, -2^2，3^2,…时，称这种开放定址法为二次探测再散列\n（5）特性\n当di取&#x3D; 1^2, -1^2，2^2, -2^2，3^2,…时，称这种开放定址法为二次探测再散列；\n二次探测再散列：m&#x3D;4j+3的素数时总能找到。\n缺点：易产生“二次聚集”，即在处理同义词的冲突过程中，又添加了非同义词的冲突，对查找不利\n14.处理冲突的方法(再哈希法)\n（1）构造若干个哈希函数，当发生冲突时，计算下一个哈希地址，直到冲突不再发生，即：Hi &#x3D; Rhi(key) i&#x3D;1,2,……k\nRhi—不同的哈希函数\n（2）特点：不易产生聚集，但增加计算时间\n15.处理冲突的方法(链地址法)\n（1）将所有哈希地址相同的记录都链接在同一链表中\n（2）表头插入和表后插入\n题目：已知一组关键字(19,14,23,1,68,20,84,27,55,11,10,79)哈希函数为： H(key)&#x3D;key MOD 13,用链地址法处理冲突[表头插入]\n（注意左侧数组表示和空符号^)\n\n16.哈希表的实现\n17.哈希表的性能分析\n（1）虽然哈希表在关键字与记录的存储位置之间建立了直接映象，但由于“冲突”的产生，使得哈希表的查找过程仍然是一个给定值和关键字进行比较的过程\n（2）因此，仍需以平均查找长度(ASL)作为衡量哈希表的查找效率的量度\n（3）决定哈希表查找的ASL的因素：\n–1.选用的哈希函数\n–2.选用的处理冲突的方法\n–3.哈希表的装填因子：哈希表的装填因子是哈希表中填入的记录数与哈希表的长度的比值，即：α &#x3D; 哈希表中填入的记录数 &#x2F; 哈希表的长度。装填因子α标志哈希表的装满程序。\n注意：散列表的平均查找长度依赖于装填因子，不直接依赖于n或m\n（4）装填因子α越小，发生冲突的可能性就越小；装填因子α越大，发生冲突的可能性就越大。\n（5）平均查找长度ASL:\n线性探测再散列的哈希表查找成功时：ASL ≈ (½)(1 + 1&#x2F;(1-α))\nASL(成功)&#x3D;(1&#x2F;2)*(1+1&#x2F;(1-记录数&#x2F;哈希表长度))\n二次探测再散列的哈希表查找成功时：ASL ≈ -(1&#x2F;α)ln(1-α)\nASL(成功)&#x3D;-(1&#x2F;(记录数&#x2F;哈希表长度))ln(1-记录数&#x2F;哈希表长度)\n链地址法处理冲突的哈希表查找成功时：ASL ≈ (1 + α&#x2F;2)\nASL(成功)&#x3D;(1+(记录数&#x2F;哈希表长度)&#x2F;2)\n五、B-树[结点结构]1.B-树是一种特殊的多路平衡查找树\n2.R.Bayer和E.Maccreight于1970年提出\n3.B-树是一种在外存文件系统中常用的动态索引\n4.技术磁盘中文件的读写以“盘块”为单位进行\n5.将关键字索引信息，放在盘块中，可以加快数据的查找速度\n6.结点结构：\n（1）Ki是关键字，且Ki&lt;Ki+1\n（2）Ai是指向子树根结点的指针\n（3）Ai-1所指子树中所有结点的关键字均小于Ki\n（4）Ai 所指子树中所有结点的关键字均大于Ki\n（5）对于m阶B-树，ceil(m&#x2F;2) -1≤n≤m-1 (分支数比关键字数目多一)\n\n7.m阶B-树定义:\n（1）树中每个结点至多有m棵子树（m-1个关键字）\n（2）若根结点不是叶子结点，则至少有两棵子树\n（3）除根之外的所有非终端结点至少有 ceil(m&#x2F;2) 棵子树\n（4）所有叶子结点，都出现在同一层次上，且不带信息（可以看作是查找失败的结点，指向这些结点的指针为空指针）\n**题目:**3阶B-树（11个结点）\n\n(1)关键字比分支数少一（B-）,m&#x3D;3(3阶)\n(2)关键字数目为n,ceil(3&#x2F;2)-1&lt;&#x3D;n&lt;&#x3D;3-1即1&lt;&#x3D;n&lt;&#x3D;2\nceil(m&#x2F;2)-1&lt;&#x3D;n&lt;&#x3D;m-1\n(3)如图深度为3，结点数最少(所有都是关键字n&#x3D;1,分支为2)：2^3-1&#x3D;7;结点数最多(所有都是关键字n&#x3D;2,分支为3)：1+3+3^2&#x3D;13\n结点数最少：2^h-1;结点数最多：1+m+m^2+..+m^(h-1)\n第十章：内部排序一、排序1.排序\n（1）排序：将一个数据元素（或记录）的任意序列，重新排列成一个按关键字有序的序列\n（2）内部排序：在排序期间数据对象全部存放在内存的排序；\n（3）外部排序：在排序期间全部对象个数太多，不能同时存放在内存，必须根据排序过程的要求，不断在内、外存之间移动的排序。\n2.排序基本操作：\n（1）比较：比较两个关键字的大小\n（2）移动：将记录从一个位置移动至另一个位置\n3.排序时间复杂度\n排序的时间复杂度可用算法执行中的记录关键字比较次数与记录移动次数来衡量。\n4.排序方法的稳定性\n（1）如果在记录序列中有两个记录r[i]和r[j], 它们的关键字 key[i] &#x3D;&#x3D; key[j] , 且在排序之前, 记录r[i]排在r[j]前面。\n（2）如果在排序之后, 记录r[i]仍在记录r[j]的前面, 则称这个排序方法是稳定的, 否则称这个排序方法是不稳定的。\n二、插入排序1.直接插入排序\n（1）当插入第i(i≥1)个对象时, 前面的r[0], r[1], …, r[i-1]已经排好序。\n（2）用r[i]的关键字与r[i-1], r[i-2], …的关键字顺序进行比较(和顺序查找类似)，如果小于，则将r[x]向后移动(插入位置后的记录向后顺移)\n（3）找到插入位置即将r[i]插入\n（4）每步将一个待排序的对象, 按其关键字大小, 插入到前面已经排好序的有序表的适当位置上, 直到对象全部插入为止。\n\n（5）关键字比较次数和记录移动次数与记录关键字的初始排列有关。\n（6）最好情况下, 排序前记录已按关键字从小到大有序, 每趟只需与前面有序记录序列的最后一个记录比较1次, 移动2次记录, 总的关键字比较次数为 n-1, 记录移动次数为 2(n-1)。\n（7）最坏情况下, (i从1开始，下标从0开始)第i趟时第i个记录必须与前面i个记录都做关键字比较, 并且每做1次比较就要做1次数据移动。则总关键字比较次数KCN和记录移动次数RMN分别为\n\n（8）在平均情况下的关键字比较次数和记录移动次数约为 n^2&#x2F;4。\n（9）直接插入排序的时间复杂度为O(n^2)。\n（10）直接插入排序是一种稳定的排序方法。\n（11）直接插入排序最大的优点是简单，在记录数较少时，是比较好的办法。\n2.折半插入排序\n（1）折半插入排序在查找记录插入位置时，采用折半查找算法\n（2）折半查找比顺序查找快, 所以折半插入排序在查找上性能比直接插入排序好\n（3）但需要移动的记录数目与直接插入排序相同(为O(n2))\n（4）折半插入排序的时间复杂度为O(n^2)。\n（5）折半插入排序是一种稳定的排序方法\n3.希尔排序\n（1）从直接插入排序可以看出，当待排序列为正序时，时间复杂度为O(n)\n（2）若待排序列基本有序时，插入排序效率会提高希尔排序方法是先将待排序列分成若干子序列分别进行插入排序，待整个序列基本有序时，再对全体记录进行一次直接插入排序\n（3）希尔排序又称为缩小增量排序。\n\n（4）算法：\n首先取一个整数 gap &lt; n(待排序记录数) 作为间隔, 将全部记录分为 gap 个子序列, 所有距离为 gap 的记录放在同一个子序列中。（gap为组数！）\n在每一个子序列中分别施行直接插入排序。然后缩小间隔 gap, 例如取 gap &#x3D; gap&#x2F;2。\n重复上述的子序列划分和排序工作，直到最后取gap &#x3D; 1, 将所有记录放在同一个序列中排序为止。\n（5）算法分析：\n开始时 gap 的值较大, 子序列中的记录较少, 排序速度较快。\n随着排序进展, gap 值逐渐变小, 子序列中记录个数逐渐变多,由于前面大多数记录已基本有序, 所以排序速度仍然很快。\nGap的取法有多种。 shell 提出取 gap &#x3D; n&#x2F;2，gap &#x3D; gap&#x2F;2，直到gap &#x3D; 1。\n对特定的待排序记录序列，可以准确地估算关键字的比较次数和记录移动次数。\n希尔排序所需的比较次数和移动次数约为n^1.3\n当n趋于无穷时可减少到n x(log2 n)^2\n希尔排序的时间复杂度约为O(n x(log2 n)^2)\n希尔排序是一种不稳定的排序方法\n三、快速排序1.冒泡排序\n（1）设待排序记录序列中的记录个数为n(下标从1到n)。\n（2）一般地，第i趟起泡排序从1到n-i+1依次比较相邻两个记录的关键字，如果发生逆序，则交换之\ni&#x3D;1时，为第一趟排序，关键字最大的记录将被交换到最后一个位置\ni&#x3D;2时，为第二趟排序，关键字次大的记录将被交换到最后第二个位置\n关键字小的记录不断上浮(起泡)，关键字大的记录不断下沉(每趟排序最大的一直沉到底)\n（3）其结果是这n-i+1个记录中，关键字最大的记录被交换到第n-i+1的位置上，最多作n-1趟。\n（4）最好情况：在记录的初始排列已经按关键字从小到大排好序时,此算法只执行一趟起泡,做n-1次关键字比较,不移动记录。\n（5）最好情况：在记录的初始排列已经按关键字从小到大排好序时,此算法只执行一趟起泡,做n-1次关键字比较,不移动记录\n\n（6）起泡排序的时间复杂度为O(n^2)\n（7）起泡排序是一种稳定的排序方法\n（8）每一趟可以确定一个数的位置（从后往前）\n2.快速排序\n（1）任取待排序记录序列中的某个记录(例如取第一个记录)作为基准(枢),按照该记录的关键字大小,将整个记录序列划分为左右两个子序列\n（2） 左侧子序列中所有记录的关键字都小于或等于基准记录的关键字\n（3）右侧子序列中所有记录的关键字都大于基准记录的关键字\n（4）基准记录则排在这两个子序列中间(这也是该记录最终应安放的位置)。\n（5）然后分别对这两个子序列重复施行上述方法，直到所有的记录都排在相应位置上为止。\n（6）基准记录也称为枢轴（或支点）记录。\n（7）算法：\n取序列第一个记录为枢轴记录，其关键字为Pivotkey。\n指针low指向序列第一个记录位置。\n指针high指向序列最后一个记录位置。\n一趟排序(某个子序列)过程：\n–1.从high指向的记录开始,向前找到第一个关键字的值小于Pivotkey的记录,将其放到low指向的位置,low+1\n–2.从low指向的记录开始,向后找到第一个关键字的值大于Pivotkey的记录,将其放到high指向的位置,high-1\n–3.重复1,2，直到low&#x3D;high，将枢轴记录放在low(high)指向的位置\n对枢轴记录前后两个子序列执行相同的操作，直到每个子序列都只有一个记录为止。\n\n（8）性能分析：\n快速排序是一个递归过程。\n利用序列第一个记录作为基准，将整个序列划分为左右两个子序列。只要是关键字小于基准记录关键字的记录都移到序列左侧。\n如果每次划分对一个记录定位后, 该记录的左侧子序列与右侧子序列的长度相同, 则下一步将是对两个长度减半的子序列进行排序, 这是最理想的情况。\n可以证明, 快速排序的平均计算时间也是O(nlog2 n)。\n实验结果表明: 就平均计算时间而言, 快速排序是所有内排序方法中最好的一个。\n但快速排序是一种不稳定的排序方法。\n（9）在最坏情况下, 即待排序记录序列已经按其关键字从小到大排好序, 其递归树成为单支树, 时间复杂度达O(n2)\n每次划分只得到一个比上一次少一个记录的子序列。\n必须经过n-1 趟才能把所有记录定位,\n而且第 i 趟需要经过 n-i 次关键字比较才能找到第 i 个记录的安放位置，总的关键字比较次数将达到：\n\n（10）改进：枢轴记录取low、high、(low+high)&#x2F;2三者指向记录关键字居中的记录。\n四、选择排序1.简单选择排序\n（1）每一趟(例如第i趟,i&#x3D;0,1,…,n-2)在后面n-i个待排序记录中选出关键字最小的记录,与第i个记录交换。\n\n（2）每趟可确定一个数（从前往后）\n算法中的几个表示关系的缩写EQ 就是 EQUAL等于\nNE 就是 NOT EQUAL不等于\nGT 就是 GREATER THAN大于　\nLT 就是 LESS THAN小于\nGE 就是 GREATER THAN OR EQUAL 大于等于\nLE 就是 LESS THAN OR EQUAL 小于等于\n（2）性能分析：\n直接选择排序的关键字比较次数 KCN 与记录的初始排列无关。\n设整个待排序记录序列有n个记录,则第i趟选择具有最小关键字记录所需的比较次数总是 n-i-1次。总的关键字比较次数为：\n\n记录的移动次数与记录序列的初始排列有关。\n当这组记录的初始状态是按其关键字从小到大有序的时候,记录的移动次数RMN&#x3D;0,达到最少。\n最坏情况是每一趟都要进行交换，总的记录移动次数为 RMN &#x3D; 3(n-1)。\n直接选择排序是一种不稳定的排序方法。\n2.堆排序\n（1）设有一个关键字集合，按完全二叉树的顺序存储方式存放在一个一维数组中。对它们从根开始，自顶向下，同一层自左向右从 1 开始连续编号。若满足 Ki &gt;&#x3D;K2i &amp;&amp; Ki &gt;&#x3D;K2i+1则称该关键字集合构成一个堆(最大堆)\n注意：只对根有要求，对左右节点大小关系顺序无要求\n（2）最大堆（筛选）：\n输出根结点\n用最后结点代替根结点值（最后的！）\n比较根结点与两个子结点的值，如果小于其中一个子结点，则选择大的子结点与根结点交换\n继续将交换的结点与其子结点比较\n直到叶子结点或者根节点值大于两个子结点\n（2）创建初始堆：\n根据给定的序列，从1至n按顺序创建一个完全二叉树\n由**最后一个非终端结点(第n&#x2F;2个结点)**开始至第1个结点，逐步做筛选（第n&#x2F;2个！）\n（3）性能排序\n对于长度为n的序列，其对应的完全二叉树的深度为k(2^(k-1) &lt;&#x3D; n &lt;&#x3D; 2^k)\n对深度为k的堆，筛选算法中进行的关键字比较次数至多为2(k-1)次\n堆排序时间主要耗费在建初始堆和调整建新堆(筛选)上\n建初始堆最多做n&#x2F;2次筛选\n对长度为n的序列，排序最多需要做n-1次调整建新堆(筛选)\n因此共需要O(nxk)量级的时间k &#x3D; log2n\n堆排序时间复杂度为O(nlog2n)\n堆排序是一个不稳定的排序方法\n记录数较多时，推荐堆排序\n\n五、归并排序1.归并（有序！）\n（1）归并是将两个或两个以上的有序表合并成一个新的有序表。\n（2）两路归并\n假设待归并两个有序表长度分别为m和n，则两路归并后，新的有序表长度为m+n\n两路归并操作至多只需要m+n次移位和m+n次比较\n因此两路归并的时间复杂度为O(m+n)\n2.2路－归并排序\n（1）将n个记录看成是n个有序序列\n（2）将前后相邻的两个有序序列归并为一个有序序列(两路归并)（前后相邻！）\n（3）重复做两路归并操作，直到只有一个有序序列为止\n\n（4）性能分析：\n如果待排序的记录为n个，则需要做log2n趟两路归并排序\n每趟两路归并排序的时间复杂度为O(n)\n因此2路－归并排序的时间复杂度为O(nlog2n)\n归并排序是一种稳定的排序方法\n\n六、基数排序1.多关键字的排序(最低位优先法LSD)\n（1）从最低位关键字kd起进行排序，\n（2）然后再对高一位的关键字排序，……\n（3）依次重复，直至对最高位关键字k1排序后，便成为一个有序序列\n\n2.链式基数排序\n（1）基数排序：借助“分配”和“收集”对单逻辑关键字进行排序的一种方法\n（2）链式基数排序方法：用链表作存储结构的基数排序\n（3）设置10个队列，f[i]和e[i]分别为第i个队列的头指针和尾指针\n（4）第i趟分配：根据第i位关键字的值，改变记录的指针，将链表中记录分配至10个链队列中，每个队列中记录关键字的第i位关键字相同\n（5）第i趟收集：改变所有非空队列的队尾记录的指针域，令其指向下一个非空队列的队头记录，重新将10个队列链成一个链表\n（6）从最低位至最高位，逐位执行上述两步操作，最后得到一个有序序列\n\n\n（7）性能分析\n若每个关键字有 d 位,关键字的基数为radix 。\n需要重复执行d 趟“分配”与“收集”。\n每趟对 n 个对象进行“分配”，对radix个队列进行“收集”。\n总时间复杂度为O(d(n+radix))。\n若基数radix相同, 对于对象个数较多而关键字位数较少的情况, 使用链式基数排序较好。\n基数排序需要增加n+2radix个附加链接指针。\n基数排序是稳定的排序方法。\n七、各种排序方法比较\n注意：在插入和选择排序中，若初始数据基本正序，则选用插入排序。\n1.时间性能\n（1）\n时间复杂度为 O(nlogn)：快速排序、堆排序和归并排序\n时间复杂度为 O(n^2)：直接插入排序、冒泡排序、简单选择排序\n时间复杂度为 O(n): 基数排序\n（2）当待排记录序列按关键字顺序有序时\n直接插入排序和起泡排序能达到O(n)的时间复杂度；\n快速排序的时间性能蜕化为O(n^2) 。\n（3）简单选择排序、堆排序和归并排序的时间性能不随记录序列中关键字的分布而改变。\n2.空间性能\n（1）指的是排序过程中所需的辅助空间大小\n（2）所有的简单排序方法(包括：直接插入、起泡和简单选择) 和堆排序的空间复杂度为O(1)\n（3）快速排序为O(logn)，为递归程序执行过程中，栈所需的辅助空间；\n（4）归并排序所需辅助空间最多，其空间复杂度为 O(n);\n（5）链式基数排序需附设队列首尾指针，则空间复杂度为 O(rd)。\n3.排序方法的稳定性能\n口诀：考试情绪不稳定，就快些选堆朋友吧！\n（不稳定：快-&gt;快速排序，些-&gt;希尔排序，选-&gt;直接选择排序，堆-&gt;堆排序）\n（1）稳定的排序方法指的是，对于两个关键字相等的记录，它们在序列中的相对位置，在排序之前和经过排序之后，没有改变。\n\n（2） 当对多关键字的记录序列进行LSD方法排序时，必须采用稳定的排序方法。\n（3）对于不稳定的排序方法，只要能举出一个实例说明即可。\n（4）快速排序、堆排序和希尔排序是不稳定的排序方法。\n（5）所有时间复杂度为O(n^2) 的简单排序算法都是稳定的（直接选择排序算法除外）。\n（6）归并排序和基数排序是稳定的。\n所有排序整理：\n\neg)\n","categories":["笔记"]},{"title":"关于Jupyter汉化问题","url":"/Arknight-notes/posts/26795.html","content":"解决新版Jupyter notebook(v7.0.0及以上)汉化、默认保存路径等问题一. Jupyter notebook v7.0.0及以上汉化注意！在环境变量中添加如下用户变量仅适用于Jupyter v6及以下版本，不再适用于Jupyter v7Jupyter v7汉化方法如下\n1.打开命令行或者Anaconda Prompt，运行如下代码\npip install jupyterlab-language-pack-zh-CN\n\n2.运行Jupyter notebook，选择settings中的Language，替换中文\n二. 修改Jupyter notebook默认保存路径这里先介绍一种万能（不嫌麻烦）的方法1.打开命令行或者Anaconda Prompt，运行如下代码，其中D:\\JupyterWorkspace可以修改成你想要Jupyter保存的任意路径\njupyter notebook D:\\JupyterWorkspace\n\n这种方法的优点是很灵活缺点是每次启动都需要用命令行或者Anaconda Prompt\n下面介绍一种一本万利（fu za）的方法1.打开命令行或者Anaconda Prompt，运行如下代码\njupyter notebook --generate-config\n\n2.运行后会提示创建完jupyter_notebook_config.py文件，以及它所在的路径，我们直接复制路径找到这个.py文件3.用记事本打开它，CTRL+F查找notebook_dir，会搜索到这一行（适用旧版）3.用记事本打开它，CTRL+F查找root_dir，会搜索到这一行（适用新版）\n\n#c.NotebookApp.notebook_dir &#x3D; ‘path’ # 旧版查找这一行#c.ServerApp.root_dir &#x3D; ‘path’ # 更正，最新版应该查找这一行\n\n有些电脑搜到的可能是#c.ServerApp.notebook_dir &#x3D; ‘path’，不过没什么影响4.将path替换成自己想要保存的路径，直接复制文件夹路径的话一定要将 \\ 改成 &#x2F;&#x2F; ，并将这一行前面的#去掉**，保存文件5.右键Jupyter notebook选择属性，按下图设置即可a.png)\n"},{"title":"高代知识点全汇总","url":"/Arknight-notes/posts/16207.html","content":" folding cyan open, CSDN上的一些知识点合集（点击折叠） \n第一章——矩阵及初等变换§1.1. 矩阵及其运算\n线性代数学习笔记——第一讲——线性代数课程绪论\n线性代数学习笔记——第二讲——矩阵的定义及示例\n线性代数学习笔记——第三讲——矩阵加法及数乘\n线性代数学习笔记——第四讲——矩阵乘法的定义\n线性代数学习笔记——第五讲——矩阵乘法的性质\n线性代数学习笔记——第六讲——矩阵的转置§1.2. 高斯消元法与矩阵的初等变换\n线性代数学习笔记——第八讲——矩阵的初等变换\n线性代数学习笔记——第九讲——初等矩阵\n§1.3. 逆矩阵\n线性代数学习笔记——第十讲——逆矩阵的定义\n线性代数学习笔记——第十一讲——逆矩阵的计算（利用初等变换求逆矩阵）\n线性代数学习笔记——第十二讲——求解矩阵方程§1.4. 分块矩阵\n线性代数学习笔记——第七讲——分块矩阵\n第二章——行列式§2.1. n阶行列式的定义\n线性代数学习笔记——第十三讲——行列式的定义\n§2.2. n阶行列式的性质\n线性代数学习笔记——第十四讲——行列式的性质§2.3. Laplace定理\n线性代数学习笔记——第十五讲——行列式按行（列）展开\n线性代数学习笔记——第十六讲——行列式的计算\n线性代数学习笔记——第十七讲——伴随矩阵与逆矩阵\n线性代数学习笔记——第十八讲——抽象矩阵的可逆性§2.4. Cramer法则\n线性代数学习笔记——第十九讲——克拉默法则§2.5. 矩阵的秩\n线性代数学习笔记——第二十讲——矩阵秩的定义、\n线性代数学习笔记——第二十一讲——矩阵秩的等式\n 线性代数学习笔记——第二十二讲——矩阵秩的不等式\n第三章——几何空间§3.1. 空间直角坐标系与向量\n线性代数学习笔记——第二十三讲——空间直角坐标系\n线性代数学习笔记——第二十四讲——向量及其线性运算\n线性代数学习笔记——第二十五讲——向量在轴上的投影\n 线性代数学习笔记——第二十六讲——向量线性运算的几何意义\n线性代数学习笔记——第二十七讲——向量的方向余弦§3.2. 向量的乘法\n线性代数学习笔记——第二十八讲——向量内积的概念与性质\n线性代数学习笔记——第二十九讲——向量内积的坐标形式\n线性代数学习笔记——第三十讲——向量外积的概念与性质\n线性代数学习笔记——第三十一讲——向量外积的坐标形式\n线性代数学习笔记——第三十二讲——向量混合积的概念与性质\n线性代数学习笔记——第三十三讲——向量混合积的几何意义\n第四章——n维向量空间§4.1. n维向量空间的概念\n线性代数学习笔记——第四十讲——n维向量空间的概念\n线性代数学习笔记——第四十一讲——n维向量空间的子空间§4.2. 向量组的线性相关性\n线性代数学习笔记——第四十二讲——向量组的线性组合\n线性代数学习笔记——第四十三讲——向量组之间的线性表出\n线性代数学习笔记——第四十四讲——线性相关性的概念\n线性代数学习笔记——第四十五讲——线性相关性的判定\n线性代数学习笔记——第四十六讲——线性相关基本定理§4.3. 向量组的秩与最大无关组\n线性代数学习笔记——第四十七讲——向量组的秩与最大无关组的概念\n线性代数学习笔记——第四十八讲——矩阵的列秩和行秩\n线性代数学习笔记——第四十九讲——向量组之间的线性表出和秩\n线性代数学习笔记——第五十讲——最大无关组的性质和等价叙述§4.4. 线性方程组解的结构\n线性代数学习笔记——第五十一讲——n维向量空间的基、维数与坐标\n线性代数学习笔记——第五十二讲——齐次方程组解的性质和基础解系\n线性代数学习笔记——第五十三讲——齐次方程组求解实例\n线性代数学习笔记——第五十四讲——非齐次方程组解的性质\n线性代数学习笔记——第五十五讲——非齐次方程组求解实例\n第五章——特征值与特征向量5.1 特征值与特征向量的概念与计算\n线性代数学习笔记——第五十六讲——特征值及特征向量的定义\n线性代数学习笔记——第五十七讲——特征子空间\n线性代数学习笔记——第五十八讲——特征值与特征向量的判定\n线性代数学习笔记——第五十九讲——特征值与特征向量的计算\n 线性代数学习笔记——第六十讲——特征多项式\n线性代数学习笔记——第六十一讲——矩阵函数、逆矩阵、伴随矩阵的特征值与特征向量§5.2 矩阵的相似对角化\n线性代数学习笔记——第六十二讲——矩阵的相似对角化引例\n线性代数学习笔记——第六十三讲——相似的定义与性质\n线性代数学习笔记——第六十四讲——相似对角化的判定（1）\n线性代数学习笔记——第六十五讲——相似对角化的判定（2）\n线性代数学习笔记——第六十六讲——矩阵方幂的计算\n§5.3 n维向量空间的正交性\n线性代数学习笔记——第六十七讲——向量的内积\n线性代数学习笔记——第六十八讲——柯西—施瓦兹（Cauchy-Schwarz）不等式\n线性代数学习笔记——第六十九讲——正交向量组与标准正交基\n线性代数学习笔记——第七十讲——格拉姆—施密特（Gram-Schmidt）正交化方法\n线性代数学习笔记——第七十一讲——正交矩阵\n线性代数学习笔记——第七十二讲——共轭矩阵\n§5.4实对称矩阵的相似对角化\n线性代数学习笔记——第七十三讲——实对称矩阵的特征值与特征向量\n线性代数学习笔记——第七十四讲——实对称矩阵的相似对角化\n第六章——二次型与二次曲面§6.1.实二次型\n线性代数学习笔记——第七十五讲——二次型及其矩阵表示\n线性代数学习笔记——第七十六讲——矩阵的合同\n线性代数学习笔记——第七十七讲——用配方法化二次型为标准型\n线性代数学习笔记——第七十八讲——用正交变换化二次型为标准型§6.2. 正定二次型\n线性代数学习笔记——第七十九讲——正定二次型的概念\n线性代数学习笔记——第八十讲——正定二次型的性质（1）\n线性代数学习笔记——第八十一讲——正定二次型的性质（2）\n线性代数学习笔记——第八十二讲——二次型的其它类型\n endfolding \n一些总结，可能较零碎。\n\n本节是线代某些知识点总结，可能较零碎。\n对于简单的知识点，例如“两行对应成比例，行列式为0”就不讲了。暂时不举例题，有时间会继续补充！\n一.初等行&#x2F;列变换1.计算行列式时，行列变换都可因为，所以不论动行&#x2F;列都是等价的。\n\n变换规则：\n1.“倍乘”：行列式的某行(列)乘某个元素k。相应的，若行列式中某行(列)元素有公因子k(k≠0)，则k可提到行列式外面，即:\n\n2.”互换”：行列式中两行(列)互换，行列式变号。\n3.“倍加”：某行(列)的k倍加到另一行(列)，行列式不变。\n\n2.求矩阵的秩时，行列变换都可因为初等变换不改变某个矩阵非零子式的最高阶数，秩指的就是非零子式的最高阶数。\n\n初等变换的规则：\n1.”倍乘”：一个非零常数乘矩阵矩阵的某一行(列)。\n2.”互换”：互换矩阵中某两行(列)的位置。\n3.”倍加”：将矩阵的某一行(列)的k倍加到令一行(列)。\n注意：\n某矩阵乘元素k，是矩阵中的每个元素都成k，要与行列式区分。\n也就是。\n\n3.解线性方程组时，仅能使用初等行变换因为矩阵的每一种初等行变换都对应着线性方程组的同解变换，而作列变换会改变原来的方程。\n\n**4.**判定解的情况，单纯求r(A),r(A,b)的过程行列变换都可注：将r(A,b)化行阶梯求秩时，往往我们需要同时得到r(A)，如果想用列变换的话，只能对A单独列变换，千万不要将b列和A的列混合运算，这样r(A)就不准了。(但r(A,b)是准的)。\n但是，如果涉及到求通解或唯一解，那么就只能做行变换化行阶梯了，所以建议一开始就只做行变换。\n\n总结：求解的过程，就只进行初等行变换化行阶梯求秩，并且顺势化为行最简型求解**。**\n\n5.求向量组极大无关组、线性表出关系，则仅行变换因为初等行变换不改变列向量组的线性表出关系。例如下图，矩阵中，![\\beta_{3}&#x3D;\\beta_{2} +\\beta_{1}](https://latex.csdn.net/eq?\\beta_{3}%3D\\beta_{2} &plus;\\beta_{1})，矩阵同样有这样的关系。\n\n6.求向量组的秩时，行列变换都可求向量组的秩，其实最后会转化为求矩阵的秩，原理就是**”矩阵的秩&#x3D;行向量组的秩&#x3D;列向量组的秩”，**所以求向量组的秩也是行列变换都可。\n\n但是一般求向量组的秩后面会继续求解极大无关组&#x2F;线性表出关系，这时只能做行变换，所以还是建议从开头就只使用行变换。\n7.求特征值时，行列变换都可因为特征多项式本质上是行列式，求行列式时，行列都可以换。\n\n8.求特征向量时，仅做行变换因为求特征向量时，本质是在解线性方程组，只能进行初等行变换。\n\n9.求逆矩阵时，对(A,E)仅做初等行变换因为以A−1𝐴−1左乘A得到E，以A−1𝐴−1左乘E得到A−1𝐴−1，以A−1𝐴−1左乘的过程就是做初等行变换的过程。\n\n所以怎么体现A和E做了完全一样的A−1𝐴−1所带来的初等行变换，就是将A，E横着拼在一起，此时做的初等行变换就是同步的了。\n\n总结：\n除了① 求行列式的值（求特征值本质上就是求行列式的值）和 ② 单纯求秩，行列变换都可，其余情况通通只做行变换。\n\n二.要牢记先写那么多，后面有再补充：\n\n一些推导：\n\n对于AB ≠ BA的补充：\n\n\n1.矩阵的逆\n\n推导如下：\n\n初等矩阵的逆：\n2.矩阵的伴随\n\n三.某某子式1.余子式在n阶行列式中，去掉元素a所在的第i行、第j列元素，由剩下的元素按原来的位置与顺序组成的n-1阶行列式称为元素a的余子式，记作Mij𝑀𝑖𝑗。\n2.代数余子式余子式Mij𝑀𝑖𝑗乘(−1)i+j(−1)𝑖+𝑗后称为a的代数余子式，记作AAij𝐴𝑖𝑗\n\n3.k阶子式给定一个矩阵，任取k行，任取k 列，共k2𝑘2个数构成的行列式，出现在矩阵的秩中，定义如下：\n设A是mxn矩阵，则若存在k阶子式不为零，而任意k+1阶子式(如果有的话)全为零，则r(A)&#x3D;k，且若A为nxn矩阵，则：\n\n4.k阶主子式指在行列式中选k行k列，但要求行和列的下标相同。如：行为r1、r2、r3，列必须为c1、c2、c3；行为r2、r3、r5，列必须为c2、c3、c5。因此，k阶主子式不唯一。\n这在矩阵相似会用到，下面会讲。\n5.顺序主子式顺序主子式是在主子式上再加限定，顺序主子式是由 1k 行和 1k 列所确定的子式。\n\n例如：\n1阶时：取第1行，第1列\n2阶时：取第1、2行，第1、2列\n3阶时：取第1、2、3行，第1、2、3列\n4阶时：取第1、2、3、4行，第1、2、3、4列\n实际上，主子式的主对角线元素是原 n 阶行列式的主对角线元素的一部分，且顺序相同。\n所以k 阶主子式是不唯一的，而 k 阶顺序主子式是唯一的。\n\n用在判断二次型正定上，下面会讲。\n四.矩阵的秩 ① 0 &lt;&#x3D; r(A) &lt;&#x3D; min{m,n}\n② r(kA)&#x3D;r(A)(k ≠ 0)\n③ r(AB) &lt;&#x3D; min{r(A),r(B)}\n④ r(A+B) &lt;&#x3D;r(A)+r(B)\n⑤ \n\nr(A)&#x3D;n-1,r(A*)&#x3D;1的证明：\n\n进而可得出一个重要结论：\n\n********************A************m****∗****n********************B************n****∗****s**************&#x3D;****0************𝐴𝑚∗𝑛𝐵𝑛∗𝑠&#x3D;0******，则r(A)+r(B)&lt;&#x3D;n****\n\n所以，看到A*B就要想到两个结论：\n\n⑥ 设A是m*n矩阵，P,Q分别是m阶，n阶可逆矩阵，则\n\nr(A)&#x3D;r(PA)&#x3D;r(AQ)&#x3D;r(PAQ)\n\n⑦ r(A)&#x3D;r(AT)𝑟(𝐴𝑇)&#x3D;r(AAT𝐴𝐴𝑇)&#x3D;r(ATA𝐴𝑇𝐴)\n关于⑤的例题：\n\n为什么Ax&#x3D;b有n-r+1个线性无关的解：\n\n五.常用特征值与特征向量\n注意这样一道例题：\n\n\n\n\n关于特征值的一些提示：\n\n六.矩阵，向量组，方程组矩阵，向量组\n\n① 向量组是由有限个相同维数的行向量或者列向量组成，其中向量是由n个实数组成的有序数组,是一个n1的矩阵(n维列向量)或是一个1n的矩阵(n维行向量)。\n ② 矩阵是由m*n个数排列成m行n列的数表。\n一个向量组可以看作是一个矩阵的列（或行）向量集合。如果一个矩阵有n列，那么这n列就可以看作是一个由n个向量组成的向量组。反过来，一个矩阵也可以看作是由其列（或行）向量组成的向量组。\n\n1.怎么判断两个矩阵等价\n矩阵等价的前提：A与B是****同型****矩阵，即A,B行数，列数相同\n矩阵等价的充要条件：\n① r(A)&#x3D;r(B)\n② PAQ&#x3D;B，P,Q可逆\n\n2.怎么判断两个向量组是等价向量组\n向量组等价的前提：A，B矩阵****同维****\n若r( Ⅰ )&#x3D;r(α1,α2,α3,α4𝛼1,𝛼2,𝛼3,𝛼4….) r(Ⅱ)&#x3D;r(β1,β2,β3,β4𝛽1,𝛽2,𝛽3,𝛽4….)    \n向量组等价的充要条件：① r(Ⅰ)&#x3D;r(Ⅱ)，且(Ⅰ)可由(Ⅱ)线性表出（单向表出即可）\n② r(Ⅱ)&#x3D;r(Ⅰ)，且(Ⅱ)可由(Ⅰ)线性表出（单向表出即可）\n③ r(α1,α2,α3,α4𝛼1,𝛼2,𝛼3,𝛼4….) &#x3D;r(β1,β2,β3,β4𝛽1,𝛽2,𝛽3,𝛽4….) &#x3D;r(α1,α2,α3,α4𝛼1,𝛼2,𝛼3,𝛼4…,β1,β2,β3,β4𝛽1,𝛽2,𝛽3,𝛽4…)，即\nr(Ⅰ)&#x3D;r(Ⅱ)&#x3D;r(Ⅰ，Ⅱ)\n④ Ⅰ和Ⅱ能够相互线性表示。\n\n\n总结：① 两个矩阵A与B等价指的是A可以通过有限次初等变换变成B。两个不同型矩阵是不可能等价乡② 两个向量组等价只指的是它们能够互相线性表示，它们各自所含向量的个数可能是不一样的。\n\n例题：\n\n\nD.即使Ⅰ 和 Ⅱ 同为n维向量组，但是s与t的关系未知，也就是行数相等，列数未知，所以A，B两个矩阵可能不同型，不能等价。\nB.(Ⅰ)可由（Ⅱ）表示，缺少其他条件，如果① 加上(Ⅱ)可由(Ⅰ)线性表出 或者② r(Ⅰ)&#x3D;r(Ⅱ)就对了\nC正确\nD r(A)&#x3D;r(B)，只能推出两个向量组秩相同，缺少其他条件，如果加上① 加上(Ⅱ)可由(Ⅰ)线性表出 或者②加上(Ⅰ )可由(Ⅱ)线性表出或者③ r(Ⅰ)&#x3D;r(Ⅱ)&#x3D;r(Ⅰ，Ⅱ)，就对了。\n\n3.矩阵和向量等价的比较\n例题：\n\nA.(α1,α2,α3,0𝛼1,𝛼2,𝛼3,0)能与(α1,α2,α3𝛼1,𝛼2,𝛼3)相互线性表示，但是(α1,α2,α3,0𝛼1,𝛼2,𝛼3,0)不是Ax&#x3D;0的基础解系\nB.基础解系一定是线性无关的，但是B选项3个向量是线性相关的（3个向量相加&#x3D;0）\nC.像上面举的例子一样，α1α2𝛼1𝛼2，β1β2𝛽1𝛽2等秩，但是α1α2𝛼1𝛼2与β1β2𝛽1𝛽2不能相互线性表示。\nD.\n在(α1,α2,α3𝛼1,𝛼2,𝛼3)的右边乘可逆矩阵，不改变原来矩阵的秩，且(β1,β2,β3𝛽1,𝛽2,𝛽3)与(α1,α2,α3𝛼1,𝛼2,𝛼3)能相互线性表示\n所以，求Ax&#x3D;0的另一个基础解析，需要满足与(*******************α********1**********,**********α********2**********,**********α********3******************𝛼1,𝛼2,𝛼3*****)等价且等秩。\n\n4.同解方程组若两个方程组Am∗nx&#x3D;0𝐴𝑚∗𝑛𝑥&#x3D;0与Bs∗nx&#x3D;0𝐵𝑠∗𝑛𝑥&#x3D;0有完全相同的解，则称它们为同解方程组\n\n充要条件：\n① Ax&#x3D;0的解满足Bx&#x3D;0，且Bx&#x3D;0的解满足Ax&#x3D;0(互相把解代入求出结果即可)\n② r(A)&#x3D;r(B)，且Ax&#x3D;0的解满足Bx&#x3D;0(或Bx&#x3D;0的解满足Ax&#x3D;0)\n③ r(A)&#x3D;r(B)&#x3D;r([AB][𝐴𝐵])(三秩相同)\n\n例1：\n\n例2：\n\n例3：\n\n七.齐次线性方程组和非齐次线性方程组\n齐次线性方程组有解的条件：\n① r(A)&#x3D;n时，方程组有唯一零解。\n② r(A)&#x3D;r&lt;n时，方程组有非零解（无穷多解），且有n-r个线性无关解\n齐次方程组其实就是解和系数的正交，例如，给你一个条件：\nα1&#x3D;2α2+α3𝛼1&#x3D;2𝛼2+𝛼3—-&gt;α1−2α2−α3+0α4&#x3D;0𝛼1−2𝛼2−𝛼3+0𝛼4&#x3D;0\n\n则(1 -2 -1 0)就是齐次方程组的基础解系\n\n\n非齐次线性无关组有解的条件：\n① 若r(4)≠r([A,b])，则方程组无解；② 若r(A)&#x3D;r([A,b])&#x3D;n，则方程组有唯一解；③ r(A)&#x3D;r([A,b])&#x3D;r&lt;n，则方程组有无穷多解。\n\n\n非齐次方程组的通解的求法：\n①求Ax&#x3D;0的解\n② 求Ax&#x3D;b的一个特解\n③ 非齐次方程组的通解&#x3D;齐次方程组的解+一个非齐次的特解\n\n\n\n如果A行满秩，则r(A)&#x3D;r(A|b)，那么方程组一定有解。\n如果A列满秩，则r(A)与r(A|b)的关系不确定：\n① r(A)&lt;r(A|b)，则无解\n② r(A)&#x3D;r(A|b)&lt;n，有无穷多解\n③ r(A)&#x3D;r(A|b)&#x3D;n，有唯一解\n\n非齐次方程组解的性质：\n\n若η1η2η3𝜂1𝜂2𝜂3是非齐次线性方程组Ax&#x3D;b的解，ξ𝜉是对应齐次方程组Ax&#x3D;0的解，则：(1) η1−η2𝜂1−𝜂2是Ax&#x3D;0的解；（2）kξ+η𝑘𝜉+𝜂是Ax&#x3D;b的解\n\n扩展：\n\n\n解释：\n1.p个解的任意组合，都是齐次线性方程组的解\n2.非齐次的解线性组合也能得到齐次线性方程组的解，但是需要满足k1+k2+…+kp&#x3D;0，例如，α1−α2𝛼1−𝛼2&#x3D;0(1-1&#x3D;0),α1−α2𝛼1−𝛼2就是齐次线性方程组的解。\n3.非齐次的解线性组合也能得到非齐次线性方程组的解，但是需要满足k1+k2+…+kp&#x3D;1，例如，(α1+α2)&#x2F;2(𝛼1+𝛼2)&#x2F;2，就是非齐次线性方程组的一个解。\n4.齐次线性方程组的解与非齐次线性方程组的解相加，得到的是非齐次线性方程组的解。\n5.r(A)&#x3D;r，A就有n-r个线性无关的解，而x1,x2,….xn−r𝑥𝑛−𝑟刚好是Ax&#x3D;0的n-r个线性无关解，所以\nk1x1+k2x2+….+kn−rxn−r𝑘𝑛−𝑟𝑥𝑛−𝑟是Ax&#x3D;0的解。\n\n例题：\n\n\nA.α1−α2𝛼1−𝛼2是组合系数是1-1&#x3D;0，α1−α2𝛼1−𝛼2是Ax&#x3D;0的解\nB.3α1−2α23𝛼1−2𝛼2是Ax&#x3D;b的解，C,D同理。\n\n八.对比记忆1.\n\n矩阵A的tr(A)：tra(A)&#x3D;矩阵A的迹&#x3D;对角线元素之和\n**2.**对于秩为1的n阶矩阵A或A&#x3D;αβT𝛼𝛽𝑇(或βTα𝛽𝑇𝛼)（a,β都是n维非零列向量），其特征值为λ1λ2λ3….λn−1𝜆1𝜆2𝜆3….𝜆𝑛−1&#x3D;0，λn&#x3D;∑ni&#x3D;1aii&#x3D;βTα𝜆𝑛&#x3D;∑𝑖&#x3D;1𝑛𝑎𝑖𝑖&#x3D;𝛽𝑇𝛼（或αTβ𝛼𝑇𝛽） \n\n3.\n\n例题1：\n\n例题2：\n\n九.相似与正交存在n阶可逆矩阵P，使得P−1AP&#x3D;B𝑃−1𝐴𝑃&#x3D;𝐵,则称A相似于B，记为A~B\n\n若A~B\n① |A|&#x3D;|B|\n② r(A)&#x3D;r(B)\n③ tr(A)&#x3D;tr(B)\n④ λA&#x3D;λB𝜆𝐴&#x3D;𝜆𝐵（|λE−A|&#x3D;|λE−B||𝜆𝐸−𝐴|&#x3D;|𝜆𝐸−𝐵|）\n⑤ r(λE−A)&#x3D;r(λE−B)𝑟(𝜆𝐸−𝐴)&#x3D;𝑟(𝜆𝐸−𝐵)\n*⑥ A，B各阶主子式之和分别相同*\n\n\n也就是说，A与B即使特征值相同，但也不一定相似。但是如果A，B都是实对称矩阵，那么相似，则一定特征值相同（实对称矩阵一定能相似对角化，特征值相同一定能相似于同一个对角矩阵，根据传递性A~B）。\n那么怎么判定矩阵相似呢？\n\n① 定义法\n存在n阶可逆矩阵P，使得P−1AP&#x3D;B𝑃−1𝐴𝑃&#x3D;𝐵\n② 传递法\nAΛΛ，ΛΛB，则A~B，其中ΛΛ为对角阵\n这就要说到矩阵的相似对角化\n\n矩阵可相似对角化的条件：\n\n充要条件：\n① n阶矩阵A可相似对角化↔有n个线性无关的特征向量。\n② n阶矩阵A可相似对角化↔A对应于每个k重特征值都有k个线性无关的特征向量\n必要条件：\n③ n阶矩阵A有n个不同特征值→A可相似对角化\n④ n阶矩阵为实对称矩阵→A可相似对角化\n\n对于矩阵相似对角化的步骤：\n\n① 求特征值\n② 求特征向量\n③ 正交化（如果需要的话），单位化η1η2η3….ηn𝜂1𝜂2𝜂3….𝜂𝑛\n④ 令Q&#x3D;[η1η2η3….ηn𝜂1𝜂2𝜂3….𝜂𝑛],则Q为正交矩阵，且Q−1AQ&#x3D;QTAQ&#x3D;Λ𝑄−1𝐴𝑄&#x3D;𝑄𝑇𝐴𝑄&#x3D;Λ\n\n上面提到了实对称矩阵，实对称矩阵就是组成A的元素都是实数。对于实对称矩阵（AT&#x3D;A𝐴𝑇&#x3D;𝐴）要记住：\n\n\n对于正交，你需要记住：① αTβ&#x3D;0𝛼𝑇𝛽&#x3D;0，则，是正交向量\n② 若满足ATA&#x3D;E𝐴𝑇𝐴&#x3D;𝐸，则A是正交矩阵\nATA&#x3D;E𝐴𝑇𝐴&#x3D;𝐸↔A−1&#x3D;AT𝐴−1&#x3D;𝐴𝑇\n\n例题：\n\n不可对角化的矩阵怎么判断相似：\n 例题：\n\n\n如果A与B相似，那么：\n对于任意实数k和整数n，有(A+kE)n(𝐴+𝑘𝐸)𝑛与(B+kE)n(𝐵+𝑘𝐸)𝑛相似\n对于上面这道题，取k&#x3D;-1，n&#x3D;1，判断哪两个矩阵相似。\n\n矩阵相似还可得出：\n\n① A~B，Ak&#x3D;Bk𝐴𝑘&#x3D;𝐵𝑘，f(A)&#x3D;f(B)\n② 若AB，且A可逆，则A−1𝐴−1B−1𝐵−1，f(A−1𝐴−1)&#x3D;f(B−1𝐵−1)\n③ 若AB，A∗𝐴∗B∗𝐵∗\n④ 若AB，AT𝐴𝑇BT𝐵𝑇\n\n\n注： \n十.合同设A，B为n阶矩阵，若存在可逆矩阵C，使得CTAC&#x3D;B𝐶𝑇𝐴𝐶&#x3D;𝐵，则称A与B合同，即A≅B𝐴≅𝐵。A与B合同，就是指同一个二次型在可逆线性变换下的两个不同状态的联系。\n\n\n\n**注：**由于我们已经规定，对称矩阵才是二次型矩阵，所以二次型矩阵都是对称矩阵，相应的和对称矩阵合同的矩阵也是对称矩阵。\n例题：\n\n\n\n\n十一.二次型关于二次型化标准型或规范型的方法：配方法，正交变化有总结如下：\n\n所以我们可以进一步得到\n等价，合同和相似的关系：\n**注：**相似一定合同的前提条件是A，B都是实对称矩阵\n\n例题：\n\n\n关于配方法和正交变换分别给一个例题：配方法：\n\n正交变换：\n\n\n① 若λ1&#x3D;λ2𝜆1&#x3D;𝜆2，那么两个同一特征值对应的特征向量需要正交化，如果本来就正交可以不做这一步，所以在计算特征值的时候，可以将两个特征向量写为正交的，这样就免去了施密特正交化，直接进入单位化即可。\n② λ1≠λ2≠λ3𝜆1≠𝜆2≠𝜆3，那么不用进行施密特正交，直接单位化即可。\n\n常见题型：\n\n\n这里记录一个例题：\n\n\n若二次型中只有混合项，没有平方项，要怎么做？\n\n十二.二次型正定\n二次型正定的充要条件：n元二次型f&#x3D;xTAx𝑓&#x3D;𝑥𝑇𝐴𝑥正定↔对任意x≠0，有xTAx𝑥𝑇𝐴𝑥&gt;0（定义）\n① ↔f的正惯性指数p&#x3D;n\n② ↔存在可逆矩阵D，使得A&#x3D;DTD𝐴&#x3D;𝐷𝑇𝐷\n③ ↔A≅E𝐴≅𝐸，A与E合同\n② ③推导：\n\n④↔A的特征值λ𝜆&gt;0\n⑤↔A的全部顺序主子式&gt;0\n二次型正定的必要条件：\n① aii𝑎𝑖𝑖&gt;0，对角线元素全部大于0\n② |A|&gt;0\n\n最好是使用充要条件① ④ ⑤判断二次型是否正定，如果非要用定义法，来看个例题：\n\n注意上题，不能直接将f判定为正定：\n因为将二次型化为标准型的过程一定要做可逆线性变换\n\n例题1：\n\n\n例题2：\n\n\n\n.png)\n","categories":["笔记"]},{"title":"自定义VSCode背景图片","url":"/Arknight-notes/posts/31443.html","content":"关于如何自定义VSCode背景图片1.以管理员身份运行VS Code，安装background插件\n2.打开setting，在搜索框中输入background，选择扩展中的plugin background，选择在setting.json中编辑\n3.在用户设置中输入以下代码，修改完后保存，会提示重启VS Code，点击确定后即可完成修改//background 的相关配置    &quot;update.enableWindowsBackgroundUpdates&quot;: true,    &quot;background.customImages&quot;: [        &quot;file:///F:/Picture/Yukino/vs_background.png&quot;//图片地址（支持http    ],    &quot;background.style&quot;: &#123;        &quot;content&quot;:&quot;&#x27;&#x27;&quot;,        &quot;pointer-events&quot;:&quot;none&quot;,        &quot;position&quot;:&quot;absolute&quot;,//图片位置        &quot;width&quot;:&quot;100%&quot;,        &quot;height&quot;:&quot;100%&quot;,        &quot;z-index&quot;:&quot;99999&quot;,        &quot;background.repeat&quot;:&quot;no-repeat&quot;,        &quot;background-size&quot;:&quot;25%,25%&quot;,//图片大小        &quot;opacity&quot;:0.2 //透明度    &#125;,    &quot;background.useFront&quot;: true,    &quot;background.useDefault&quot;: false,//是否使用默认图片\n\n\n效果如下：\n.webp)\n","categories":["随记"]},{"title":"制作自己的校园网路由器","url":"/Arknight-notes/posts/25450.html","content":"\n怎么制作自己的校园网路由器（广州大学版）\n\n2024年更\n庆已使用web端进行校园网认证，路由器已经不再需要使用插件登录模拟登录\n但是同时一个账户只能有一台设备通过web登录，包括无感登录的设备，即最多只有两台设备可以直接接入校园网\n而使用锐捷认证的不记在内，也就是说可以同时有3台设备直接接入校园网，如果带多台设备上课的话体验有比较大的提升\n对于多人使用的情况，使用插件登录也不会占用某人的校园网账号，导致某人无法使用校园网wifi，有利于宿舍和谐\n我现在是使用方式是在宿舍的电脑用web登录，在教学区通过手机热点让其他设备接入，勉强能用（校园网本来就烂，经过手机转发雪上加霜，导致远程桌面延时明显提升）\n最后，这项技术对于普通的同学意义已经不是很大了，但也算是10年代技术大佬为后人留下的丰碑吧\n\n庆用的是锐捷的系统，你能买到的锐捷校园网路由器都大同小异，直接购买即可\n此文主要是写给愿意折腾的同学，将我本人组all in one服务器踩到的一些坑分享给大家，如果你想用树莓派软路由、x86虚拟机软路由抑或是自行刷机，甚至是想做路由器赚钱，都可以参考此文\n不多bb，我们所要做的就是在路由器上安装一个插件，用这个插件客户端进行认证，以此来接入校园网\n\nhyrathb&#x2F;mentohust: mentohust加入v4支持 (github.com)\n和其算法开发的minieap\nupdateing&#x2F;minieap: 可扩展的 802.1x 客户端，带有锐捷 v3 (v4) 算法插件支持 (github.com)\nminieap庆内亲测可用，以下以minieap为例\n一、装系统主流的开源路由器系统为openwrt，各种插件也是基于此开发的，先给你的机子安装上openwrt，方法各异自行百度，也可以直接买刷好op的\n二、搞到插件openwrt是基于linux的，不同的处理器都可以安装openwrt，但编译好的固件只能用于一种架构的处理器，如果网上找不到，只能自行编译插件（编译环境的处理器架构和最终成品的处理器架构没关系）\n我们需要编译minieap-gzhu、luci-proto-minieap，前者为认证插件本体，后者为其界面，openwrt的软件包是ipk文件\n\n个人编译的x86架构插件，x86软路由或者x86虚拟机可直接用\n链接：https://pan.baidu.com/s/16GR_BS3LvcJf1Y4KcQuuDA提取码：6tmt\n本文参考 动手编译适合自己路由器的 ipk | 雪山深处 (talaxy.site) 另一位学长的教程\n\n0. 准备好魔法环境dddd\n1. 安装linux环境推荐使用wsl或者其他虚拟机（虚拟机网络请使用nat模式）方法自行百度\n1.5 推荐使用ssh控制linux用scp拷文件（直接在虚拟机钟使用图形化界面也不是不行）安装ssh服务\nsudo apt-get install openssh-server\n\n宿主机推荐使用winscp客户端连接虚拟机ssh\n2. 安装编译环境依赖终端钟敲入以下代码\nsudo apt-get updatesudo apt-get install git-core build-essential libssl-dev libncurses5-dev unzipgawk subversion mercurialsudo apt-get install ccache\n\n3. 下载openwrt sdk（openwrt编译工具）并解压推荐解压目录到~目录，否则有报错的可能，注意，不可使用root账户编译\ncd ~wget https://downloads.openwrt.org/releases/21.02.0/targets/x86/64/openwrt-sdk-21.02.0-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xzxz -dk openwrt-sdk-21.02.0-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xztar xvf openwrt-sdk-21.02.0-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar\n\n该命令目的在于把文件sdk文件解压到~&#x2F;目录，如果上述命令执行失败，可以手动将压缩包解压后上传linux\n4. 开始编译a. 编译minieap-gzhucd ~/openwrt-sdk-21.02.0-x86-64_gcc-8.4.0_musl.Linux-x86_64\n\n\n进入sdk目录下\ngit clone https://github.com/ysc3839/openwrt-minieap.git -b gzhu package/minieap\n\n\n将插件源码克隆到本地\nmake menuconfig\n\n\n进入编译菜单，依次选择 “Network” “minieap” “save” “OK” 然后退出到命令行\nmake package/minieap/compile V=s\n\n\n开始编译\nipk 文件就在 bin&#x2F;packages&#x2F;(处理器架构)&#x2F;base&#x2F;\nb. 编译luci-proto-minieapcd ~/openwrt-sdk-21.02.0-x86-64_gcc-8.4.0_musl.Linux-x86_64\n\n进入sdk目录下\n./scripts/feeds update luci./scripts/feeds install-a\n\n安装 luci feed\ngit clone https://github.com/ysc3839/luci-proto-minieap.git package/luci-proto-minieap\n\n将插件源码克隆到本地\nmake menuconfig\n\n进入编译菜单，依次选择依次选择 “LuCI” “Protocols” “luci-proto-minieap” “save” “OK” 然后退出\nmake package/luci-proto-minieap/compile V=s\n\n开始编译\nipk 文件就在 bin&#x2F;packages&#x2F;(处理器架构)&#x2F;base&#x2F;\n三、 安装插件将刚刚得到的ipk包传入openwrt系统中，如果你的openwrt安装了文件传输插件，那可以直接用，如果没有，也可以用ssh传上去，以下演示假设传到了根目录上\n\n菜单栏选择“系统”&gt;&gt; “软件包”（外观不同，但是选项应该是一样的）\n\n直接点击安装即可，如果没有文件管理插件或者是你的文件管理插件没有这个功能\n\n\n点击确认即可安装\n四、 使用插件\n点击“网络”&gt;&gt; “接口”\n\n选择“新接口”\n\n协议选择“MiniEAP client”，名字随便，接口选择你的wan口，每个接口对应一个物理接口或者虚拟接口，需要根据自己的实际情况选择，该接口要连接到宿舍校园网网口\n\n账户密码就是你校园网的，Packet plugins选我这个\n\n然后将DHCP type改成我这个\n不出意外的话就可以愉快使用了\n转自：怎么制作自己的校园网路由器（广州大学版） - carry blogavb6x)\n","categories":["笔记"],"tags":["校园网"]},{"title":"创建一个针对Ethereum网络的协议解包器","url":"/Arknight-notes/posts/57783.html","content":"Enabling security analysis and education of the Ethereum platform本篇论文旨在探讨如何通过创建一个Wireshark网络包解码器来分析和教育以太坊平台的安全性。使用了定制化的私人以太坊Docker网络来促进Go Ethereum执行客户端之间的通信，并使Wireshark解码器能够捕获实时网络数据。最后，作者还使用了解码器来比较DiscoveryV4和DiscoveryV5的区别，并跟踪RLPx协议中的交易在网络上的传输过程。本文的研究方法包括创建Wireshark解码器、使用定制化的私人以太坊Docker网络以及对比不同版本的DiscoveryV4和DiscoveryV5协议。最终结果表明，该解码器可以有效地帮助人们理解和分析以太坊平台的安全性和网络流量。 \n方法描述该论文提出了一种新的网络包解码器（dissector），用于分析以太坊DEVP2P协议套件中的数据包。该解码器能够解析UDP基的DiscoveryV4、DiscoveryV5以及RLPx协议，并支持其子协议ETH和SNAP的消息能力。这个解码器使用Wireshark作为平台来实现，通过拦截网络流量并提供实时视图，可以识别协议、解码数据、跟踪流和对话、计算统计信息等。\n方法改进传统的网络包解码器通常用于调试、协议分析、安全性和可扩展性分析以及教育目的。目前有两种已知的以太坊DEVP2P协议解码器：一个是基于Wireshark插件引擎使用LUA编程语言构建的；另一个是使用C编程语言编译Wireshark源代码而构建的。然而，这两种解码器都存在一些限制，只支持加密发现V4，而不支持在EIP-868中于2019年10月发布的新型数据包类型。此外，它们也不支持DiscoveryV5和RLPx及其任何子协议，如ETH和SNAP。\n这两个项目都已经被放弃，原因是复杂度高，需要社区完成这项工作。由于RLPx的数据包解码过程比较复杂，因为TCP连接是使用ECIES（椭圆曲线集成加密方案）加密的，因此需要私钥才能解密通信。私钥因素包括我们的私钥、节点的公钥以及一个随机生成的临时密钥。\n解决的问题该解码器解决了现有的解码器无法处理新型数据包类型的问题，同时也填补了DiscoveryV5和RLPx及其子协议的安全性和性能分析方面的空白。此外，该解码器还可以帮助证明其价值，为社区和教育者提供更深入的分析，包括安全性和性能差异的比较，以及交易和块传播等方面的研究。\n论文实验本文介绍了作者使用Wireshark创建一个针对Ethereum网络的协议解包器，并对不同协议进行了分析和展示。在实验中，作者构建了一个私有开发网络，并通过MetaMask连接了该网络上的账户，演示了如何在两个节点之间进行交易。以下是每个实验的详细介绍：\n\n实验目的：创建Wireshark解包器并分析不同协议\n在这个实验中，作者的主要目的是创建一个Wireshark解包器来解析Ethereum网络中的不同协议。这包括DiscoveryV4、DiscoveryV5和RLPx协议以及它们的子协议ETH和SNAP。作者还创建了一个名为PYDEVP2P的Python库作为后台支持，提供大部分解码、解密和数据布局工具，以帮助Wireshark显示数据包信息。\n\n实验步骤：构建私有开发网络并进行交易\n在这个实验中，作者构建了一个私有开发网络，其中包括一个Bootnode和三个节点。每个节点都运行在一个Docker容器中，并且使用GETH客户端。作者使用MetaMask连接到该网络，并从不同的账户向另一个账户发送了200个ETH。整个过程被记录下来并在后续章节中进行分析。\n\n实验结果：性能和安全性的分析\n在这个实验中，作者分析了DiscoveryV4和DiscoveryV5协议的性能和安全性，并比较了它们与RLPx协议的不同之处。此外，作者还对实际交易进行了详细的分析，以了解在网络层面上发生了什么。\n\n\n总的来说，本文旨在展示如何使用Wireshark创建一个用于Ethereum网络的协议解包器，并展示了如何在私有开发网络上进行交易。作者还对不同协议的性能和安全性进行了分析，以便更好地理解Ethereum网络的工作原理。\n\n\n总结该论文主要介绍了以太坊网络及其相关协议，并通过两个现有分解器的比较，探讨了如何使用分解器来解析网络数据包以及理解底层协议。该论文的优点包括：\n\n全面深入地介绍了以太坊网络及协议，包括公共和私人网络、节点类型、网络协议等。\n提供了两种现有的分解器的比较，帮助读者了解它们之间的差异和优缺点。\n论文作者在介绍过程中提供了大量的代码示例和详细的解释，使读者更容易理解和应用所学知识。\n\n方法创新点该论文的方法创新点在于，通过对已有分解器的比较，提出了一些改进和完善的想法，例如可以将ENRRequest和ENRResponse添加到C dissector中，以便更好地支持新版本的DiscoveryV4协议。此外，该论文还提出了一个基于用户界面的演示应用程序，可以帮助用户更直观地观察和理解以太坊网络中的数据传输过程。\n未来展望随着以太坊网络的发展和技术的进步，未来的展望包括：\n\n进一步完善已有的分解器，使其能够更好地支持新的协议和功能。\n开发更加高效和智能的分解器，能够自动识别和解析更多的数据包类型和协议。\n利用机器学习和人工智能技术，实现对以太坊网络数据的自动化分析和预测，为用户提供更好的服务和支持。\n\n\n附1：实现方式项目概述该项目通过构建一个自定义的 Docker 网络环境来模拟以太坊节点之间的通信，并使用 Wireshark 和自定义的 Lua 解析器插件来捕获和分析这些通信。具体来说，它包括以下组件：\n\nGo-Ethereum (Geth) 定制源代码：用于暴露私有会话密钥。\nDocker 环境：包含多个 Geth 节点和一个路由器容器，用于模拟小型私有以太坊网络。\nLua 解析器插件：用于在 Wireshark 中解剖 DEVP2P 协议的数据包。\nPYDEVP2P 库：用于 Python 和 Lua 之间的交互。\n\n操作与实现步骤1. 环境设置确保安装了必要的软件和库：\nsudo apt-get update &amp;&amp; sudo apt-get upgradesudo apt-get install lua5.2 liblua5.2-dev wireshark python3.10\n\n2. 设置 Lunatic-Python 桥接Lunatic-Python 是一个双向桥接库，允许 Lua 和 Python 之间的交互。\n# 克隆 Lunatic-Python 仓库git clone https://github.com/jmkemp20/lunatic-python.gitcd lunatic-python# 确保 Lua 5.3 已安装lua5.3# 查找 Python 版本ldconfig -p | grep python# 准备构建cmake -B./build -H. -DPYTHON_INCLUDE_DIR=/usr/include/python3.10 \\  -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.10.so# 构建cmake --build ./build# 复制生成的库文件到 Lua 目录sudo chmod +x build/bin/python.sosudo cp build/bin/python.so /usr/local/lib/lua/5.2/\n\n3. 克隆并安装 LUA Dissector 和 PYDEVP2P# 克隆 LUA Dissector 和 PYDEVP2Pgit clone https://github.com/jmkemp20/lua-devp2p-wireshark-dissector.gitgit clone https://github.com/jmkemp20/pydevp2p.git# 安装 PYDEVP2P PIP 包cd pydevp2ppip install -e .sudo pip install -e .# 创建 Wireshark 插件目录（如果不存在）mkdir -p ~/.local/lib/wireshark/plugins# 符号链接或复制 .lua 解析器文件（也可以直接复制到该目录sudo ln -s &lt;location_of_cloned_dissector&gt;/rlpx.lua ~/.local/lib/wireshark/plugins/rlpx.luasudo ln -s &lt;location_of_cloned_dissector&gt;/discovery.lua ~/.local/lib/wireshark/plugins/discovery.lua# 对于 root 用户（如果使用 sudo 运行 Wireshark）（也可以直接复制到该目录sudo mkdir -p /usr/local/lib/wireshark/pluginssudo ln -s &lt;location_of_cloned_dissector克隆的地址&gt;/rlpx.lua /usr/local/lib/wireshark/plugins/rlpx.luasudo ln -s &lt;location_of_cloned_dissector克隆的地址&gt;/discovery.lua /usr/local/lib/wireshark/plugins/discovery.lua\n\n\n\n\n使用本地 .pcapng 文件测试：\nwireshark-r final.pcapng\n\n这将运行 Wireshark 并加载捕获的 .pcapng 文件。您可以查看解剖后的 DEVP2P 数据包。\n\n实时捕获网络流量：\n\n启动 Wireshark 并选择适当的接口捕获数据包。\n观察和分析捕获的数据包，特别是 RLPx 握手和 DiscoveryV5 数据包。\n\n\n\n\n4. 构建 Docker 环境# 克隆 GETH-Docker 仓库git clone https://github.com/jmkemp20/geth-docker.gitcd geth-docker# 构建自定义 Docker 镜像./build-dockers.sh# 启动路由器容器docker-compose up -d bridge-router# 打开 Wireshark 并附加到 10.1.0.1 或任何 10.1.X.X 网络sudo wireshark# 启动每个 GETH 节点/客户端容器docker-compose up -d geth-ubuntu-bootnodedocker-compose up -d geth-client-1docker-compose up -d geth-client-2docker-compose up -d geth-client-3\n\n5.安装编译和运行自定义的 Go Ethereum 客户端：1. 克隆自定义的 Go Ethereum 源代码首先，你需要克隆自定义的 Go Ethereum 源代码仓库。\ngit clone https://github.com/jmkemp20/go-ethereum.git\n\n2. 安装 Geth 或所有 Go Ethereum 工具进入克隆的 go-ethereum 目录，并编译 geth 或所有工具。\n安装 Go 1.20确保你已经安装了 Go 1.20 或更高版本。如果没有，请按照以下步骤安装：\n# 下载 Go 1.20wget https://mirrors.aliyun.com/golang/go1.20.6.linux-amd64.tar.gz# 解压并安装sudo tar -C /usr/local -xzf go1.20.6.linux-amd64.tar.gz# 设置环境变量nano ~/.bashrc# 或者nano ~/.zshrc# 添加以下内容export GOROOT=/usr/local/goexport GOPATH=$HOME/goexport PATH=$GOPATH/bin:$GOROOT/bin:$PATH# 使配置生效source ~/.bashrc# 或者source ~/.zshrc# 验证 Go 版本go version\n\n编译 geth 或所有工具进入 go-ethereum 目录并编译 geth 或所有工具。\ncd go-ethereum# 清理 Go 模块缓存go clean -modcache# 更新 Go 模块go mod tidy# 编译 gethmake geth# 如果你想编译所有工具make all\n\n3. 运行 Geth编译完成后，你可以运行 geth。确保 geth 可执行文件在你的 PATH 中，或者直接在 go-ethereum/build/bin 目录下运行它。\n# 如果 geth 在 PATH 中geth# 如果 geth 不在 PATH 中./build/bin/geth\n\n成功安装并运行自定义的 Go Ethereum 客户端\n项目结构\nDockerfile：用于构建 Docker 镜像的配置文件。\ndocker-compose.yml：用于启动和管理 Docker 容器。\nlua-devp2p-wireshark-dissector：Lua 解析器插件，用于在 Wireshark 中解剖 DEVP2P 数据包。\npydevp2p：Python 库，用于处理以太坊 DEVP2P 协议中的 ECIES 和其他加密操作。\nlunatic-python：Lua 和 Python 之间的桥接库。\n\n总结通过上述步骤，设置并运行一个自定义的 Docker 环境来模拟以太坊节点之间的通信，并使用 Wireshark 和自定义的 Lua 解析器插件来捕获和分析这些通信。有助于进行安全分析和教育，深入理解以太坊网络的工作原理。\n附2：原文翻译（结论篇）6.1 引言和回顾本论文提出了一种为以太坊的 DEVP2P 点对点协议套件创建 Wireshark 剖析器的新方法，包括带有 ETH 和 SNAP 子协议的 DiscoveryV4、DiscoveryV5 和 RLPx。正如我们所讨论的，以太坊网络促进了以太坊网络节点之间的相互通信，为去中心化的应用程序和账户提供了便利。因此，为了满足创建支持 RLP 解码和 ECIES 解密的 Wireshark 剖析器插件的要求，涵盖了许多贡献。首先，讨论了利用自定义的 Go Ethereum 源创建一个私有的 Ethereum docker 网络。接下来，介绍了 LUA Wireshark 插件的实际实现;首先是支持 DEVP2P 发现协议的 “discovery.lua” 插件，然后是 “rlpx.lua”，它允许剖析 RLPx，包括 ETH 和 SNAP 子协议。然后，我们深入研究了 PYDEVP2P，这是一个基于 python 的最小第三方依赖库，为 RLP 解码、ECIES 解密和解剖辅助函数提供了工具。最后，利用剖析器和PYDEVP2P分析了椭圆曲线数字签名算法 （ECDSA） 椭圆曲线 Diffie-Hellman 背后的技术细节。\nWireshark 是一种广泛使用的网络分析工具，允许用户检查和解码网络数据包。但是，Wireshark 本身不支持以太坊的 DEVP2P 协议，这限制了研究人员和开发人员监控和理解以太坊节点行为的能力。最重要的是，Wireshark 支持使用解剖插件，这些插件是 Wireshark 解剖功能的插件。正如我们所讨论的，当前由 BCSEC Org 和 ConsenSys 提供的两个剖析器插件并不完全支持 DiscoveryV4 的最新消息结构，并且对 DiscoveryV5 和 RLPx 的支持为零。为了解决这一差距，本论文在 LUA 中开发了一个自定义 Wireshark 剖析器插件，该插件可以以用户友好的格式解析和显示 DEVP2P 数据包。该插件利用 PYDEVP2P，这是一个基于 python 的库，用于协助解码 RLP（递归长度前缀）和解密 DEVP2P 协议使用的 ECIES（椭圆曲线集成加密方案）。\n此外，本论文还创建了一个具有自定义 Go Ethereum 映像的私有 docker 网络，该网络可生成真实的 DEVP2P 流量，用于开发、测试和分析目的。使用这个剖析器插件和环境，本论文演示了 Wireshark 剖析器如何分析 DEVP2P 数据包流的各个方面，例如跟踪交易在整个网络中的传播、分析 DiscoveryV4 椭圆曲线数字签名算法 （ECDSA） 和 DiscoveryV5 对椭圆曲线 Diffie-Hellman （ECDH） 的使用。本论文为研究以太坊的点对点通信层和增强去中心化应用程序的透明度和安全性提供了实用工具，为区块链研究领域、以太坊社区成员和教育工作者做出了贡献。\n6.2 解剖和分析结果本论文介绍了 Wireshark 剖析器插件的设计和实现，用于剖析 DEVP2P 的 DiscoveryV4、DiscoveryV5 和 RLPx 协议。剖析器插件可以解码和显示以太坊节点之间交换的各种消息，这些消息要么是实时网络，要么是事后捕获数据包。此外，剖析器插件还支持使用从握手过程中派生的会话密钥来解码 DiscoveryV5 和 RLPx 消息。\n创建剖析器的过程和剖析器的众多功能在第 4 章中展示。具体来说，DEVP2P 剖析器支持在 DiscoveryV4 中找到的所有消息，如第 4.3.1 章所述，包括 Ping、Pong、FindNode、Neighbors、ENRRequest 和 ENRResponse。由于新的“enr-seq”字段，以前的剖析器（包括 BSECORG 的 LUA 剖析器插件和 ConsenSys 的 C 剖析器）无法完全剖析 Ping 和 Pong 消息的较新消息架构。这些以前的剖析器也不支持 EIP-868 中描述的最新 ENRRequest 和 ENRResponse 数据包，这些数据包已于 2019 年 10 月添加到协议中。\n接下来，新的剖析器支持第 4.3.2 章中讨论的 DiscoveryV5 的最新实现，包括 Ping、Pong、FindNode、Nodes、TalkReq 和 TalkResp。以前的剖析器不支持此功能，因为协议的性质会混淆数据包标头信息和 ECDH 握手以交换会话密钥以进行加密通信。但是，这种新的 DEVP2P 剖析器提供了维护在网络上的已知节点之间创建的会话的所有功能，从而无缝解密和破译捕获的网络数据。\nDEVP2P 剖析器插件可以分析和破译 RLPx 促进的以太坊节点之间经过身份验证和加密的通信。这包括使用 AuthInit 和 AuthAck RLPx 消息在节点之间创建会话密钥的握手过程，然后是内置的 RLPx 功能“P2P”Hello 消息，如第 4.4 章所示。剖析器支持其他 RLPx P2P 消息、Ping、Pong 和 Disconnect。由于 RLPx 用作多种功能的 TCP 传输，因此剖析器可以解码、解密和剖析 RLPx 下的两个主要子协议或功能 ETH 和 SNAP。这些协议支持区块传播、链同步和交易，然后是状态管理和 SNAP 同步。剖析器支持 2 条 RLPx 握手消息、4 条 RLPx P2P 消息、13 条 ETH 功能消息和 6 条 SNAP 功能消息。\n关于区块链状态和交易的 Connected Peer 节点。剖析器还可以显示消息格式的详细信息，例如 RLP 编码和解码、数据包标头和尾部以及消息类型和内容。该工具允许轻松访问 DEVP2P 的内部工作原理，并为研究人员、一般区块链社区和类似领域的教育工作者提供帮助。\n6.3 限制与未来工作剖析器是对以太坊网络分析的新颖贡献，因为它是第一个在统一且用户友好的界面中剖析所有三种 DEVP2P 协议的工具。剖析器可以帮助研究人员和开发人员了解 Ethereum 网络的行为和性能，并识别和缓解潜在的安全威胁。剖析器还可以通过使椭圆曲线密码学在实际应用中更易于访问来帮助教育工作者，同时帮助开发和测试以太坊网络的新协议或功能，同时提供可靠的\n为未来改进和扩展对现有协议的支持奠定了基础。\n但是，剖析器也有一些局限性和缺点，必须在未来的工作中解决：\n剖析器需要自定义 Go Ethereum 源代码，其中包括每个节点在 RLPx 握手期间生成的随机私钥，用于会话密钥共享和后续数据包的加密。剖析器不支持使用官方 GETH 或 Ethereum 客户端进行 RLPx 剖读。\n剖析需要 Python 配合 PYDEVP2P 使用， 在幕后处理剖析、解码和解密的主要逻辑。这增加了剖析器设置和执行的复杂性和开销，需要安装 Python PIP 包的 PYDEVP2P 以及 LUA 和 Lunatic-Python 桥。\n剖析器存在不完整的消息错误，当某些消息大于特定大小时，会导致它们被截断或跳过。此错误会影响捕获握手数据包或格式错误的数据包时剖分结果的准确性和完整性。\n剖析器不会在 Wireshark 显示屏上以清晰的人类可读格式显示 DiscoveryV5 消息的未屏蔽“authdata”，其中包含节点 ID、签名和临时公钥等基本信息。\n随着以太坊及其底层网络的复杂性不断增长并随着时间的推移而发展，未来工作可能会有一些可能的改进或扩展：\n在权益证明环境中使用剖析器，查看权益证明共识算法网络中的执行客户端中使用了哪些 DEVP2P 协议和消息。看看哪些 DEVP2P RLPx 功能消息被新协议改编或未使用，以进行权益证明，这将是一件有趣的事情。\n剖析 LIBP2P 并将其与 DEVP2P 进行比较。LIBP2P 是以太坊共识客户端使用的另一个点对点网络堆栈。在功能、性能和安全性方面对 LIBP2P 和 DEVP2P 进行比较和对比会很有用。\n添加 LES、PIP、WIP 和其他 RLPx 子协议的剖析。剖析器目前仅支持 ETH 和 SNAP 子协议。这些其他子协议用于不同的目的，例如轻以太坊子协议 （LES） 支持、奇偶校验轻协议 （PIP） 支持和以太坊见证协议 （WIT）。剖析器也应该扩展以支持这些子协议。\n调查网络发现泄漏，这是 DiscoveryV4 中发现的问题。网络发现泄漏是一个问题，即为特定链&#x2F;网络 ID 设置的 Ethereum 节点会错误地通信并发现其他 Ethereum 网络上的节点。\n实施 DiscoveryV4 和 DiscoveryV5 拒绝服务 （DoS） 攻击。DiscoveryV4 协议容易受到拒绝服务 （DoS） 攻击，这些攻击可能会用虚假的 ping 或 pong 消息淹没节点。这些消息会消耗节点的带宽和处理资源，并可能阻止它们响应合法消息。剖析器可以通过捕获网络上的此类恶意数据包来帮助检测和监控此类攻击。\n实施 RLPx 已知明文攻击。RLPx 协议使用 AES-CTR 加密，每条消息使用固定的 IV（初始化向量）。这使得它容易受到已知的明文攻击，如果攻击者知道一些明文-密文对，该攻击可以恢复加密密钥。剖析器可以通过随机化每条消息的 IV 或使用不同的加密方案来帮助避免这种攻击。\n执行 Wireshark 统计分析。Wireshark 提供各种统计网络流量分析工具，例如图形、图表、表格、过滤器等。剖析器可以利用这些工具对 DEVP2P 协议进行更高级和全面的分析，例如吞吐量、延迟、数据包丢失、消息分发、节点行为等。\n6.4 最后的思考解剖器的设计、实现及其结果的分析证明了它对社区、教育工作者、开发者和研究者的有用性。LUA Wireshark 解析插件和 PYDEVP2P 库为教育工作者、研究人员及开发者提供了理解以太坊网络内部运作所需的所有工具。该解析器还允许可视化流行的密码学概念，利用椭圆曲线密码学（ECC），同时帮助理解递归长度前缀（RLP）编码的工作方式。在创建此解析器的过程中克服了许多障碍，无论是更新文档还是实现以太坊特有的ECIES技术细节。本文档中穿插的大多数技术细节直接来自以太坊DEVP2P GitHub规范页面以及最常用的执行客户端源代码Go Ethereum。因此，这些方法对于更广泛的以太坊社区成员、分析师尤其是教育者来说并不容易获得。\n本文讨论的贡献使得进入以太坊节点网络通信变得更加容易，并且克服了由大型区块链技术解决方案公司ConsenSys指出的一些障碍。这包括可以使用单个命令启动一个完整的私有以太坊网络的Go Ethereum Docker网络，随后是只需几个简单步骤即可安装的LUA Wireshark插件和PYDEVP2P库。正如所讨论的那样，PYDEVP2P库还提供了易于理解的椭圆曲线加密实现，让教育工作者和学生能够在一个实际环境中亲身体验并理解这些底层概念。\n本文档的主要目标是提供所有必要的工具来支持未来的改进，为教育者提供一种轻松访问的工具来展示ECIES密码技术，同时也为了安全分析师能够进一步增强点对点区块链网络的健壮性。\n。\n","categories":["笔记"]},{"title":"（旧）创建一个网络包解码器分析DEVP2P协议","url":"/Arknight-notes/posts/30370.html","content":"\n本项目最新版本\n link 本项目最新版本, https://zhongye1.github.io/posts/1104.html, https://pic1.zhimg.com/80/v2-593dd0a3b84d023b3827b97e81e0242a_720w.webp \n附注：此页面使用wsl构建不可行\n\n\n\n安装配置WSL2（ubuntu20.04）Windows Subsystem for Linux（简称WSL），Windows下的Linux子系统，是一个在Windows 10上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。它是由微软与Canonical公司合作开发，其目标是使纯正的Ubuntu、Debian等映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。\n1.安装Windows TerminalWindow Terminal 安装以及使用(2021最新) - 知乎\n一个目前在用的windows命令行工具\n可以直接从 Microsoft Store 下载安装，而且Github仓库上发布有内部版本。 \n2.安装wslWindows 10 安装配置WSL2（ubuntu20.04）教程 超详细_win10安装wsl2-CSDN博客\n对于windows10版本可以直接命令符安装\nwsl --install\n\n设置 WSL 开发环境见微软官方文档设置 WSL 开发环境 | Microsoft Learn完成后打开Windows Terminal找到：\n\n\n3.Docker 安装\nDocker -&gt; 虚拟化容器技术。Docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行环境，容器之间互相隔离。\n\n\n官网地址\n\n公共仓库\n\n安装文档\n\n下载Docker Desktop安装程序：\n\n访问Docker官网下载页面：https://www.docker.com/get-started/\n选择对应版本点击下载安装程序。\n没猜错的话应该被墙了可以找我要安装包\n\n\n\n\n\n运行安装程序：\n\n双击下载的Docker Desktop安装文件。\n在安装向导中，你可以根据个人喜好勾选是否希望建立Docker Desktop的快捷方式或者是否希望Docker Desktop随Windows启动等选项。\n\n\n完成安装并重启：\n\n完成安装向导后，重启计算机确保设置正确应用。\n\n\n启动Docker Desktop：\n\n在重启后，运行Docker Desktop。当它启动时，Docker图标会出现在系统托盘中。\n系统托盘中的Docker图标表明Docker正在运行，并可能需要一点时间来启动服务。\n电脑要开VM虚拟化\nWindows 10 |VMware开启虚拟化的最全面说明_vmware虚拟化引擎-CSDN博客\n开VM时BIOS不懂的不要瞎搞\n\n\n配置Docker设置：\n\n你可以右键点击系统托盘中的Docker图标，选择“Settings”来调整Docker的配置，如更改镜像存储位置、设置代理服务器等。\n\n\n\n国内网络环境拉不下镜像的话就配置别的源\n\n我用的这几个镜像站配置环境要慎重\n我的配置文件\n&#123;  &quot;builder&quot;: &#123;    &quot;gc&quot;: &#123;      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,      &quot;enabled&quot;: true    &#125;  &#125;,  &quot;experimental&quot;: false,  &quot;registry-mirrors&quot;: [    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://huecker.io&quot;,    &quot;https://dockerhub.timeweb.cloud&quot;,    &quot;https://noohub.ru&quot;  ]&#125;\n\n\n\n\n通过命令行界面测试Docker安装：\n\n打开命令提示符、Powershell或任何你喜欢的终端。\n输入命令 docker --version 来检查Docker版本，确保它已正确安装。\n运行 docker run hello-world 来下载一个测试镜像，并在容器中运行，这可以验证Docker Daemon是否已正确启动并且可以创建容器。\n\n\n\n环境安装准备材料\n\nLua-devp2p-wireshark-dissector: GitHub链接\nPYDEVP2P: GitHub链接\nLunatic-Python: GitHub链接\nGo-Ethereum: GitHub链接\nGETH-Docker: GitHub链接\n\n1 安装Wireshark和特定版本的LUAlinux的python版本要为3.10\nsudo apt-get update &amp;&amp; sudo apt-get upgradesudo apt-get install lua5.2 liblua5.2-dev wireshark python3.10\n\n2 更改权限并复制Lunatic Python LUA ⇔ Python桥接二进制文件python.so为文章最开始编译得来的\nsudo chmod +x python.socp python.so /usr/local/lib/lua/5.2/\n\n\n关于python.so是从哪来的：python在linux编译后的文件为.so这个由编译Lunatic-Python: GitHub链接得来不会编译的可以找我要我编译好的（\n如何编译见项目文档：\nLunatic Python 是一个双向桥接项目，它允许Python和Lua两种语言互相通信。这意味着你可以在Lua中调用Python代码，也可以在Python中调用Lua代码，甚至可以嵌套调用（如Lua中的Python再调用Lua）。这个项目的主要用途之一是为 LUA-devp2p-dissector 提供必要的工具，使其能够调用 pydevp2p 中的函数。\n项目起源\n这个项目是一个fork版本，原始项目来自 labix-lunatic-python。\n另一个相关的版本由 bastibe 维护。\n\n开始使用克隆仓库git clone https://github.com/jmkemp20/lunatic-python.git &amp;&amp; cd lunatic-python\n\n确保安装了LUA 5.3通过运行 lua5.3 来检查是否已经安装了正确的LUA版本\n查找你的Python版本ldconfig -p | grep python\n\n这条命令会列出系统中所有可用的Python库路径。你需要找到与你的Python版本相对应的路径。\n准备编译（构建）根据上一步输出的Python版本信息来配置CMake：\ncmake -B./build -H. -DPYTHON_INCLUDE_DIR=/usr/include/python3.10 \\  -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.10.so\n\n使用的是Python 3.10\n编译（构建）cmake --build ./build\n\n使用定位二进制文件构建完成后，你会在 build/bin/ 目录下找到两个重要的文件：\n\npython.so 用于在Lua中调用Python\nlua.so 用于在Python中调用Lua\n找不到直接搜\n\n\n然后把编译好的文件移到论文提到的目录下（见上文![pic](.&#x2F;C:&#x2F;Users&#x2F;Think&#x2F;Desktop&#x2F;大学项目其三&#x2F;环境安装&#x2F;Pasted image 20241014220542.png)\n3 克隆LUA解码器和PYDEVP2P项目git clone https://github.com/jmkemp20/lua-devp2p-wireshark-dissector.gitgit clone https://github.com/jmkemp20/pydevp2p.git\n\n4 从源代码安装PYDEVP2P PIP包cd pydevp2ppip install -e .sudo pip install -e .\n\n5 创建Wireshark插件目录（本地用户和root）mkdir -p ~/.local/lib/wireshark/pluginssudo mkdir -p /usr/local/lib/wireshark/plugins\n\nStep 6) 符号链接或复制.lua解码器文件到Wireshark插件目录ln -s &lt;location of cloned dissector&gt;/rlpx.lua ~/.local/lib/wireshark/plugins/rlpx.lualn -s &lt;location of cloned dissector&gt;/discovery.lua ~/.local/lib/wireshark/plugins/discovery.luasudo ln -s &lt;location of cloned dissector&gt;/rlpx.lua /usr/local/lib/wireshark/plugins/rlpx.luasudo ln -s &lt;location of cloned dissector&gt;/discovery.lua /usr/local/lib/wireshark/plugins/discovery.lua\n\n可以直接复制这些.lua文件而不是创建符号链接。终端里找不到文件用文件资源管理器搜\n\n好的，你提供的步骤是安装自定义的 Go Ethereum 客户端。以下是详细的步骤来从头开始安装和运行自定义的 Go Ethereum 客户端：\nLive GETH Docker StartupStep 1) 确保Docker和Docker Compose已安装并正在运行检查Docker版本：\ndocker --version\n\n\n检查Docker Compose版本：\ndocker-compose --version\n\n\nStep 2) 克隆GETH-Docker存储库git clone https://github.com/jmkemp20/geth-docker.gitcd geth-docker\n\nStep 3) 构建自定义docker镜像./build-dockers.sh\n\nStep 4) 启动路由器容器docker-compose up -d bridge-router\n\nStep 5) 打开Wireshark并连接到网络接口sudo wireshark\n\nStep 6) 依次启动每个GETH节点&#x2F;客户端容器docker-compose up -d geth-ubuntu-bootnodedocker-compose up -d geth-client-1docker-compose up -d geth-client-2docker-compose up -d geth-client-3\n\n\n\n\n接下来新开一个命令行窗口来做论文原文操作：\n7.5 Installing the Custom GO Ethereum Client from ScratchStep 1) 克隆自定义GO Ethereum源代码git clone https://github.com/jmkemp20/go-ethereum.git\n\nStep 2) 编译GETH或其他所有GO Ethereum工具编译GETH是个大坑，出问题的话可以看文档后面有讲\ncd go-ethereummake geth\n\nStep 3) 运行GETH文档是\ngeth\n\n就行，看终端geth编译完后的输出来定，我这边的是\n./build/bin/geth\n\n\n\n不出问题的话终端没报错这里就成功了（一般不太可能，出问题见下\n我的操作：\n编译geth1. 克隆自定义的 Go Ethereum 源代码克隆自定义的 Go Ethereum 源代码仓库。\ngit clone https://github.com/jmkemp20/go-ethereum.git\n\n2. 安装 Geth 或所有 Go Ethereum 工具进入克隆的 go-ethereum 目录，并编译 geth 或所有工具。\n安装 Go 1.20（版本好像会影响编译，翻了下issue，我当时用的1.20确保你已经安装了 Go 1.20 或更高版本。如果没有，请按照以下步骤安装：\n# 下载 Go 1.20wget https://mirrors.aliyun.com/golang/go1.20.6.linux-amd64.tar.gz# 解压并安装sudo tar -C /usr/local -xzf go1.20.6.linux-amd64.tar.gz# 设置环境变量nano ~/.bashrc# 或者nano ~/.zshrc# 添加以下内容export GOROOT=/usr/local/goexport GOPATH=$HOME/goexport PATH=$GOPATH/bin:$GOROOT/bin:$PATH# 使配置生效source ~/.bashrc# 或者source ~/.zshrc# 验证 Go 版本go version\n\n编译 geth 或所有工具进入 go-ethereum 目录并编译 geth 或所有工具。\ncd go-ethereum# 清理 Go 模块缓存go clean -modcache# 更新 Go 模块go mod tidy# 编译 gethmake geth# 如果你想编译所有工具make all\n\n如果没猜错的话国内网络环境go下载依赖会卡住卡在这里\n我看的教程\n解决 go get golang.org&#x2F;x 包失败\nGOPROXY我们知道从 Go 1.11 版本开始，官方支持了 go module 包依赖管理工具。其实还新增了 GOPROXY 环境变量。如果设置了该变量，下载源代码时将会通过这个环境变量设置的代理地址，而不再是以前的直接从代码库下载。这无疑对我等无法科学上网的开发良民来说是最大的福音。更可喜的是，goproxy.io 这个开源项目帮我们实现好了我们想要的。该项目允许开发者一键构建自己的 GOPROXY 代理服务。同时，也提供了公用的代理服务 https://goproxy.io，我们只需设置该环境变量即可正常下载被墙的源码包了：\n\nexport GOPROXY=https://goproxy.io\n\n也可以通过置空这个环境变量来关闭，export GOPROXY=。\n对于 Windows 用户，可以在 PowerShell 中设置：\n$env:GOPROXY = &quot;https://goproxy.io&quot;\n\n\n我这边这样做能正常下载\n3. 运行 Geth编译完成后，你可以运行 geth。确保 geth 可执行文件在你的 PATH 中，或者直接在 go-ethereum/build/bin 目录下运行它。\n# 如果 geth 在 PATH 中geth# 如果 geth 不在 PATH 中./build/bin/geth\n\n\n成功安装并运行自定义的 Go Ethereum 客户端\n\n\n最后的截图\n\ng)\n","categories":["笔记"]},{"title":"创建一个网络包解码器分析DEVP2P协议","url":"/Arknight-notes/posts/20624.html","content":"\n      \n        \n      \n      \n        \n          \n          \n            联系站长以查看密码\n          \n        \n        \n      \n    \n    ","categories":["笔记"]},{"title":"关于WSL Docker清理","url":"/Arknight-notes/posts/33014.html","content":"Windows下释放Docker所占用的WSL磁盘空间使用下面的命令清理镜像：\ndocker system prune\n\n在Linux下面可以释放磁盘空间，但是在Windows下却并不能够真正的释放硬盘。\n搜寻了一下，发现有一个文件超级大：\nC:\\Users\\&#123;用户名&#125;\\AppData\\Local\\Docker\\wsl\\data\\ext4.vhdx\n\n这是WSL的虚拟机文件。这个文件看起来是只增长，不回收硬盘空间的，所以，需要手动回收硬盘空间。\n1. 停止wsl2wsl --shutdown\n\n2. 运行diskpart释放空间# 代码来自 https://github.com/microsoft/WSL/issues/4699#issuecomment-627133168diskpartselect vdisk file=&quot;C:\\Users\\&lt;你的用户名&gt;\\AppData\\Local\\Docker\\wsl\\data\\ext4.vhdx&quot;attach vdisk readonlycompact vdiskdetach vdiskexit\n\n参考资料\nWSL2 Docker释放磁盘空间\nwsl2 下清理 docker 占用空间\nWSL 2 should automatically release disk space back to the host OS\n\n\n\n\n","categories":["笔记"]},{"title":"爬虫实战-爬取广州大学课程表","url":"/Arknight-notes/posts/33971.html","content":"大二上在学python，所以想要用python实现一下课表爬取。\n（虽然python开课爬虫不怎么讲的都\n本文仅供学习使用。 \n广州大学课程信息查询脚本1. 概述本脚本用于自动化登录广州大学教务系统，获取当前学期课程信息，主要功能包括：\n\n通过浏览器自动化（Selenium）模拟用户登录，绕过滑块验证。\n使用获取的Cookie通过requests库发送API请求，获取课程数据。\n结构化处理课程信息，并导出为JSON和CSV格式文件。\n\n\n2. 环境依赖2.1 运行环境\nPython 3.7+\n\n依赖库\npip install selenium requests pandas\n\n2.2 配置\n手动输入学号密码（脚本运行时会提示），查询时段的配置请求参数\n后期待完善（\n\n\n3. 功能模块3.1 登录模块功能描述\n通过Selenium启动浏览器，访问教务系统登录页面。\n自动填充学号、密码，并绕过滑块验证。\n判断登录状态，成功后保存Cookie供后续请求使用。\n\n输入参数\n学号（login_username）\n密码（login_password）\n\n关键逻辑\n浏览器配置：禁用自动化检测标志（excludeSwitches: [&#39;enable-automation&#39;]），防止被识别为爬虫。\n滑块验证绕过：通过执行JavaScript代码navigator.webdriver = false。\n登录状态检查：通过页面元素或关键词（如登录成功）判断是否登录成功。\n\n\n3.2 课程数据获取模块功能描述\n使用requests库发送POST请求，携带登录后的Cookie和参数，获取课程数据。\n\n数据接口：http://jwxt.gzhu.edu.cn/jwglxt/kbcx/xskbcx_cxXsgrkb.html（F12大法\n\n\n\n\n请求参数data = &#123;    &quot;xnm&quot;: &quot;2024&quot;,     # 学年（2024表示2023-2024学年）    &quot;kzlx&quot;: &quot;ck&quot;,      # 查询类型（ck=查看）    &quot;xsdm&quot;: &quot;&quot;,        # 学生代码（留空）    &quot;xqm&quot;: &quot;3&quot;         # 学期码（3表示秋季学期）&#125;\n\n请求头（Headers）headers = &#123;    &quot;User-Agent&quot;: &quot;Mozilla/5.0 ...&quot;,  # 模拟浏览器请求    &quot;Referer&quot;: &quot;http://jwxt.gzhu.edu.cn/...&quot;,  # 来源页面    &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;       # 标识AJAX请求&#125;\n\n\n3.3 数据处理与导出模块功能描述\nJSON数据处理\n\n从原始响应中提取关键字段（如课程名称kcmc、教室cdmc、节次jc）。\n映射星期代码（xqjmcMap）为中文（如1 → 周一）。\n保存结构化的JSON文件（extracted_courses.json）。\n\n\nCSV导出\n\n使用pandas将JSON数据转换为表格形式。\n\n添加中文表头（如“课程名称”、“教室”）。\n\n导出为CSV文件（courses.csv），兼容Excel打开。\n\n\n\n字段映射表\n\n\n原始字段\n中文表头\n说明\n\n\n\nkcmc\n课程名称\n课程全称\n\n\ncdmc\n教室\n上课地点\n\n\njc\n节数\n课程节次（如1-2节）\n\n\nxqjmc\n日期\n星期几（周一至日）\n\n\nkcxszc\n课时安排\n周次范围（如1-16周）\n\n\n\n4. 代码详解4.1 登录流程# 防止打开浏览器后闪退options = webdriver.ChromeOptions()options.add_experimental_option(&#x27;detach&#x27;, True)# options.add_argument(&#x27;--headless&#x27;)  # 无头模式# 开发者模式，防止被各大网站识别出来使用了Seleniumoptions.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;])# 启动浏览器browser = webdriver.Chrome(options=options)browser.get(login_url)# 绕过滑块验证browser.execute_script(&#x27;Object.defineProperties(navigator,&#123;webdriver:&#123;get:()=&gt;false&#125;&#125;)&#x27;)# 查找用户名和密码输入框所在元素username_input = browser.find_element(By.ID, &#x27;un&#x27;)username_input.click()username_input.send_keys(login_username)\n\n\n\n# 等待响应time.sleep(2)# 输入信息模拟登录password_input = browser.find_element(By.XPATH, &quot;//input[@name=&#x27;pd&#x27;]&quot;)password_input.click()password_input.send_keys(login_password)login_button = browser.find_element(By.ID, &#x27;index_login_btn&#x27;)login_button.click()time.sleep(5)# 检查登录是否成功if &#x27;登录成功&#x27; in browser.page_source or &#x27;index_login_btn&#x27; not in browser.page_source:    print(&quot;登录成功&quot;)else:    print(&quot;登录失败&quot;)cookies = browser.get_cookies()print(&quot;Cookies:&quot;, cookies)cookie_dict = &#123;cookie[&#x27;name&#x27;]: cookie[&#x27;value&#x27;] for cookie in cookies&#125;# 关闭浏览器browser.quit()\n\n\n\n\n\n4.2 数据请求# 请求头headers = &#123;    &quot;Accept&quot;: &quot;*/*&quot;,    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,    &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9&quot;,    &quot;Connection&quot;: &quot;keep-alive&quot;,    &quot;Content-Length&quot;: &quot;28&quot;,    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded;charset=UTF-8&quot;,    &quot;Host&quot;: &quot;jwxt.gzhu.edu.cn&quot;,    &quot;Origin&quot;: &quot;http://jwxt.gzhu.edu.cn&quot;,    &quot;Referer&quot;: &quot;http://jwxt.gzhu.edu.cn/jwglxt/kbcx/xskbcx_cxXskbcxIndex.html?gnmkdm=███████&amp;layout=default&quot;,    &quot;User-Agent&quot;: &quot;Mozilla/███████ (Windows NT ███████; Win64; x64) AppleWebKit/███████ (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36&quot;,    &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;&#125;# 表单数据(学年和学期)data = &#123;    &quot;xnm&quot;: &quot;2024&quot;,    &quot;kzlx&quot;: &quot;ck&quot;,    &quot;xsdm&quot;: &quot;&quot;,    &quot;xqm&quot;: &quot;3&quot;&#125;session = requests.Session()for name, value in cookie_dict.items():    session.cookies.set(name, value)# POST请求response = session.post(target_url, headers=headers, data=data)# 检查请求是否成功if response.status_code == 200:    try:        response_data = response.json()        formatted_data = json.dumps(response_data, indent=4, ensure_ascii=False)        with open(&#x27;course_schedule.json&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:            file.write(formatted_data)            print(&quot;返回的数据已经保存至course_schedule.json&quot;)    except ValueError:        print(&quot;无法解析JSON数据&quot;)else:    print(f&quot;请求失败，状态码: &#123;response.status_code&#125;&quot;)\n\n\n\n4.3 JSON数据处理# 提取字段并重构数据courses = []for course in data[&#x27;kbList&#x27;]:    course_info = &#123;        &quot;课程名称&quot;: course.get(&#x27;kcmc&#x27;, &#x27;&#x27;),        &quot;教室&quot;: course.get(&#x27;cdmc&#x27;, &#x27;&#x27;),        # ... 其他字段映射    &#125;    courses.append(course_info)\n\n4.4 CSV导出逻辑# 使用pandas转换并导出df = pd.DataFrame(courses)df.to_csv(&#x27;courses.csv&#x27;, index=False, encoding=&#x27;utf-8-sig&#x27;)  # 兼容Excel中文编码\n\n\n滑块验证更新：若教务系统更新滑块验证逻辑，需调整JavaScript绕过代码。\n\n接口稳定性：课程查询接口（xskbcx_cxXsgrkb.html）若变更URL，需同步更新。\n\n\n\n6. 输出示例6.1 JSON文件（extracted_courses.json）和谐了部分隐私信息（\n&#123;            &quot;bklxdjmc&quot;: &quot;无&quot;,            &quot;cd_id&quot;: &quot;1015170&quot;,            &quot;cdlbmc&quot;: &quot;多媒体&quot;,            &quot;cdmc&quot;: &quot;███████517&quot;,            &quot;cxbj&quot;: &quot;0&quot;,            &quot;cxbjmc&quot;: &quot;无&quot;,            &quot;date&quot;: &quot;二○二四年十一月十五日&quot;,            &quot;dateDigit&quot;: &quot;2024年11月15日&quot;,            &quot;dateDigitSeparator&quot;: &quot;2024-11-15&quot;,            &quot;day&quot;: &quot;15&quot;,            &quot;jc&quot;: &quot;3-4节&quot;,            &quot;jcor&quot;: &quot;3-4&quot;,            &quot;jcs&quot;: &quot;3-4&quot;,            &quot;jgh_id&quot;: &quot;104119&quot;,            &quot;jgpxzd&quot;: &quot;1&quot;,            &quot;jxb_id&quot;: &quot;1850E3A697E512CAE06███████ACA210&quot;,            &quot;jxbmc&quot;: &quot;(2024-2025-1)-216███████-01&quot;,            &quot;jxbsftkbj&quot;: &quot;0&quot;,            &quot;jxbzc&quot;: &quot;███████&quot;,            &quot;kcbj&quot;: &quot;主修&quot;,            &quot;kch&quot;: &quot;███████&quot;,            &quot;kch_id&quot;: &quot;███████&quot;,            &quot;kclb&quot;: &quot;专业课程平台&quot;,            &quot;kcmc&quot;: &quot;常微分方程1&quot;,            &quot;kcxszc&quot;: &quot;理论:48&quot;,            &quot;kcxz&quot;: &quot;专选&quot;,            &quot;kczxs&quot;: &quot;48&quot;,            &quot;khfsmc&quot;: &quot;考试&quot;,            &quot;kkzt&quot;: &quot;1&quot;,            &quot;lh&quot;: &quot;███████楼&quot;,            &quot;listnav&quot;: &quot;false&quot;,            &quot;localeKey&quot;: &quot;zh_CN&quot;,            &quot;month&quot;: &quot;11&quot;,            &quot;oldjc&quot;: &quot;12&quot;,            &quot;oldzc&quot;: &quot;65280&quot;,            &quot;pageTotal&quot;: 0,            &quot;pageable&quot;: true,            &quot;pkbj&quot;: &quot;1&quot;,            &quot;px&quot;: &quot;1&quot;,            &quot;qqqh&quot;: &quot;无&quot;,            &quot;queryModel&quot;: &#123;                &quot;currentPage&quot;: 1,                &quot;currentResult&quot;: 0,                &quot;entityOrField&quot;: false,                &quot;limit&quot;: 15,                &quot;offset&quot;: 0,                &quot;pageNo&quot;: 0,                &quot;pageSize&quot;: 15,                &quot;showCount&quot;: 10,                &quot;sorts&quot;: [],                &quot;totalCount&quot;: 0,                &quot;totalPage&quot;: 0,                &quot;totalResult&quot;: 0            &#125;,            &quot;rangeable&quot;: true,            &quot;rk&quot;: &quot;12&quot;,            &quot;rsdzjs&quot;: 0,            &quot;sfjf&quot;: &quot;0&quot;,            &quot;skfsmc&quot;: &quot;无&quot;,            &quot;sxbj&quot;: &quot;1&quot;,            &quot;totalResult&quot;: &quot;0&quot;,            &quot;userModel&quot;: &#123;                &quot;monitor&quot;: false,                &quot;roleCount&quot;: 0,                &quot;roleKeys&quot;: &quot;&quot;,                &quot;roleValues&quot;: &quot;&quot;,                &quot;status&quot;: 0,                &quot;usable&quot;: false            &#125;,            &quot;xf&quot;: &quot;3&quot;,            &quot;xkbz&quot;: &quot;无&quot;,            &quot;xm&quot;: &quot;███████&quot;,            &quot;xnm&quot;: &quot;2024&quot;,            &quot;xqdm&quot;: &quot;0&quot;,            &quot;xqh1&quot;: &quot;1,2,&quot;,            &quot;xqh_id&quot;: &quot;1&quot;,            &quot;xqj&quot;: &quot;1&quot;,            &quot;xqjmc&quot;: &quot;星期一&quot;,            &quot;xqm&quot;: &quot;3&quot;,            &quot;xqmc&quot;: &quot;███████&quot;,            &quot;xsdm&quot;: &quot;01&quot;,            &quot;xslxbj&quot;: &quot;*&quot;,            &quot;year&quot;: &quot;2024&quot;,            &quot;zcd&quot;: &quot;9-███████周&quot;,            &quot;zcmc&quot;: &quot;███████&quot;,            &quot;zfjmc&quot;: &quot;主讲&quot;,            &quot;zhxs&quot;: &quot;3&quot;,            &quot;zxs&quot;: &quot;48&quot;,            &quot;zxxx&quot;: &quot;无&quot;,            &quot;zyfxmc&quot;: &quot;███████&quot;,            &quot;zyhxkcbj&quot;: &quot;否&quot;,            &quot;zzrl&quot;: &quot;███████&quot;        &#125;,\n\n6.2 CSV文件（courses.csv）\n\n\n课程名称\n教室\n节数\n日期\n课时安排\n\n\n\n常微分方程1\n███████\n3-4\n周一\n1-16周\n\n\n\n\n\n7. todo\n可视化界面：集成tkinter或Web框架（如Flask）提供GUI操作。\n全校课表爬虫\n\n�**\n","categories":["笔记"]},{"title":"日志2024.9.25（待解决）","url":"/Arknight-notes/posts/13872.html","content":"\n在解析rlpx时出现lua错误在帧列表中，有一个帧（编号 1561）出现了 Lua 错误。具体来说，错误信息是：“Lua Error: &#x2F;root&#x2F;local&#x2F;lib&#x2F;wireshark&#x2F;plugins&#x2F;rlpx.lua:97: attempt to index local ‘dec_msg’ (a nil value)”。在解码器脚本 rlpx.lua 的第 97 行尝试访问一个名为 dec_msg 的局部变量，但它是一个空值（nil），导致解码器无法成功解析数据包\n\n\nrlpx.lua代码如下，lua版本为Lua 5.4.7 ：\nlocal python = require &#x27;python&#x27;-- Temporary for development-- local sys = python.import &#x27;sys&#x27;-- sys.path.append(&#x27;/home/jkemp/cs700/pydevp2p/&#x27;)-- End of Temporary for developmentlocal rlpxBridge = python.import &#x27;pydevp2p.bridge&#x27;-- create a new dissectorlocal NAME = &quot;rlpx&quot;local PORT = 30305local rlpx = Proto(NAME, &quot;Ethereum RLPx Protocol&quot;)local fields = rlpx.fieldsfields.auth_size = ProtoField.uint16(NAME .. &quot;.auth_size&quot;, &quot;Auth Size&quot;)fields.ack_size = ProtoField.uint16(NAME .. &quot;.ack_size&quot;, &quot;Ack Size&quot;)fields.body = ProtoField.bytes(NAME .. &quot;.body&quot;, &quot;Data&quot;)fields.frame_header = ProtoField.bytes(NAME .. &quot;.frame_header&quot;, &quot;Frame Header&quot;)fields.frame_body = ProtoField.bytes(NAME .. &quot;.frame_body&quot;, &quot;Frame Body&quot;)local known_ports = &#123; 30303, 30304, 30305, 30306, 30307, 30308 &#125;local function table_has_value(tab, val)    for _, value in ipairs(tab) do        if value == val then            return true        end    end    return falseendlocal function array_iterator(array, len)    -- This lets us iterate over a c object (like a python array)    local index = 0    local count = len    -- The closure function is returned    return function()        index = index + 1        if index &lt;= count        then            -- return the current element of the iterator            return array[index]        end    endend-- main dissect packet functionfunction rlpx.dissector(tvb, pinfo, tree)    local subtree = tree:add(rlpx, tvb())    local offset = 0    -- show protocol name in protocol column    pinfo.cols.protocol = rlpx.name    local srcaddr = tostring(pinfo.src)    local dstaddr = tostring(pinfo.dst)    local payload = tostring(tvb:bytes())    -- dissect field one by one, and add to protocol tree    local auth_size = tvb(offset, 2)    if (tvb:len() - auth_size:int() == 2) then        if (table_has_value(known_ports, pinfo.src_port)) then            -- This is most likely a handshake AUTH-ACK packet            offset = offset + 2            subtree:add(fields.ack_size, auth_size)            pinfo.cols.info:set(pinfo.src_port .. &quot; → &quot; .. pinfo.dst_port .. &quot; [HANDSHAKE] AUTH ACK&quot;)            -- print(payload, dstNode)            local dec_msg = rlpxBridge.handleRLPxHandshakeMsg(srcaddr, dstaddr, payload, pinfo.visited, pinfo.number)            local payloadtree = subtree:add(fields.body, tvb(offset))            payloadtree:set_text(&quot;Handshake AUTH ACK&quot;)            for element in array_iterator(dec_msg, dec_msg[0]) do                payloadtree:add(element)            end        elseif (table_has_value(known_ports, pinfo.dst_port)) then            -- This is most likely a handshake AUTH packet            offset = offset + 2            subtree:add(fields.auth_size, auth_size)            pinfo.cols.info:set(pinfo.src_port .. &quot; → &quot; .. pinfo.dst_port .. &quot; [HANDSHAKE] AUTH INIT&quot;)            -- print(payload, dstNode)            local dec_msg = rlpxBridge.handleRLPxHandshakeMsg(srcaddr, dstaddr, payload, pinfo.visited, pinfo.number)            local payloadtree = subtree:add(fields.body, tvb(offset))            for element in array_iterator(dec_msg, dec_msg[0]) do                payloadtree:add(element)            end        else            subtree:add(fields.body, tvb(offset))        end    else        local dec_msg = rlpxBridge.handleRLPxMsg(srcaddr, dstaddr, payload, pinfo.visited, pinfo.number)        local frame_header = dec_msg[0]        local frame_body = dec_msg[1]        local frame_type = dec_msg[2]        -- Set the column information to the Frame Type        if frame_type ~= nil then            pinfo.cols.info:set(pinfo.src_port .. &quot; → &quot; .. pinfo.dst_port .. &quot; &quot; .. frame_type)        end        -- Show the frame header information (if available) in Wireshark        if frame_header ~= nil then            local frame_header_tree = subtree:add(fields.frame_header, tvb(0, frame_header.headerSize))            frame_header_tree:add(&quot;Decrypted Header Data:&quot;, frame_header.header)            frame_header_tree:add(&quot;Header MAC:&quot;, frame_header.headerMac)            frame_header_tree:add(&quot;Frame Body MAC:&quot;, frame_header.frameMac)            frame_header_tree:add(&quot;Frame Size:&quot;, frame_header.frameSize)            frame_header_tree:add(&quot;Read Size:&quot;, frame_header.readSize)            frame_header_tree:add(&quot;Header Data:&quot;, frame_header.headerData)            pinfo.cols.info:append(&quot; Len=&quot; .. frame_header.readSize)        end        -- Show the frame body information (if available) in Wireshark        if frame_header ~= nil and frame_type ~= nil and frame_body ~= nil and frame_body[0] &gt; 0 then            local frame_body_tree = subtree:add(fields.frame_body, tvb(frame_header.headerSize))            for element in array_iterator(frame_body, frame_body[0]) do                frame_body_tree:add(element)            end        end    endend-- register this dissectorDissectorTable.get(&quot;tcp.port&quot;):add(PORT, rlpx)DissectorTable.get(&quot;tcp.port&quot;):add(&quot;30303&quot;, rlpx)DissectorTable.get(&quot;tcp.port&quot;):add(&quot;30304&quot;, rlpx)DissectorTable.get(&quot;tcp.port&quot;):add(&quot;30305&quot;, rlpx)DissectorTable.get(&quot;tcp.port&quot;):add(&quot;30306&quot;, rlpx)DissectorTable.get(&quot;tcp.port&quot;):add(&quot;30307&quot;, rlpx)DissectorTable.get(&quot;tcp.port&quot;):add(&quot;30308&quot;, rlpx)\n\n不知道怎么改，不懂lua\n可能是lua版本问题，改天看下文档\n\n\n.webp)\n"},{"title":"记一次配置Obsidian配合Hexo写博客","url":"/Arknight-notes/posts/t2zf3s.html","content":"测试，现在新写了个插件，晚上回来整\n","categories":["笔记"]},{"title":"2024一些笔记（概率论）","url":"/Arknight-notes/posts/20561.html","content":"2024的一些笔记（概率论）（共18张）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbp)\n","categories":["笔记"],"tags":["概率论"]},{"title":"hexo集成gitalk时的Error Validation Failed问题","url":"/Arknight-notes/posts/18261.html","content":"hexo集成gitalk时Error: Validation Failed问题Hexo集成Gitalk后，某些文章下方的评论显示Error: Validation Failed\nGitalk会限制Label name的长度，有些文章生成的URL长度会超过限制，所以导致这个问题\n\n解决方案可以集成一个对文章生成唯一id的插件\nhexo-abbrlink在博客根目录下安装\nnpm install --save hexo-abbrlink\n\n并修改配置文件_config.yml\npermalink: [EveryWordsYouWant]/:abbrlink/\n\n\n\n再 hexo cl &amp;&amp; hexo g &amp;&amp; hexo d 即可\n\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"CHATGLM-6B清华AI语言模型","url":"/Arknight-notes/posts/26397.html","content":"猜猜我在清华找到了什么好东西模型可以装在电脑里跑的，然后发现电脑带不动（悲）\n\n\nChatGLM-6Bhttps://gitclone.com/aiit/chat/页面嵌入各种bug\n新一代开源模型 ChatGLM3-6B 已发布，拥有10B以下最强的基础模型，支持工具调用（Function Call）、代码执行（Code Interpreter）、Agent 任务等功能。\n介绍ChatGLM-6B 是一个开源的、支持中英双语的对话语言模型，基于 General Language Model (GLM) 架构，具有 62 亿参数。结合模型量化技术，用户可以在消费级的显卡上进行本地部署（INT4 量化级别下最低只需 6GB 显存）。ChatGLM-6B 使用了和 ChatGPT 相似的技术，针对中文问答和对话进行了优化。经过约 1T 标识符的中英双语训练，辅以监督微调、反馈自助、人类反馈强化学习等技术的加持，62 亿参数的 ChatGLM-6B 已经能生成相当符合人类偏好的回答，更多信息请参考我们的博客。欢迎通过 chatglm.cn 体验更大规模的 ChatGLM 模型。\n为了方便下游开发者针对自己的应用场景定制模型，我们同时实现了基于 P-Tuning v2 的高效参数微调方法 (使用指南) ，INT4 量化级别下最低只需 7GB 显存即可启动微调。\nChatGLM-6B 权重对学术研究完全开放，在填写问卷进行登记后亦允许免费商业使用。\n\nChatGLM-6B 开源模型旨在与开源社区一起推动大模型技术发展，恳请开发者和大家遵守开源协议，勿将开源模型和代码及基于开源项目产生的衍生物用于任何可能给国家和社会带来危害的用途以及用于任何未经过安全评估和备案的服务。目前，本项目团队未基于 ChatGLM-6B 开发任何应用，包括网页端、安卓、苹果 iOS 及 Windows App 等应用。\n尽管模型在训练的各个阶段都尽力确保数据的合规性和准确性，但由于 ChatGLM-6B 模型规模较小，且模型受概率随机性因素影响，无法保证输出内容的准确性，且模型易被误导（详见局限性）。本项目不承担开源模型和代码导致的数据安全、舆情风险或发生任何模型被误导、滥用、传播、不当利用而产生的风险和责任。\n更新信息[2023&#x2F;07&#x2F;25] 发布 CodeGeeX2 ，基于 ChatGLM2-6B 的代码生成模型，代码能力全面提升，更多特性包括：\n\n更强大的代码能力：CodeGeeX2-6B 进一步经过了 600B 代码数据预训练，相比 CodeGeeX 一代模型，在代码能力上全面提升，HumanEval-X 评测集的六种编程语言均大幅提升 (Python +57%, C++ +71%, Java +54%, JavaScript +83%, Go +56%, Rust +321%)，在Python上达到 35.9% 的 Pass@1 一次通过率，超越规模更大的 StarCoder-15B。\n更优秀的模型特性：继承 ChatGLM2-6B 模型特性，CodeGeeX2-6B 更好支持中英文输入，支持最大 8192 序列长度，推理速度较一代 大幅提升，量化后仅需6GB显存即可运行，支持轻量级本地化部署。\n更全面的AI编程助手：CodeGeeX插件（VS Code, Jetbrains）后端升级，支持超过100种编程语言，新增上下文补全、跨文件补全等实用功能。结合 Ask CodeGeeX 交互式AI编程助手，支持中英文对话解决各种编程问题，包括且不限于代码解释、代码翻译、代码纠错、文档生成等，帮助程序员更高效开发。\n\n[2023&#x2F;06&#x2F;25] 发布 ChatGLM2-6B，ChatGLM-6B 的升级版本，在保留了了初代模型对话流畅、部署门槛较低等众多优秀特性的基础之上，ChatGLM2-6B 引入了如下新特性：\n\n更强大的性能：基于 ChatGLM 初代模型的开发经验，我们全面升级了 ChatGLM2-6B 的基座模型。ChatGLM2-6B 使用了 GLM 的混合目标函数，经过了 1.4T 中英标识符的预训练与人类偏好对齐训练，评测结果显示，相比于初代模型，ChatGLM2-6B 在 MMLU（+23%）、CEval（+33%）、GSM8K（+571%） 、BBH（+60%）等数据集上的性能取得了大幅度的提升，在同尺寸开源模型中具有较强的竞争力。\n更长的上下文：基于 FlashAttention 技术，我们将基座模型的上下文长度（Context Length）由 ChatGLM-6B 的 2K 扩展到了 32K，并在对话阶段使用 8K 的上下文长度训练，允许更多轮次的对话。但当前版本的 ChatGLM2-6B 对单轮超长文档的理解能力有限，我们会在后续迭代升级中着重进行优化。\n更高效的推理：基于 Multi-Query Attention 技术，ChatGLM2-6B 有更高效的推理速度和更低的显存占用：在官方的模型实现下，推理速度相比初代提升了 42%，INT4 量化下，6G 显存支持的对话长度由 1K 提升到了 8K。\n\n更多信息参见 ChatGLM2-6B。\n[2023&#x2F;06&#x2F;14] 发布 WebGLM，一项被接受于KDD 2023的研究工作，支持利用网络信息生成带有准确引用的长回答。\n[2023&#x2F;05&#x2F;17] 发布 VisualGLM-6B，一个支持图像理解的多模态对话语言模型。\n可以通过本仓库中的 cli_demo_vision.py 和 web_demo_vision.py 来运行命令行和网页 Demo。注意 VisualGLM-6B 需要额外安装 SwissArmyTransformer 和 torchvision。更多信息参见 VisualGLM-6B。\n[2023&#x2F;05&#x2F;15] 更新 v1.1 版本 checkpoint，训练数据增加英文指令微调数据以平衡中英文数据比例，解决英文回答中夹杂中文词语的现象。\n友情链接对 ChatGLM 进行加速的开源项目：\n\nlyraChatGLM: 对 ChatGLM-6B 进行推理加速，最高可以实现 9000+ tokens&#x2F;s 的推理速度\nChatGLM-MNN: 一个基于 MNN 的 ChatGLM-6B C++ 推理实现，支持根据显存大小自动分配计算任务给 GPU 和 CPU\nJittorLLMs：最低3G显存或者没有显卡都可运行 ChatGLM-6B FP16， 支持Linux、windows、Mac部署\nInferLLM：轻量级 C++ 推理，可以实现本地 x86，Arm 处理器上实时聊天，手机上也同样可以实时运行，运行内存只需要 4G\n\n基于或使用了 ChatGLM-6B 的开源项目：\n\nlangchain-ChatGLM：基于 langchain 的 ChatGLM 应用，实现基于可扩展知识库的问答\n闻达：大型语言模型调用平台，基于 ChatGLM-6B 实现了类 ChatPDF 功能\nglm-bot：将ChatGLM接入Koishi可在各大聊天平台上调用ChatGLM\nChuanhu Chat: 为各个大语言模型和在线模型API提供美观易用、功能丰富、快速部署的用户界面，支持ChatGLM-6B。\n\n支持 ChatGLM-6B 和相关应用在线训练的示例项目：\n\nChatGLM-6B 的部署与微调教程\nChatGLM-6B 结合 langchain 实现本地知识库 QA Bot\n\n第三方评测：\n\nMeasuring Massive Multitask Chinese Understanding\n\n更多开源项目参见 PROJECT.md\n使用方式硬件需求\n\n\n量化等级\n最低 GPU 显存（推理）\n最低 GPU 显存（高效参数微调）\n\n\n\nFP16（无量化）\n13 GB\n14 GB\n\n\nINT8\n8 GB\n9 GB\n\n\nINT4\n6 GB\n7 GB\n\n\n环境安装使用 pip 安装依赖：pip install -r requirements.txt，其中 transformers 库版本推荐为 4.27.1，但理论上不低于 4.23.1 即可。\n此外，如果需要在 cpu 上运行量化后的模型，还需要安装 gcc 与 openmp。多数 Linux 发行版默认已安装。对于 Windows ，可在安装 TDM-GCC 时勾选 openmp。 Windows 测试环境 gcc 版本为 TDM-GCC 10.3.0， Linux 为 gcc 11.3.0。在 MacOS 上请参考 Q1。\n代码调用可以通过如下代码调用 ChatGLM-6B 模型来生成对话：\n&gt;&gt;&gt; from transformers import AutoTokenizer, AutoModel&gt;&gt;&gt; tokenizer = AutoTokenizer.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True)&gt;&gt;&gt; model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True).half().cuda()&gt;&gt;&gt; model = model.eval()&gt;&gt;&gt; response, history = model.chat(tokenizer, &quot;你好&quot;, history=[])&gt;&gt;&gt; print(response)你好👋!我是人工智能助手 ChatGLM-6B,很高兴见到你,欢迎问我任何问题。&gt;&gt;&gt; response, history = model.chat(tokenizer, &quot;晚上睡不着应该怎么办&quot;, history=history)&gt;&gt;&gt; print(response)晚上睡不着可能会让你感到焦虑或不舒服,但以下是一些可以帮助你入睡的方法:1. 制定规律的睡眠时间表:保持规律的睡眠时间表可以帮助你建立健康的睡眠习惯,使你更容易入睡。尽量在每天的相同时间上床,并在同一时间起床。2. 创造一个舒适的睡眠环境:确保睡眠环境舒适,安静,黑暗且温度适宜。可以使用舒适的床上用品,并保持房间通风。3. 放松身心:在睡前做些放松的活动,例如泡个热水澡,听些轻柔的音乐,阅读一些有趣的书籍等,有助于缓解紧张和焦虑,使你更容易入睡。4. 避免饮用含有咖啡因的饮料:咖啡因是一种刺激性物质,会影响你的睡眠质量。尽量避免在睡前饮用含有咖啡因的饮料,例如咖啡,茶和可乐。5. 避免在床上做与睡眠无关的事情:在床上做些与睡眠无关的事情,例如看电影,玩游戏或工作等,可能会干扰你的睡眠。6. 尝试呼吸技巧:深呼吸是一种放松技巧,可以帮助你缓解紧张和焦虑,使你更容易入睡。试着慢慢吸气,保持几秒钟,然后缓慢呼气。如果这些方法无法帮助你入睡,你可以考虑咨询医生或睡眠专家,寻求进一步的建议。\n模型的实现仍然处在变动中。如果希望固定使用的模型实现以保证兼容性，可以在 from_pretrained 的调用中增加 revision=&quot;v1.1.0&quot; 参数。v1.1.0 是当前最新的版本号，完整的版本列表参见 Change Log。\n从本地加载模型以上代码会由 transformers 自动下载模型实现和参数。完整的模型实现可以在 Hugging Face Hub。如果你的网络环境较差，下载模型参数可能会花费较长时间甚至失败。此时可以先将模型下载到本地，然后从本地加载。\n从 Hugging Face Hub 下载模型需要先安装Git LFS，然后运行\ngit clone https://huggingface.co/THUDM/chatglm-6b\n\n如果你从 Hugging Face Hub 上下载 checkpoint 的速度较慢，可以只下载模型实现\nGIT_LFS_SKIP_SMUDGE=1 git clone https://huggingface.co/THUDM/chatglm-6b\n然后从这里手动下载模型参数文件，并将下载的文件替换到本地的 chatglm-6b 目录下。\n将模型下载到本地之后，将以上代码中的 THUDM/chatglm-6b 替换为你本地的 chatglm-6b 文件夹的路径，即可从本地加载模型。\nOptional 模型的实现仍然处在变动中。如果希望固定使用的模型实现以保证兼容性，可以执行\ngit checkout v1.1.0\n\nDemo &amp; API我们提供了一个基于 Gradio 的网页版 Demo 和一个命令行 Demo。使用时首先需要下载本仓库：\ngit clone https://github.com/THUDM/ChatGLM-6Bcd ChatGLM-6B\n\n网页版 Demo\n首先安装 Gradio：pip install gradio，然后运行仓库中的 web_demo.py： \npython web_demo.py\n\n程序会运行一个 Web Server，并输出地址。在浏览器中打开输出的地址即可使用。最新版 Demo 实现了打字机效果，速度体验大大提升。注意，由于国内 Gradio 的网络访问较为缓慢，启用 demo.queue().launch(share=True, inbrowser=True) 时所有网络会经过 Gradio 服务器转发，导致打字机体验大幅下降，现在默认启动方式已经改为 share=False，如有需要公网访问的需求，可以重新修改为 share=True 启动。\n感谢 @AdamBear 实现了基于 Streamlit 的网页版 Demo，运行方式见#117.\n命令行 Demo\n运行仓库中 cli_demo.py：\npython cli_demo.py\n\n程序会在命令行中进行交互式的对话，在命令行中输入指示并回车即可生成回复，输入 clear 可以清空对话历史，输入 stop 终止程序。\nAPI部署首先需要安装额外的依赖 pip install fastapi uvicorn，然后运行仓库中的 api.py：\npython api.py\n默认部署在本地的 8000 端口，通过 POST 方法进行调用\ncurl -X POST &quot;http://127.0.0.1:8000&quot; \\     -H &#x27;Content-Type: application/json&#x27; \\     -d &#x27;&#123;&quot;prompt&quot;: &quot;你好&quot;, &quot;history&quot;: []&#125;&#x27;\n得到的返回值为\n&#123;  &quot;response&quot;:&quot;你好👋！我是人工智能助手 ChatGLM-6B，很高兴见到你，欢迎问我任何问题。&quot;,  &quot;history&quot;:[[&quot;你好&quot;,&quot;你好👋！我是人工智能助手 ChatGLM-6B，很高兴见到你，欢迎问我任何问题。&quot;]],  &quot;status&quot;:200,  &quot;time&quot;:&quot;2023-03-23 21:38:40&quot;&#125;\n\n低成本部署模型量化默认情况下，模型以 FP16 精度加载，运行上述代码需要大概 13GB 显存。如果你的 GPU 显存有限，可以尝试以量化方式加载模型，使用方法如下：\n# 按需修改，目前只支持 4/8 bit 量化model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True).quantize(8).half().cuda()\n\n进行 2 至 3 轮对话后，8-bit 量化下 GPU 显存占用约为 10GB，4-bit 量化下仅需 6GB 占用。随着对话轮数的增多，对应消耗显存也随之增长，由于采用了相对位置编码，理论上 ChatGLM-6B 支持无限长的 context-length，但总长度超过 2048（训练长度）后性能会逐渐下降。\n模型量化会带来一定的性能损失，经过测试，ChatGLM-6B 在 4-bit 量化下仍然能够进行自然流畅的生成。使用 GPT-Q 等量化方案可以进一步压缩量化精度&#x2F;提升相同量化精度下的模型性能，欢迎大家提出对应的 Pull Request。\n量化过程需要在内存中首先加载 FP16 格式的模型，消耗大概 13GB 的内存。如果你的内存不足的话，可以直接加载量化后的模型，INT4 量化后的模型仅需大概 5.2GB 的内存：\n# INT8 量化的模型将&quot;THUDM/chatglm-6b-int4&quot;改为&quot;THUDM/chatglm-6b-int8&quot;model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b-int4&quot;, trust_remote_code=True).half().cuda()\n量化模型的参数文件也可以从这里手动下载。\nCPU 部署如果你没有 GPU 硬件的话，也可以在 CPU 上进行推理，但是推理速度会更慢。使用方法如下（需要大概 32GB 内存）\nmodel = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True).float()\n\n如果你的内存不足，可以直接加载量化后的模型：\n# INT8 量化的模型将&quot;THUDM/chatglm-6b-int4&quot;改为&quot;THUDM/chatglm-6b-int8&quot;model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b-int4&quot;,trust_remote_code=True).float()\n\n如果遇到了报错 Could not find module &#39;nvcuda.dll&#39; 或者 RuntimeError: Unknown platform: darwin (MacOS) ，请从本地加载模型\nMac 部署对于搭载了 Apple Silicon 或者 AMD GPU 的Mac，可以使用 MPS 后端来在 GPU 上运行 ChatGLM-6B。需要参考 Apple 的 官方说明 安装 PyTorch-Nightly（正确的版本号应该是2.1.0.dev2023xxxx，而不是2.0.0）。\n目前在 MacOS 上只支持从本地加载模型。将代码中的模型加载改为从本地加载，并使用 mps 后端：\nmodel = AutoModel.from_pretrained(&quot;your local path&quot;, trust_remote_code=True).half().to(&#x27;mps&#x27;)\n\n加载半精度的 ChatGLM-6B 模型需要大概 13GB 内存。内存较小的机器（比如 16GB 内存的 MacBook Pro），在空余内存不足的情况下会使用硬盘上的虚拟内存，导致推理速度严重变慢。此时可以使用量化后的模型如 chatglm-6b-int4。因为 GPU 上量化的 kernel 是使用 CUDA 编写的，因此无法在 MacOS 上使用，只能使用 CPU 进行推理。\n# INT8 量化的模型将&quot;THUDM/chatglm-6b-int4&quot;改为&quot;THUDM/chatglm-6b-int8&quot;model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b-int4&quot;,trust_remote_code=True).float()\n为了充分使用 CPU 并行，还需要单独安装 OpenMP。\n多卡部署如果你有多张 GPU，但是每张 GPU 的显存大小都不足以容纳完整的模型，那么可以将模型切分在多张GPU上。首先安装 accelerate: pip install accelerate，然后通过如下方法加载模型：\nfrom utils import load_model_on_gpusmodel = load_model_on_gpus(&quot;THUDM/chatglm-6b&quot;, num_gpus=2)\n即可将模型部署到两张 GPU 上进行推理。你可以将 num_gpus 改为你希望使用的 GPU 数。默认是均匀切分的，你也可以传入 device_map 参数来自己指定。 \n高效参数微调基于 P-tuning v2 的高效参数微调。具体使用方法详见 ptuning&#x2F;README.md。\nChatGLM-6B 示例以下是一些使用 web_demo.py 得到的示例截图。\n局限性由于 ChatGLM-6B 的小规模，其能力仍然有许多局限性。以下是我们目前发现的一些问题：\n\n模型容量较小：6B 的小容量，决定了其相对较弱的模型记忆和语言能力。在面对许多事实性知识任务时，ChatGLM-6B 可能会生成不正确的信息；它也不擅长逻辑类问题（如数学、编程）的解答。\n\n\n产生有害说明或有偏见的内容：ChatGLM-6B 只是一个初步与人类意图对齐的语言模型，可能会生成有害、有偏见的内容。（内容可能具有冒犯性，此处不展示）\n\n英文能力不足：ChatGLM-6B 训练时使用的指示&#x2F;回答大部分都是中文的，仅有极小一部分英文内容。因此，如果输入英文指示，回复的质量远不如中文，甚至与中文指示下的内容矛盾，并且出现中英夹杂的情况。\n\n易被误导，对话能力较弱：ChatGLM-6B 对话能力还比较弱，而且 “自我认知” 存在问题，并很容易被误导并产生错误的言论。例如当前版本的模型在被误导的情况下，会在自我认知上发生偏差。\n\n\n\n\n协议本仓库的代码依照 Apache-2.0 协议开源，ChatGLM-6B 模型的权重的使用则需要遵循 Model License。ChatGLM-6B 权重对学术研究完全开放，在填写问卷进行登记后亦允许免费商业使用。\n引用如果你觉得我们的工作有帮助的话，请考虑引用下列论文\n@article&#123;zeng2022glm,  title=&#123;Glm-130b: An open bilingual pre-trained model&#125;,  author=&#123;Zeng, Aohan and Liu, Xiao and Du, Zhengxiao and Wang, Zihan and Lai, Hanyu and Ding, Ming and Yang, Zhuoyi and Xu, Yifan and Zheng, Wendi and Xia, Xiao and others&#125;,  journal=&#123;arXiv preprint arXiv:2210.02414&#125;,  year=&#123;2022&#125;&#125;\n@inproceedings&#123;du2022glm,  title=&#123;GLM: General Language Model Pretraining with Autoregressive Blank Infilling&#125;,  author=&#123;Du, Zhengxiao and Qian, Yujie and Liu, Xiao and Ding, Ming and Qiu, Jiezhong and Yang, Zhilin and Tang, Jie&#125;,  booktitle=&#123;Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)&#125;,  pages=&#123;320--335&#125;,  year=&#123;2022&#125;&#125;\n\n\n\n","categories":["Github项目"],"tags":["github"]},{"title":"SITE-193","url":"/Arknight-notes/posts/4183.html","content":"\n\n\nZhongye &#x2F;From an Open Source Organization in Guangzhou-University*\nhttps://github.com/Guangzhou-University-SITE-193\n💻 Skills🥪 Front End &#x2F; 🥗 Backend &#x2F; 🍊 Network Security &#x2F; 🍑 Machine Learning\n📋 Tech Stack\n\n\n\n\n\n关注站长博客！本站： \t\thttps://zhongye1.github.io/Arknight-notes/\n本站RSS订阅：  https://zhongye1.github.io/Arknight-notes/rss.xml\n主站：\t \thttps://zhongye1.github.io\n主站RSS订阅：  https://zhongye1.github.io/atom.xml\n193工作站：      https://github.com/Guangzhou-University-SITE-193\nGitHub：  \t https://github.com/Zhongye1\nQQ：2760913192\n关于本站用于做归档页面整理和知识储备，建设中\n","categories":["日志"],"tags":["日志"]},{"title":"关于数据结构的一些想法","url":"/Arknight-notes/posts/12835.html","content":"\n鉴于我校 [已编辑] 的教学安排，在刚学完c语言程序设计后，大一下就开始了基于c++的数据结构的学习，由于算法基础过于薄弱，数据结构拼尽全力期末复习只考了70而且掌握不足，写不出东西来，现在重拾旧事把数据结构重新学一遍\n个人认为学不明白踩过的坑有几点：\n\n第一，在大学的课程里并没有讲明白一个问题，就是数据结构算法应该怎么样和实际场景结合。比如，老师讲到树形结构的时候会说，树形效率很高， 它的插入和查找时间复杂度都是O(LogN)，是一种非常重要的数据结构，在计算机中应用非常广泛，讲到这里就讲完了,留下我们一头雾水。\n\n第二，在实际其实没有机会从零开始手写一个数据结构和算法，在主流的编程语言中都已经封装好了。\n\n第三，你广州大学的数据结构排课极少，这么难学的课竟然课时还没思政课多。不知道计算机学院那边是什么情况，蹭课时那边一个时间复杂度讲了三节课，心死了，还是得靠自己学\n很多时候我们能说出队列是什么原理，栈是什么原理，树的旋转是怎么回事， 但如果让我们自己实现一个队列或者栈还是有点难度的， 尤其是在需要考虑一些性能问题的时候。遂决定把这些重新拾起来。\n\n\n\n","categories":["数据结构"],"tags":["算法"]},{"title":"利用chrome F12 测试应用实践详解","url":"/Arknight-notes/posts/41925.html","content":"首先介绍 Chrome 开发者工具中，调试时使用最多的三个功能页面是：元素（ELements）、控制台（Console）、源代码（Sources），此外还有网络（Network）等。\n\n\n元素（Elements）：用于查看或修改 HTML 元素的属性、CSS 属性、监听事件、断点等。\n控制台（Console）：控制台一般用于执行一次性代码，查看 JavaScript 对象，查看调试日志信息或异常信息。\n源代码（Sources）：该页面用于查看页面的 HTML 文件源代码、JavaScript 源代码、CSS 源代码，此外最重要的是可以调试 JavaScript 源代码，可以给 JS 代码添加断点等。\n网络（Network）：网络页面主要用于查看 header 等与网络连接相关的信息。\n\n1、元素（Elements）\n查看元素代码：点击如图\n\n箭头（或用者用快捷键 Ctrl+Shift+C）进入选择元素模式，然后从页面中选择需要查看的元素，然后可以在开发者工具元素（Elements）一栏中定位到该元素源代码的具体位置 。\n查看元素属性：可从被定位的源码中查看部分，如 class、src，也可在右边的侧栏中查看全部的属性，如下图位置查看\n\n修改元素的代码与属性：可直接双击想要修改的部分，然后就进行修改，或者选中要修改部分后点击右键进行修改，如下图\n**\n\n**\n注意：这个修改也仅对当前的页面渲染生效，不会修改服务器的源代码，故而这个功能也是作为调试页面效果而使用。\n右边的侧栏个功能的介绍:如下图所示\n\n2、控制台（Console）\n\n查看 JS 对象的及其属性\n执行 JS 语句\n查看控制台日志：当网页的 JS 代码中使用了 console.log()函数时，该函数输出的日志信息会在控制台中显示。日志信息一般在开发调试时启用，而当正式上线后，一般会将该函数去掉。\n\n**3、源代码（Sources）**其主要功能如下介绍\n\n4、网络（Network）大体功能如下：\n\n\n打开浏览器,按 f12,点击 Network,可以查看相关网络请求信息,记得是打开 f12 之后再刷新页面才会开始记录的\n\n\n\n查看 Network 基本信息,请求了哪些地址及每个 URL 的网络相关请求信息都可以看的到 URL，响应状态码，响应数据类型，响应数据大小，响应时间\n\n\n\n请求 URL 可进行筛选和分类，选择不同分类,查看请求 URL,方便查找\n\n\n\n也可以直接 Filter 搜索查询相关 URL，可以输入关键字或者正则表达式进行查询\n\n\n\nWaterfall 能分割重要的请求耗时,查看具体请求耗时在哪个地方,鼠标指到相关区域可以看到具体耗时\n\n\n\n我们具体分析下里面每个各代表什么意思,分别耗时多少,通过这个来分析服务器到底是哪个环节出了问题\n\n\nQueueing 是排队的意思\nStalled 是阻塞 请求访问该 URL 的主机是有并发和连接数限制的,必须要等之前的执行才能执行之后的,这段时间的耗时\nDNS Lookup 是指域名解析所耗时间\nInitial connection 初始化连接时间,这里一般是 TCP 3 次连接握手时间\nSSL https 特有,是一种协议\nRequest sent 发送请求所消耗的时间\nWaiting 等待响应时间,这里一般是最耗时的\nContent Download 下载内容所需要消耗的时间\n\n请求文件具体说明\n\n一共分为四个模块：\n\nHeader：面板列出资源的请求 url、HTTP 方法、响应状态码、请求头和响应头及它们各自的值、请求参数等等\nPreview：预览面板，用于资源的预览。\nResponse：响应信息面板包含资源还未进行格式处理的内容\nTiming：资源请求的详细信息花费时间\n\n转载自 chrome 浏览器中 F12 功能的简单介绍 - 知乎 (zhihu.com)\n","categories":["笔记"],"tags":["前端开发"]},{"title":"数据结构-栈","url":"/Arknight-notes/posts/33985.html","content":"栈的基本概念栈的定义栈：是只允许在一端进行插入或删除的线性表。首先栈是一种线性表，但限定这种线性表只能在某一端进行插入和删除操作。栈顶（Top）：线性表允许进行插入删除的那一端。栈底（Bottom)：固定的，不允许进行插入和删除的另一端。空栈：不含任何元素的空表。\n栈又称为后进先出（Last In First Out）的线性表，简称LIFO结构\n栈的常见基本操作InitStack(&amp;S)：初始化一个空栈S\nStackEmpty(S)：判断一个栈是否为空，若栈为空则返回true，否则返回false\nPush(&amp;S, x)：进栈（栈的插入操作），若栈S未满，则将x加入使之成为新栈顶\nPop(&amp;S, &amp;x)：出栈（栈的删除操作），若栈S非空，则弹出栈顶元素，并用x返回\nGetTop(S, &amp;x)：读栈顶元素，若栈S非空，则用x返回栈顶元素\nDestroyStack(&amp;S)：栈销毁，并释放S占用的存储空间（“&amp;”表示引用调用）\n栈的顺序存储结构栈的顺序存储采用顺序存储的栈称为顺序栈，它利用一组地址连续的存储单元存放自栈底到栈顶的数据元素，同时附设一个指针（top）指示当前栈顶元素的位置。若存储栈的长度为MAXSIZE，则栈顶位置top必须小于MAXSIZE。当栈存在一个元素时，top等于0，因此通常把空栈的判断条件定位top等于-1。栈的顺序存储结构可描述为：\n#define MAXSIZE 5  //定义栈中元素的最大个数typedef struct SqStack&#123;    int data[MAXSIZE];    int top;&#125;SqStack;\n\n若现在有一个栈，MAXSIZE是5，则栈的普通情况、空栈、满栈的情况分别如下图所示：\n\n初始化void InitStack(SqStack* S)&#123;     //SqStack&amp; S 是 C++ 的引用参数，用于直接修改外部栈对象    //若用 C 语言，需改用指针（SqStack* S）    S-&gt;top = -1;             //初始化栈顶指针&#125;\n\n为什么要用 S-&gt;top = -1？\n顺序栈的本质是一个数组，栈顶指针 top 表示当前栈顶元素在数组中的位置索引。初始化时 top = -1 有\n空栈条件：top == -1当栈中没有元素时，top 指向数组的“前一个位置”（即无效索引），逻辑上表示“无元素”。\n入栈操作\n先让 top++，移动到下一个可用位置；将新元素存入 data[top]。例如，第一次入栈时，top 从 -1 变为 0，元素存入 data[0]，对应数组的第一个索引。\n判断栈满\n栈满条件：top == MAX_SIZE - 1如果数组大小为 MAX_SIZE，当 top 指向最后一个位置（即 MAX_SIZE - 1）时，表示栈已满。\n判断栈空bool StackEmpty(SqStack* S)&#123;    if( S-&gt;top == -1)&#123;        return true;        //栈中没有元素时，`top` 指向数组的“前一个位置”（即无效索引），逻辑上表示“无元素”    &#125;    return false;&#125;\n\n进栈bool Push(SqStack* S, int x)&#123;    if( S-&gt;top == MAXSIZE - 1 )&#123; //栈满，报错        return false;            &#125;    S-&gt;top++ ;                  //栈顶指针加1    S-&gt;data[S-&gt;top] = x;         //入栈,写入元素到新栈顶位置    //S-&gt;data[S-&gt;top]代表栈顶元素    return true;&#125;\n\n出栈bool Pop(SqStack* S, int* x) &#123;//通过指针修改外部变量    if (StackEmpty(S)) &#123;        printf(&quot;栈空，无法出栈\\n&quot;);        return false;    &#125;    *x = S-&gt;data[S-&gt;top];    S-&gt;top--;    printf(&quot;出栈元素: %d\\n&quot;, *x);    return x;&#125;\n\n读栈顶元素bool GetTop(SqStack* S, int* x) &#123;//通过指针修改外部变量    if (StackEmpty(S)) &#123;        printf(&quot;栈空，无栈顶元素\\n&quot;);        return false;    &#125;    *x = S-&gt;data[S-&gt;top];    printf(&quot;当前栈顶元素: %d\\n&quot;, *x);    return true;&#125;\n\n出栈和读栈顶元素操作需要返回两个信息：\n\n是否成功（通过 bool 返回值）。\n得到的元素值（通过 int* x 指针参数）。\n\n完整代码实现#include &lt;stdio.h&gt;#include &lt;stdbool.h&gt;#define MAXSIZE 5  // 示例栈容量设为5//栈结构定义typedef struct SqStack &#123;    int data[MAXSIZE];    int top;&#125; SqStack;// 初始化栈void InitStack(SqStack* S) &#123;    S-&gt;top = -1;&#125;// 判断栈空bool StackEmpty(SqStack* S) &#123;    return (S-&gt;top == -1);&#125;// 判断栈满bool StackFull(SqStack* S) &#123;    return (S-&gt;top == MAXSIZE - 1);&#125;// 入栈bool Push(SqStack* S, int x) &#123;    if (StackFull(S)) &#123;        printf(&quot;栈已满，无法入栈 %d\\n&quot;, x);        return false;    &#125;    S-&gt;top++;    S-&gt;data[S-&gt;top] = x;    printf(&quot;入栈元素: %d\\n&quot;, x);    return true;&#125;// 出栈（通过指针返回栈顶元素）bool Pop(SqStack* S, int* x) &#123;    if (StackEmpty(S)) &#123;        printf(&quot;栈空，无法出栈\\n&quot;);        return false;    &#125;    *x = S-&gt;data[S-&gt;top];    S-&gt;top--;    printf(&quot;出栈元素: %d\\n&quot;, *x);    return x;&#125;// 获取栈顶元素（通过指针返回）bool GetTop(SqStack* S, int* x) &#123;    if (StackEmpty(S)) &#123;        printf(&quot;栈空，无栈顶元素\\n&quot;);        return false;    &#125;    *x = S-&gt;data[S-&gt;top];    printf(&quot;当前栈顶元素: %d\\n&quot;, *x);    return true;&#125;// 打印栈内容（辅助函数）void PrintStack(SqStack* S) &#123;    if (StackEmpty(S)) &#123;        printf(&quot;栈空\\n&quot;);        return;    &#125;    printf(&quot;栈内容 (从底到顶): &quot;);    for (int i = 0; i &lt;= S-&gt;top; i++) &#123;        printf(&quot;%d &quot;, S-&gt;data[i]);    &#125;    printf(&quot;\\n&quot;);&#125;int main() &#123;    SqStack S;    int val;  // 用于接收出栈/栈顶元素的值    InitStack(&amp;S);    PrintStack(&amp;S);  // 栈空    // 入栈测试    Push(&amp;S, 10);    Push(&amp;S, 20);    Push(&amp;S, 30);    Push(&amp;S, 40);    Push(&amp;S, 50);   // 栈满    Push(&amp;S, 60);   // 触发栈满报错    PrintStack(&amp;S);  // 10 20 30 40 50    // 获取栈顶    GetTop(&amp;S, &amp;val);  // 50    // 出栈测试    Pop(&amp;S, &amp;val);     // 50出栈    Pop(&amp;S, &amp;val);     // 40出栈    PrintStack(&amp;S);    // 10 20 30    // 继续出栈直到栈空    Pop(&amp;S, &amp;val);     // 30    Pop(&amp;S, &amp;val);     // 20    Pop(&amp;S, &amp;val);     // 10    Pop(&amp;S, &amp;val);     // 触发栈空报错    PrintStack(&amp;S);    // 栈空    return 0;&#125;\n\n\n\n\n栈的链式存储结构采用链式存储的栈称为链栈，链栈的优点是便于多个栈共享存储空间和提高其效率，且不存在栈满上溢的情况。通常采用单链表实现，并规定所有操作都是在单链表的表头进行的。这里规定链栈没有头节点，Lhead指向栈顶元素\n\n对于空栈来说，链表原定义是头指针指向空，那么链栈的空其实就是top&#x3D;NULL的时候。\n链栈的结构定义：// 定义链式栈的节点结构体typedef struct LinkedStackNode &#123;\t    int data;                       // 存储栈元素    struct LinkedStackNode * next;  // 指向下一节点的指针&#125; LinkedStackNode, * LinkedStack;   // 类型别名：LinkedStackNode表示节点，LinkedStack表示节点指针LinkedStack top; // 声明一个栈顶指针（本质是LinkedStackNode*类型）\n\n\n\n初始化空栈//初始化LinkedStack Init_LinkedStack()                                       &#123;\t\tLinkedStack top=(LinkedStackNode * )malloc (sizeof( LinkedStackNode));\tif(top!=NULL)//申请空间成功\ttop-&gt;next=NULL;//设置栈顶指针为空\treturn top;&#125;\n\n判断栈空//判栈空int LinkedStack_Empty(LinkedStack top)                            &#123;\t\tif(top-&gt;next==NULL)//检查栈顶指针的值 \t&#123;\t\treturn 1;//栈S为空，函数返回1\t&#125;\t\telse\t&#123;\t\treturn 0;\t&#125;&#125;\n\n入栈int Push_LinkedStack(LinkedStack top,elemtype x)                     \t//插入数据元素x为新的栈顶元素&#123;\t\tLinkedStackNode * node;\tnode=(LinkedStackNode * )malloc(sizeof(LinkedStackNode));\tif(node==NULL)\t&#123;\t\treturn 0;//申请结点空间失败,插入失败，函数返回0\t&#125;\telse\t&#123;\t\tnode-&gt;data=x;//设置新结点的数据域\t\tnode-&gt;next=top-&gt;next;//设置新结点的指针城\t\ttop-&gt;next=node;//设置头结点指针城指向新的栈顶元素\t\treturn 1;//插入成功，函数返回1\t&#125;&#125;\n\n出栈int Pop_LinkedStack(LinkedStack top, elemtype *x)                    &#123;\tLinkedStackNode * node;\tif(top-&gt;next==NULL)\t&#123;\t\treturn 0;\t&#125;\telse\t&#123;\t\tnode=top-&gt;next;//将原栈顶数据元素弹出并赋给node\t\t*x=node-&gt;data;//将原栈顶数据元素的数据赋值给x\t\ttop-&gt;next=node-&gt;next;//top指向链栈中的下一个数据元素\t\tfree (node);//释放原栈顶数据元素所占的空间\t\treturn 1;\t&#125;&#125;  \n\n取栈顶元素int GetTop_LinkedStack(LinkedStack top)                &#123; \tif(top-&gt;next)      &#123;            return top-&gt;next-&gt;data;      &#125;      return -1;&#125;\n\n求栈长设置计数器，随top指针后移，计数器加1，直到遍历完所有元素。\n//求栈长int Length_LinkedStack(LinkedStack top)                                       &#123;\tint count = 0;\twhile(top-&gt;next!=NULL) \t&#123;\t\t++count;\t\ttop=top-&gt;next;\t&#125;\treturn count;&#125;\n\n\n\n完整代码实现#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;// 定义链式栈的节点结构体typedef struct LinkedStackNode &#123;\t    int data;                       // 存储栈元素    struct LinkedStackNode * next;  // 指向下一节点的指针&#125; LinkedStackNode, * LinkedStack;   // 类型别名：LinkedStackNode表示节点，LinkedStack表示节点指针LinkedStack top; // 声明一个栈顶指针（本质是LinkedStackNode*类型）//初始化LinkedStack Init_LinkedStack()                                       &#123;\t\tLinkedStack top=(LinkedStackNode * )malloc (sizeof( LinkedStackNode));\tif(top!=NULL)//申请空间成功\ttop-&gt;next=NULL;//设置栈顶指针为空\treturn top;&#125;//判栈空int LinkedStack_Empty(LinkedStack top)                            &#123;\t\tif(top-&gt;next==NULL)//检查栈顶指针的值 \t&#123;\t\treturn 1;//栈S为空，函数返回1\t&#125;\t\telse\t&#123;\t\treturn 0;\t&#125;&#125;//入栈int Push_LinkedStack(LinkedStack top,elemtype x)                     \t//插入数据元素x为新的栈顶元素&#123;\t\tLinkedStackNode * node;\tnode=(LinkedStackNode * )malloc(sizeof(LinkedStackNode));\tif(node==NULL)\t&#123;\t\treturn 0;//申请结点空间失败,插入失败，函数返回0\t&#125;\telse\t&#123;\t\tnode-&gt;data=x;//设置新结点的数据域\t\tnode-&gt;next=top-&gt;next;//设置新结点的指针城\t\ttop-&gt;next=node;//设置头结点指针城指向新的栈顶元素\t\treturn 1;//插入成功，函数返回1\t&#125;&#125;//求栈长int Length_LinkedStack(LinkedStack top)                                       &#123;\tint count = 0;\twhile(top-&gt;next!=NULL) \t&#123;\t\t++count;\t\ttop=top-&gt;next;\t&#125;\treturn count;&#125;//出栈int Pop_LinkedStack(LinkedStack top, elemtype *x)                    &#123;\tLinkedStackNode * node;\tif(top-&gt;next==NULL)\t&#123;\t\treturn 0;\t&#125;\telse\t&#123;\t\tnode=top-&gt;next;//将原栈顶数据元素弹出并赋给node\t\t*x=node-&gt;data;//将原栈顶数据元素的数据赋值给x\t\ttop-&gt;next=node-&gt;next;//top指向链栈中的下一个数据元素\t\tfree (node);//释放原栈顶数据元素所占的空间\t\treturn 1;\t&#125;&#125;  //取栈顶元素int GetTop_LinkedStack(LinkedStack top)                &#123; \tif(top-&gt;next)      &#123;            return top-&gt;next-&gt;data;      &#125;      return -1;&#125;//主函数void main()&#123;\tint i,t,x,a[20];\tLinkedStack top=Init_LinkedStack();//初始化栈\tx=LinkedStack_Empty(top);//判栈空结果赋值给X\tif(x=0)\t&#123;\t\tprintf(&quot;栈为空\\n&quot;);\t&#125;\tprintf(&quot;请依次输入5个数,开始入栈：\\n&quot;);\tfor(i=0;i&lt;5;i++) \t&#123;\t\tscanf(&quot;%d&quot;,&amp;a[i]);\t\tPush_LinkedStack(top,a[i]);\t\tx=GetTop_LinkedStack(top);\t\tif(x!=-1)\t\t&#123;\t\t\tprintf(&quot;当前栈顶元素为%d\\n&quot;,x);\t\t&#125;\t&#125;\tprintf(&quot;入栈结束\\n&quot;);\tprintf(&quot;栈长为%d\\n&quot;,Length_LinkedStack(top));\tprintf(&quot;开始出栈:\\n&quot;);\tfor (i=0;i&lt;5;i++)\t&#123;\t\tPop_LinkedStack(top,&amp;t);        printf(&quot;%d&quot;,t);\t&#125;\tprintf(&quot;\\n&quot;);\tprintf(&quot;出栈后栈长为%d\\n&quot;,Length_LinkedStack(top));&#125;\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"数据结构-算法复杂度","url":"/Arknight-notes/posts/25842.html","content":"算法复杂度算法复杂度旨在计算在输入数据量 N的情况下，算法的「时间使用」和「空间使用」情况；体现算法运行使用的时间和空间随「数据大小 N」而增大的速度。\n算法复杂度主要可从 时间 、空间 两个角度评价：\n\n时间： 假设各操作的运行时间为固定常数，统计算法运行的「计算操作的数量」 ，以代表算法运行所需时间；\n空间： 统计在最差情况下，算法运行所需使用的「最大空间」；\n\n「输入数据大小N」指算法处理的输入数据量；根据不同算法，具有不同定义，例如：\n\n排序算法： N代表需要排序的元素数量；\n搜索算法： N代表搜索范围的元素总数，例如数组大小、矩阵大小、二叉树节点数、图节点和边数等；\n\n接下来，我们将分别从概念定义、符号表示、常见种类、时空权衡、示例解析、示例题目等角度入手，学习「时间复杂度」和「空间复杂度」。\n时间复杂度代码执行次数的简化估算值就是时间复杂度。\n一些例子\n\n线性复杂度O(N)：单层循环，如遍历数组求和。\n\n对数复杂度O(logN)：二分查找。\n\n线性对数复杂度O(NlogN)：快速排序或归并排序的分治策略。\n\n平方复杂度O(N^2)：双重循环，如冒泡排序。\n\n指数复杂度O(2^N)：递归斐波那契。\n\n阶乘复杂度O(N!)：全排列生成。\n其中有：O(1)&lt;O(logN)&lt;O(N)&lt;O(NlogN)&lt;O(N^2)&lt;O(2^N)&lt;O(N!)\n\n\n\n基本复杂度计算层层（循环、递归）相加：比如有2层循环，第一层循环共执行n次基本语句，每个基本语句执行1次，也就是n个“1”次相加，为n；第二层循环执行log2n次第一次循环，每个第一次循环执行n次，总的也就是log2n个“n”次相加为nlog2n，故时间复杂度为O(nlogn)。\n复杂度计算的核心规则\n单层循环：直接取循环次数，如 O(n).  \n嵌套循环：各层循环次数相乘，如 O(n²) 或 O(n log n).  \n递归算法：• 递归次数 × 每次递归的操作次数，如斐波那契数列的 O(2ⁿ).• 分治策略（如归并排序）通过主定理计算，结果为 O(n log n).  \n忽略低阶项：如 T(n) = 3n² + 2n + 1 简化为 O(n²).\n\n1. O(1) — 常数复杂度特点：运行次数与 N 大小呈常数关系，即不随输入数据大小 N 的变化而变化。\n示例：访问数组元素或交换变量。  \n// 访问数组元素int getElement(int arr[], int index) &#123;    return arr[index]; // 无论数组大小，直接访问固定位置&#125;// 交换变量void swap(int *a, int *b) &#123;    int temp = *a;    *a = *b;    *b = temp; // 仅需三次赋值操作&#125;\n\n\n\n2. O(log n) — 对数复杂度特点：每次操作将问题规模缩减为固定比例（如折半）。示例：二分查找。  \nint binarySearch(int arr[], int left, int right, int target) &#123;    while (left &lt;= right) &#123;        int mid = left + (right - left) / 2;        if (arr[mid] == target) return mid;        if (arr[mid] &lt; target) left = mid + 1;        else right = mid - 1; // 每次搜索范围减半    &#125;    return -1;&#125;\n\n如下图所示，为二分查找的时间复杂度示意图，每次二分将搜索区间缩小一半。\n\n\n3. O(n) — 线性复杂度特点：执行时间与输入规模成线性正比。示例：遍历数组求和。  \nint sumArray(int arr[], int size) &#123;    int sum = 0;    for (int i = 0; i &lt; size; i++) &#123;        sum += arr[i]; // 遍历所有元素，执行次数为n    &#125;    return sum;&#125;\n\n\n\n4. O(n log n) — 对数线性复杂度特点：两层循环相互独立，第一层和第二层时间复杂度分别为 O(log⁡N) 和 O(N)，则总体时间复杂度为 O(Nlog⁡N)\n结合线性与对数操作，常见于分治算法。示例：快速排序。  \nvoid quickSort(int arr[], int low, int high) &#123;    if (low &lt; high) &#123;        int pivot = partition(arr, low, high); // 分区操作O(n)        quickSort(arr, low, pivot - 1);  // 递归左半部分        quickSort(arr, pivot + 1, high); // 递归右半部分    &#125;&#125;// 每次递归将问题规模分半，递归深度为log n，每层总操作次数为n\n\n线性对数阶常出现于排序算法，例如「快速排序」、「归并排序」、「堆排序」等，其时间复杂度原理如下图所示。\n\n\n5. O(nᵏ) — 多项式复杂度（k&#x3D;2为例）特点：嵌套循环导致时间复杂度为输入规模的k次方。示例：冒泡排序。 第一层和第二层时间复杂度分别为 O(N) 和 O(N)，则总体时间复杂度为 O(N^2) \nvoid bubbleSort(int arr[], int size) &#123;    for (int i = 0; i &lt; size-1; i++) &#123;        for (int j = 0; j &lt; size-i-1; j++) &#123;            if (arr[j] &gt; arr[j+1]) &#123;                swap(&amp;arr[j], &amp;arr[j+1]); // 双重循环，操作次数为n²            &#125;        &#125;    &#125;&#125;\n\n\n\n6. O(kⁿ) — 指数复杂度特点：问题规模每增加1，计算量翻倍。示例：斐波那契数列的递归实现。  \nint fibonacci(int n) &#123;    if (n &lt;= 1) return n;    return fibonacci(n-1) + fibonacci(n-2); // 每次递归分裂为两次调用，复杂度为O(2ⁿ)&#125;\n\n\n\n7. O(n!) — 阶乘复杂度特点：问题规模每增加1，计算量增长为阶乘级。示例：生成全排列，给定 NN 个互不重复的元素，求其所有可能的排列方案（递归回溯）。  \nint algorithm(int N) &#123;    if (N &lt;= 0) return 1;    int count = 0;    for (int i = 0; i &lt; N; i++) &#123;        count += algorithm(N - 1);    &#125;    return count;&#125;\n\n\n时间复杂度的意义时间复杂度不同，随着输入数据量的增加，代码运行的时间也会增加。\n例如O(1)无论输入数据如何增多，代码运行时间都不变。而O(n)的运行时间和输入数据量成正比。如果时间复杂度过高，例如O(2^n)，那么在小数据情况下，代码还可以运行，一旦数据量增大，则代码的运行时间将会几何级增加。\n\n\n代码执行时间总结如下：\n\n\n\n名称\n时间复杂度\n\n\n\n常数时间\nO(1)\n\n\n对数时间\nO(log n)\n\n\n线性时间\nO(n)\n\n\n线性对数时间\nO(nlog n)\n\n\n二次时间\nO(n^2)\n\n\n三次时间\nO(n^3)\n\n\n指数时间\nO(2^n)\n\n\n常见的时间复杂度\n\n\n\n空间复杂度\n空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度。空间复杂度不是程序占用了多少字节的空间，因为这个也没太大意义，所以空间复杂度算的是变量的个数。空间复杂度计算规则基本跟时间复杂度类似，也使用大O渐进表示法。\n\n常数 O(1)//计算冒泡排序函数的空间复杂度void BubbleSort(int* a, int N)&#123;\tassert(a);\tfor (int i = 0; i &lt; N; i++)\t&#123;\t\tint exchange = 0;\t\tfor (int j = 0; j &lt; N - 1 - i; j++)\t\t&#123;\t\t\tif (a[j]&gt;a[j + 1])\t\t\t&#123;\t\t\t\tint tmp = a[j];\t\t\t\ta[j] = a[j + 1];\t\t\t\ta[j + 1] = tmp;\t\t\t\texchange = 1;\t\t\t&#125;\t\t&#125;\t\tif (exchange == 0)\t\t\tbreak;\t&#125;&#125;\n\n冒泡排序函数中使用了常数个额外空间（即常数个变量），所以用大O的渐进表示法表示冒泡排序函数的空间复杂度为O(1) 。\n线性 O*(*N)//计算阶乘递归函数的空间复杂度long long Factorial(size_t N)&#123;\treturn N &lt; 2 ? N : Factorial(N - 1)*N;&#125;\n\n阶乘递归函数会依次调用Factorial(N),Factorial(N-1),…,Factorial(2),Factorial(1)，开辟了N个空间，所以空间复杂度为O(N) 。\n\n平方 O(N²)元素数量与 N呈平方关系的任意类型集合（常见于矩阵），皆使用平方大小的空间。\n\n递归调用栈的深度每次递归调用参数递减 1，直到 N ≤ 0。递归深度为 N 次（例如 N&#x3D;5 时调用链为 algorithm(5) → algorithm(4) → … → algorithm(0)）\n每次递归的临时空间占用每次递归调用时，会在栈上动态创建一个大小为 N 的整型数组 int nums[N]。随着递归深度增加，数组长度的变化为 N, N-1, N-2, …, 1\n空间累计计算总空间占用为各次递归调用中数组大小的累加：S(N)&#x3D;N+(N−1)+(N−2)+⋯+1&#x3D;2N(N+1)​根据大 O 表示法，简化为 ​​O(N²)​​\n\nint algorithm(int N) &#123;    if (N &lt;= 0) return 0;    int nums[N];    return algorithm(N - 1);&#125;\n\n\n指数 O(2ᴺ)指数阶常见于二叉树、多叉树的空间分析，例如：\n\n满二叉树\n高度为 N 的满二叉树，节点总数为 2ᴺ，空间复杂度为 O(2ᴺ)。\n\n满 m 叉树\n高度为 N 的满 m 叉树，节点总数为 mᴺ。\n当 m 为常数时，O(mᴺ) &#x3D; O(2ᴺ)（指数级增长性质相同）。\n\n\n指数阶常见于二叉树、多叉树。例如，高度为 N的「满二叉树」的节点数量为 2^N，占用 O(2^N)大小的空间；同理，高度为 N的「满 m叉树」的节点数量为 m^N，占用 O(m^N)大小的空间。\n\n对数 O(log N)对数阶常出现于分治算法的栈帧空间累计、数据类型转换等，例如：\n\n快速排序，平均空间复杂度为 Θ(log N)，最差空间复杂度为 O(N)。通过应用尾递归优化，可以将快速排序的最差空间复杂度限定至 O(N)。\n数字转化为字符串，设某正整数为 N，则字符串的空间复杂度为 O(log N)。正整数 N 的位数为 log₁₀ N，即转化的字符串长度为 log₁₀ N，因此空间复杂度为 O(log N)。\n\n注：递归算法的空间复杂度通常是递归的深度（即递归多少层）。\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"数据结构-线性表（链表）","url":"/Arknight-notes/posts/42928.html","content":"链表（链式存储结构）链表又称单链表、链式存储结构，用于存储逻辑关系为“一对一”的数据。\n和顺序表不同，使用链表存储数据，不强制要求数据在内存中集中存储，各个元素可以分散存储在内存中。例如，使用链表存储 {1,2,3}，各个元素在内存中的存储状态可能是：\n\n可以看到，数据不仅没有集中存放，在内存中的存储次序也是混乱的。那么，链表是如何存储数据间逻辑关系的呢？\n链表存储数据间逻辑关系的实现方案是：为每一个元素配置一个指针，每个元素的指针都指向自己的直接后继元素，如下图所示：\n\n显然，我们只需要记住元素 1 的存储位置，通过它的指针就可以找到元素 2，通过元素 2 的指针就可以找到元素 3，以此类推，各个元素的先后次序一目了然。\n像图 2 这样，数据元素随机存储在内存中，通过指针维系数据之间“一对一”的逻辑关系，这样的存储结构就是链表。\n结点（节点）\n很多教材中，也将“结点”写成“节点”，它们是一个意思。\n\n在链表中，每个数据元素都配有一个指针，这意味着，链表上的每个“元素”都长下图这个样子：\n\n数据域用来存储元素的值，指针域用来存放指针。数据结构中，通常将图 3 这样的整体称为结点。\n也就是说，链表中实际存放的是一个一个的结点，数据元素存放在各个结点的数据域中。举个简单的例子，图 2 中 {1,2,3} 的存储状态用链表表示，如下图所示：\n\n在 C 语言中，可以用结构体表示链表中的结点，例如：\ntypedef struct link&#123;    char elem; //代表数据域    struct link * next; //代表指针域，指向直接后继元素&#125;Link;\n\n\n我们习惯将结点中的指针命名为 next，因此指针域又常称为“Next 域”。\n\n头结点、头指针和首元结点图 4 所示的链表并不完整，一个完整的链表应该由以下几部分构成：\n\n头指针：一个和结点类型相同的指针，它的特点是：永远指向链表中的第一个结点。上文提到过，我们需要记录链表中第一个元素的存储位置，就是用头指针实现。\n结点：链表中的节点又细分为头结点、首元结点和其它结点：\n\n\n头结点：某些场景中，为了方便解决问题，会故意在链表的开头放置一个空结点，这样的结点就称为头结点。也就是说，头结点是位于链表开头、数据域为空（不利用）的结点。\n首元结点：指的是链表开头第一个存有数据的结点。\n其他节点：链表中其他的节点。\n\n也就是说，一个完整的链表是由头指针和诸多个结点构成的。每个链表都必须有头指针，但头结点不是必须的。\n例如，创建一个包含头结点的链表存储 {1,2,3}，如下图所示：\n\n再次强调，头指针永远指向链表中的第一个结点。换句话说，如果链表中包含头结点，那么头指针指向的是头结点，反之头指针指向首元结点。\n链表的创建创建一个链表，实现步骤如下：\n\n定义一个头指针；\n创建一个头结点或者首元结点，让头指针指向它；\n每创建一个结点，都令其直接前驱结点的指针指向它。\n\n例如，创建一个存储 {1,2,3,4} 且无头节点的链表，C 语言实现代码为：\nLink* initLink() &#123;    int i;    //1、创建头指针    Link* p = NULL;    //2、创建首元结点    Link* temp = (Link*)malloc(sizeof(Link));    temp-&gt;elem = 1;    temp-&gt;next = NULL;    //头指针指向首元结点    p = temp;    //3、每创建一个结点，都令其直接前驱结点的指针指向它    for (i = 2; i &lt; 5; i++) &#123;        //创建一个结点        Link* a = (Link*)malloc(sizeof(Link));        a-&gt;elem = i;        a-&gt;next = NULL;        //每次 temp 指向的结点就是 a 的直接前驱结点        temp-&gt;next = a;        //temp指向下一个结点（也就是a),为下次添加结点做准备        temp = temp-&gt;next;    &#125;    return p;&#125;\n\n再比如，创建一个存储 {1,2,3,4} 且含头节点的链表，则 C 语言实现代码为：\nLink* initLink() &#123;    int i;    //1、创建头指针    Link* p = NULL;    //2、创建头结点    Link* temp = (Link*)malloc(sizeof(Link));    temp-&gt;elem = 0;    temp-&gt;next = NULL;    //头指针指向头结点    p = temp;    //3、每创建一个结点，都令其直接前驱结点的指针指向它    for (i = 1; i &lt; 5; i++) &#123;        //创建一个结点        Link* a = (Link*)malloc(sizeof(Link));        a-&gt;elem = i;        a-&gt;next = NULL;        //每次 temp 指向的结点就是 a 的直接前驱结点        temp-&gt;next = a;        //temp指向下一个结点（也就是a),为下次添加结点做准备        temp = temp-&gt;next;    &#125;    return p;&#125;\n\n链表的使用对于创建好的链表，我们可以依次获取链表中存储的数据，例如：\n#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;//链表中节点的结构typedef struct link &#123;    int  elem;    struct link* next;&#125;Link;Link* initLink() &#123;    int i;    //1、创建头指针    Link* p = NULL;    //2、创建头结点    Link* temp = (Link*)malloc(sizeof(Link));    temp-&gt;elem = 0;    temp-&gt;next = NULL;    //头指针指向头结点    p = temp;    //3、每创建一个结点，都令其直接前驱结点的指针指向它    for (i = 1; i &lt; 5; i++) &#123;        //创建一个结点        Link* a = (Link*)malloc(sizeof(Link));        a-&gt;elem = i;        a-&gt;next = NULL;        //每次 temp 指向的结点就是 a 的直接前驱结点        temp-&gt;next = a;        //temp指向下一个结点（也就是a),为下次添加结点做准备        temp = temp-&gt;next;    &#125;    return p;&#125;void display(Link* p) &#123;    Link* temp = p;//temp指针用来遍历链表    //只要temp指向结点的next值不是NULL，就执行输出语句。    while (temp) &#123;        Link* f = temp;//准备释放链表中的结点        printf(&quot;%d &quot;, temp-&gt;elem);        temp = temp-&gt;next;        free(f);    &#125;    printf(&quot;\\n&quot;);&#125;int main() &#123;    Link* p = NULL;    printf(&quot;初始化链表为：\\n&quot;);    //创建链表&#123;1,2,3,4&#125;    p = initLink();    //输出链表中的数据    display(p);    return 0;&#125;\n\n程序中创建的是带头结点的链表，头结点的数据域存储的是元素 0，因此最终的输出结果为：\n\n0 1 2 3 4\n\n如果不想输出头结点的值，可以将 p-&gt;next 作为实参传递给 display() 函数。\n如果程序中创建的是不带头结点的链表，最终的输出结果应该是：\n\n1 2 3 4\n\n单链表的基本操作学会创建链表之后，本节继续讲解链表的一些基本操作，包括向链表中添加数据、删除链表中的数据、查找和更改链表中的数据。\n首先，创建一个带头结点的链表，链表中存储着 {1,2,3,4}：\n//链表中节点的结构typedef struct link &#123;    int  elem;    struct link* next;&#125;Link;Link* initLink() &#123;    int i;    //1、创建头指针    Link* p = NULL;    //2、创建头结点    Link* temp = (Link*)malloc(sizeof(Link));    temp-&gt;elem = 0;    temp-&gt;next = NULL;    //头指针指向头结点    p = temp;    //3、每创建一个结点，都令其直接前驱结点的指针指向它    for (i = 1; i &lt; 5; i++) &#123;        //创建一个结点        Link* a = (Link*)malloc(sizeof(Link));        a-&gt;elem = i;        a-&gt;next = NULL;        //每次 temp 指向的结点就是 a 的直接前驱结点        temp-&gt;next = a;        //temp指向下一个结点（也就是a),为下次添加结点做准备        temp = temp-&gt;next;    &#125;    return p;&#125;\n\n链表插入元素同顺序表一样，向链表中增添元素，根据添加位置不同，可分为以下 3 种情况：\n\n插入到链表的头部，作为首元节点；\n插入到链表中间的某个位置；\n插入到链表的最末端，作为链表中最后一个结点；\n\n对于有头结点的链表，3 种插入元素的实现思想是相同的，具体步骤是：\n\n将新结点的 next 指针指向插入位置后的结点；\n将插入位置前结点的 next 指针指向插入结点；\n\n例如，在链表 {1,2,3,4}的基础上分别实现在头部、中间、尾部插入新元素 5，其实现过程如下图所示：\n\n从图中可以看出，虽然新元素的插入位置不同，但实现插入操作的方法是一致的，都是先执行步骤 1 ，再执行步骤 2。实现代码如下：\nvoid insertElem(Link* p, int elem, int add) &#123;    int i;    Link* c = NULL;    Link* temp = p;//创建临时结点temp    //首先找到要插入位置的上一个结点    for (i = 1; i &lt; add; i++) &#123;        temp = temp-&gt;next;        if (temp == NULL) &#123;            printf(&quot;插入位置无效\\n&quot;);            return;        &#125;    &#125;    //创建插入结点c    c = (Link*)malloc(sizeof(Link));    c-&gt;elem = elem;    //① 将新结点的 next 指针指向插入位置后的结点    c-&gt;next = temp-&gt;next;    //② 将插入位置前结点的 next 指针指向插入结点；    temp-&gt;next = c;&#125;\n\n注意：链表插入元素的操作必须是先步骤 1，再步骤 2；反之，若先执行步骤 2，除非再添加一个指针，作为插入位置后续链表的头指针，否则会导致插入位置后的这部分链表丢失，无法再实现步骤 1。\n对于没有头结点的链表，在头部插入结点比较特殊，需要单独实现。\n\n和 2)、3) 种情况相比，由于链表没有头结点，在头部插入新结点，此结点之前没有任何结点，实现的步骤如下：\n\n将新结点的指针指向首元结点；\n将头指针指向新结点。\n\n实现代码如下：\nLink* insertElem(Link* p, int elem, int add) &#123;    if (add == 1) &#123;        //创建插入结点c        Link* c = (Link*)malloc(sizeof(Link));        c-&gt;elem = elem;        c-&gt;next = p;        p = c;        return p;    &#125;    else &#123;        int i;        Link* c = NULL;        Link* temp = p;//创建临时结点temp        //首先找到要插入位置的上一个结点        for (i = 1; i &lt; add-1; i++) &#123;            temp = temp-&gt;next;            if (temp == NULL) &#123;                printf(&quot;插入位置无效\\n&quot;);                return p;            &#125;        &#125;        //创建插入结点c        c = (Link*)malloc(sizeof(Link));        c-&gt;elem = elem;        //向链表中插入结点        c-&gt;next = temp-&gt;next;        temp-&gt;next = c;        return p;    &#125;&#125;\n\n\n注意当 add&#x3D;&#x3D;1 成立时，形参指针 p 的值会发生变化，因此需要它的新值作为函数的返回值返回。\n\n链表删除元素从链表中删除指定数据元素时，实则就是将存有该数据元素的节点从链表中摘除。\n对于有头结点的链表来说，无论删除头部（首元结点）、中部、尾部的结点，实现方式都一样，执行以下三步操作：\n\n找到目标元素所在结点的直接前驱结点；\n将目标结点从链表中摘下来;\n手动释放结点占用的内存空间；\n\n从链表上摘除目标节点，只需找到该节点的直接前驱节点 temp，执行如下操作：\ntemp-&gt;next=temp-&gt;next-&gt;next;\n\n例如，从存有 {1,2,3,4}的链表中删除存储元素 3 的结点，则此代码的执行效果如图 3 所示：\n\n实现代码如下：\n//p为原链表，elem 为要删除的目标元素int delElem(Link* p, int elem) &#123;    Link* del = NULL, *temp = p;    int find = 0;    //1、找到目标元素的直接前驱结点    while (temp-&gt;next) &#123;        if (temp-&gt;next-&gt;elem == elem) &#123;            find = 1;            break;        &#125;        temp = temp-&gt;next;    &#125;    if (find == 0) &#123;        return -1;//删除失败    &#125;    else    &#123;        //标记要删除的结点        del = temp-&gt;next;        //2、将目标结点从链表上摘除        temp-&gt;next = temp-&gt;next-&gt;next;        //3、释放目标结点        free(del);        return 1;    &#125;&#125;\n\n对于不带头结点的链表，需要单独考虑删除首元结点的情况，删除其它结点的方式和上图完全相同，如下图所示：\n\n实现代码如下：\n//p为原链表，elem 为要删除的目标元素int delElem(Link** p, int elem) &#123;    Link* del = NULL, *temp = *p;    //删除首元结点需要单独考虑    if (temp-&gt;elem == elem) &#123;        (*p) = (*p)-&gt;next;        free(temp);        return 1;    &#125;    else    &#123;        int find = 0;        //1、找到目标元素的直接前驱结点        while (temp-&gt;next) &#123;            if (temp-&gt;next-&gt;elem == elem) &#123;                find = 1;                break;            &#125;            temp = temp-&gt;next;        &#125;        if (find == 0) &#123;            return -1;//删除失败        &#125;        else        &#123;            //标记要删除的结点            del = temp-&gt;next;            //2、将目标结点从链表上摘除            temp-&gt;next = temp-&gt;next-&gt;next;            //3、释放目标结点            free(del);            return 1;        &#125;    &#125;&#125;\n\n函数返回 1 时，表示删除成功；返回 -1，表示删除失败。注意，该函数的形参 p 为二级指针，调用时需要传递链表头指针的地址。\n链表查找元素在链表中查找指定数据元素，最常用的方法是：从首元结点开始依次遍历所有节点，直至找到存储目标元素的结点。如果遍历至最后一个结点仍未找到，表明链表中没有存储该元素。\n因此，链表中查找特定数据元素的 C 语言实现代码为：\n//p为原链表，elem表示被查找元素int selectElem(Link* p, int elem) &#123;    int i = 1;    //带头结点，p 指向首元结点    p = p-&gt;next;    while (p) &#123;        if (p-&gt;elem == elem) &#123;            return i;        &#125;        p = p-&gt;next;        i++;    &#125;    return -1;//返回-1，表示未找到&#125;\n\n注意第 5 行代码，对于有结点的链表，需要先将 p 指针指向首元结点；反之，对于不带头结点的链表，注释掉第 5 行代码即可。\n链表更新元素更新链表中的元素，只需通过遍历找到存储此元素的节点，对节点中的数据域做更改操作即可。\n直接给出链表中更新数据元素的 C 语言实现代码：\n//p 为有头结点的链表，oldElem 为旧元素，newElem 为新元素int amendElem(Link* p, int oldElem, int newElem) &#123;    p = p-&gt;next;    while (p) &#123;        if (p-&gt;elem == oldElem) &#123;            p-&gt;elem = newElem;            return 1;        &#125;        p = p-&gt;next;    &#125;    return -1;&#125;\n\n函数返回 1，表示更改成功；返回数字 -1，表示更改失败。如果是没有头结点的链表，直接删除第 3 行代码即可。\n\n双向链表目前我们所学到的链表，无论是动态链表还是静态链表，表中各个节点都只包含一个指针（游标），且都统一指向直接后继节点，这类链表又统称为单向链表或单链表。\n虽然单链表能 100% 存储逻辑关系为 “一对一” 的数据，但在解决某些实际问题时，单链表的执行效率并不高。例如，若实际问题中需要频繁地查找某个结点的前驱结点，使用单链表存储数据显然没有优势，因为单链表的强项是从前往后查找目标元素，不擅长从后往前查找元素。\n解决此类问题，可以建立双向链表（简称双链表）。\n双向链表是什么从名字上理解双向链表，即链表是 “双向” 的，如下图所示：\n\n“双向”指的是各节点之间的逻辑关系是双向的，头指针通常只设置一个。\n从上图中可以看到，双向链表中各节点包含以下 3 部分信息（如图 2 所示）：\n\n指针域：用于指向当前节点的直接前驱节点；\n数据域：用于存储数据元素。\n指针域：用于指向当前节点的直接后继节点；\n\n\n因此，双链表的节点结构用 C 语言实现为：\ntypedef struct line&#123;    struct line * prior; //指向直接前趋    int data;    struct line * next; //指向直接后继&#125;Line;\n\n双向链表的创建同单链表相比，双链表仅是各节点多了一个用于指向直接前驱的指针域。因此，我们可以在单链表的基础轻松实现对双链表的创建。\n需要注意的是，与单链表不同，双链表创建过程中，每创建一个新节点都要与其前驱节点建立两次联系，分别是：\n\n将新节点的 prior 指针指向直接前驱节点；\n将直接前驱节点的 next 指针指向新节点；\n\n这里给出创建双向链表的 C 语言实现代码：\nLine* initLine(Line* head) &#123;    Line* list = NULL;    head = (Line*)malloc(sizeof(Line));//创建链表第一个结点（首元结点）    head-&gt;prior = NULL;    head-&gt;next = NULL;    head-&gt;data = 1;    list = head;    for (int i = 2; i &lt;= 5; i++) &#123;        //创建并初始化一个新结点        Line* body = (Line*)malloc(sizeof(Line));        body-&gt;prior = NULL;        body-&gt;next = NULL;        body-&gt;data = i;        //直接前趋结点的next指针指向新结点        list-&gt;next = body;        //新结点指向直接前趋结点        body-&gt;prior = list;        list = list-&gt;next;    &#125;    return head;&#125;\n\n我们可以尝试着在 main 函数中输出创建的双链表，C 语言代码如下：\n#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct line &#123;    struct line* prior; //指向直接前趋    int data;    struct line* next; //指向直接后继&#125;Line;Line* initLine(Line* head) &#123;    int i;    Line* list = NULL;    head = (Line*)malloc(sizeof(Line));//创建链表第一个结点（首元结点）    head-&gt;prior = NULL;    head-&gt;next = NULL;    head-&gt;data = 1;    list = head;    for (i = 2; i &lt;= 5; i++) &#123;        //创建并初始化一个新结点        Line* body = (Line*)malloc(sizeof(Line));        body-&gt;prior = NULL;        body-&gt;next = NULL;        body-&gt;data = i;        //直接前趋结点的next指针指向新结点        list-&gt;next = body;        //新结点指向直接前趋结点        body-&gt;prior = list;        list = list-&gt;next;    &#125;    return head;&#125;//输出链表中的数据void display(Line* head) &#123;    Line* temp = head;    while (temp) &#123;        //如果该节点无后继节点，说明此节点是链表的最后一个节点        if (temp-&gt;next == NULL) &#123;            printf(&quot;%d\\n&quot;, temp-&gt;data);        &#125;        else &#123;            printf(&quot;%d &lt;-&gt; &quot;, temp-&gt;data);        &#125;        temp = temp-&gt;next;    &#125;&#125;//释放链表中结点占用的空间void free_line(Line* head) &#123;    Line* temp = head;    while (temp) &#123;        head = head-&gt;next;        free(temp);        temp = head;    &#125;&#125;int main()&#123;    //创建一个头指针    Line* head = NULL;    //调用链表创建函数    head = initLine(head);    //输出创建好的链表    display(head);    //显示双链表的优点    printf(&quot;链表中第 4 个节点的直接前驱是：%d&quot;, head-&gt;next-&gt;next-&gt;next-&gt;prior-&gt;data);    free_line(head);    return 0;&#125;\n\n程序运行结果：\n\n1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5 链表中第 4 个节点的直接前驱是：3\n\n双向链表基本操作前面学习了如何创建一个双向链表，本节学习有关双向链表的一些基本操作，即如何在双向链表中添加、删除、查找或更改数据元素。\n本节知识基于已熟练掌握双向链表创建过程的基础上，我们继续上节所创建的双向链表来学习本节内容，创建好的双向链表如下图所示：\n\n图 双向链表示意图\n双向链表添加节点根据数据添加到双向链表中的位置不同，可细分为以下 3 种情况：\n\n添加至表头\n\n将新数据元素添加到表头，只需要将该元素与表头元素建立双层逻辑关系即可。\n换句话说，假设新元素节点为 temp，表头节点为 head，则需要做以下 2 步操作即可：\n\ntemp-&gt;next&#x3D;head; head-&gt;prior&#x3D;temp;\n将 head 移至 temp，重新指向新的表头；\n\n例如，将新元素 7 添加至双链表的表头，则实现过程如图 2 所示：\n\n图 添加元素至双向链表的表头\n\n添加至表的中间位置\n\n同单链表添加数据类似，双向链表中间位置添加数据需要经过以下 2 个步骤，如下图所示：\n\n新节点先与其直接后继节点建立双层逻辑关系；\n新节点的直接前驱节点与之建立双层逻辑关系；\n\n\n图 双向链表中间位置添加数据元素\n\n添加至表尾\n\n与添加到表头是一个道理，实现过程如下（如图 4 所示）：\n\n找到双链表中最后一个节点；\n让新节点与最后一个节点进行双层逻辑关系；\n\n\n图 双向链表尾部添加数据元素\n因此，我们可以试着编写双向链表添加数据的 C 语言代码，参考代码如下：\nLine* insertLine(Line* head, int data, int add) &#123;    //新建数据域为data的结点    Line* temp = (Line*)malloc(sizeof(Line));    temp-&gt;data = data;    temp-&gt;prior = NULL;    temp-&gt;next = NULL;    //插入到链表头，要特殊考虑    if (add == 1) &#123;        temp-&gt;next = head;        head-&gt;prior = temp;        head = temp;    &#125;    else &#123;        int i;        Line* body = head;        //找到要插入位置的前一个结点        for (i = 1; i &lt; add - 1; i++) &#123;            body = body-&gt;next;            //只要 body 不存在，表明插入位置输入错误            if (!body) &#123;                printf(&quot;插入位置有误！\\n&quot;);                return head;            &#125;        &#125;        //判断条件为真，说明插入位置为链表尾，实现第 2 种情况        if (body &amp;&amp; (body-&gt;next == NULL)) &#123;            body-&gt;next = temp;            temp-&gt;prior = body;        &#125;        else &#123;            //第 2 种情况的具体实现            body-&gt;next-&gt;prior = temp;            temp-&gt;next = body-&gt;next;            body-&gt;next = temp;            temp-&gt;prior = body;        &#125;    &#125;    return head;&#125;\n\n双向链表删除节点和添加结点的思想类似，在双向链表中删除目标结点也分为 3 种情况。\n\n删除表头结点\n\n删除表头结点的过程如下图所示：\n\n删除表头结点的实现过程是：\n\n新建一个指针指向表头结点；\n断开表头结点和其直接后续结点之间的关联，更改 head 头指针的指向，同时将其直接后续结点的 prior 指针指向 NULL；\n释放表头结点占用的内存空间。\n删除表中结点\n\n删除表中结点的过程如下图所示：\n\n删除表中结点的实现过程是：\n\n找到目标结点，新建一个指针指向改结点；\n将目标结点从链表上摘除；\n释放该结点占用的内存空间。\n删除表尾结点\n\n删除表尾结点的过程如下图所示：\n\n删除表尾结点的实现过程是：\n\n找到表尾结点，新建一个指针指向该结点；\n断点表尾结点和其直接前驱结点的关联，并将其直接前驱结点的 next 指针指向 NULL；\n释放表尾结点占用的内存空间。\n\n双向链表删除节点的 C 语言实现代码如下：\n//删除结点的函数，data为要删除结点的数据域的值Line* delLine(Line* head, int data) &#123;    Line* temp = head;    while (temp) &#123;        if (temp-&gt;data == data) &#123;            //删除表头结点            if (temp-&gt;prior == NULL) &#123;                head = head-&gt;next;                if (head) &#123;                    head-&gt;prior = NULL;                    temp-&gt;next = NULL;                &#125;                free(temp);                return head;            &#125;            //删除表中结点            if (temp-&gt;prior &amp;&amp; temp-&gt;next) &#123;                temp-&gt;next-&gt;prior = temp-&gt;prior;                temp-&gt;prior-&gt;next = temp-&gt;next;                free(temp);                return head;            &#125;            //删除表尾结点            if (temp-&gt;next == NULL) &#123;                temp-&gt;prior-&gt;next = NULL;                temp-&gt;prior = NULL;                free(temp);                return head;            &#125;        &#125;        temp = temp-&gt;next;    &#125;    printf(&quot;表中没有目标元素，删除失败\\n&quot;);    return head;&#125;\n\n双向链表查找节点通常情况下，双向链表和单链表一样都仅有一个头指针。因此，双链表查找指定元素的实现同单链表类似，也是从表头依次遍历表中元素。\nC 语言实现代码为：\n//head为原双链表，elem表示被查找元素int selectElem(line * head,int elem)&#123;//新建一个指针t，初始化为头指针 head    line * t=head;    int i=1;    while (t) &#123;        if (t-&gt;data==elem) &#123;            return i;        &#125;        i++;        t=t-&gt;next;    &#125;    //程序执行至此处，表示查找失败    return -1;&#125;\n\n双向链表更改节点更改双链表中指定结点数据域的操作是在查找的基础上完成的。实现过程是：通过遍历找到存储有该数据元素的结点，直接更改其数据域即可。\n实现此操作的 C 语言实现代码如下：\n//更新函数，其中，add 表示要修改的元素，newElem 为新数据的值void amendElem(Line* p, int oldElem, int newElem) &#123;    Line* temp = p;    int find = 0;    //找到要修改的目标结点    while (temp)    &#123;        if (temp-&gt;data == oldElem) &#123;            find = 1;            break;        &#125;        temp = temp-&gt;next;    &#125;    //成功找到，则进行更改操作    if (find == 1) &#123;        temp-&gt;data = newElem;        return;    &#125;    //查找失败，输出提示信息    printf(&quot;链表中未找到目标元素，更改失败\\n&quot;);&#125;\n\n\n\n循环链表无论静态链表还是动态链表，有时在解决具体问题时，需要我们对其结构进行稍微地调整。比如，可以把链表的两头连接，使其成为了一个环状链表，通常称为循环链表。\n和它名字的表意一样，只需要将表中最后一个结点的指针指向头结点，链表就能成环儿，如下图所示。\n\n需要注意的是，虽然循环链表成环状，但本质上还是链表，因此在循环链表中，依然能够找到头指针和首元节点等。循环链表和普通链表相比，唯一的不同就是循环链表首尾相连，其他都完全一样。\n这里给大家一个循环链表的实例，用循环链表实现约瑟夫环\n循环链表实现约瑟夫环 - 玩转C语言和数据结构xiexuewu.github.io&#x2F;view&#x2F;7.html\n双向循环链表我们知道，单链表通过首尾连接可以构成单向循环链表，如下图所示：\n\n同样，双向链表也可以进行首尾连接，构成双向循环链表。如下图所示：\n\n解决某些问题，可能既需要正向遍历数据，又需要逆向遍历数据，这时就可以考虑使用双向循环链表。\n双向循环链表的创建创建双向循环链表，只需在创建完成双向链表的基础上，将其首尾节点进行双向连接即可。\nC 语言实现代码如下：\n//创建双向循环链表Line* initLine(Line* head) &#123;    int i;    Line* list = NULL;    head = (Line*)malloc(sizeof(Line));//创建链表第一个结点（首元结点）    head-&gt;prior = NULL;    head-&gt;next = NULL;    head-&gt;data = 1;    list = head;    for (i = 2; i &lt;= 3; i++) &#123;        //创建并初始化一个新结点        Line* body = (Line*)malloc(sizeof(Line));        body-&gt;prior = NULL;        body-&gt;next = NULL;        body-&gt;data = i;        //直接前趋结点的next指针指向新结点        list-&gt;next = body;        //新结点指向直接前趋结点        body-&gt;prior = list;        list = list-&gt;next;    &#125;    //通过以上代码，已经创建好双线链表，接下来将链表的首尾节点进行双向连接    list-&gt;next=head;    head-&gt;prior=list;    return head;&#125;\n\n通过向 main 函数中调用 initLine 函数，就可以成功创建一个存储有 {1,2,3} 数据的双向循环链表，其完整的 C 语言实现代码为：\n#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct line &#123;    struct line* prior; //指向直接前趋    int data;    struct line* next; //指向直接后继&#125;Line;//创建双向循环链表Line* initLine(Line* head) &#123;    int i;    Line* list = NULL;    head = (Line*)malloc(sizeof(Line));//创建链表第一个结点（首元结点）    head-&gt;prior = NULL;    head-&gt;next = NULL;    head-&gt;data = 1;    list = head;    for (i = 2; i &lt;= 3; i++) &#123;        //创建并初始化一个新结点        Line* body = (Line*)malloc(sizeof(Line));        body-&gt;prior = NULL;        body-&gt;next = NULL;        body-&gt;data = i;        //直接前趋结点的next指针指向新结点        list-&gt;next = body;        //新结点指向直接前趋结点        body-&gt;prior = list;        list = list-&gt;next;    &#125;    //通过以上代码，已经创建好双线链表，接下来将链表的首尾节点进行双向连接    list-&gt;next = head;    head-&gt;prior = list;    return head;&#125;//输出链表中的数据void display(Line* head) &#123;    Line* temp = head;    //由于是循环链表，所以当遍历指针temp指向的下一个节点是head时，证明此时已经循环至链表的最后一个节点    while (temp-&gt;next != head) &#123;        if (temp-&gt;next == NULL) &#123;            printf(&quot;%d\\n&quot;, temp-&gt;data);        &#125;        else &#123;            printf(&quot;%d-&gt;&quot;, temp-&gt;data);        &#125;        temp = temp-&gt;next;    &#125;    //输出循环链表中最后一个节点的值    printf(&quot;%d&quot;, temp-&gt;data);&#125;//释放链表中结点占用的空间void free_line(Line* head) &#123;    Line* temp = NULL;    //切断循环    head-&gt;prior-&gt;next = NULL;    //从第一个结点开始，依次 free    temp = head;    while (temp) &#123;        head = head-&gt;next;        free(temp);        temp = head;    &#125;&#125;int main()&#123;    //创建一个头指针    Line* head = NULL;    //调用链表创建函数    head = initLine(head);    //输出创建好的链表    display(head);    //手动释放链表占用的内存    free_line(head);    return 0;&#125;\n\n程序输出结果如下：\n\n1-&gt;2-&gt;3\n\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"数据结构-线性表（顺序表）","url":"/Arknight-notes/posts/23014.html","content":"\n线性表说起这个问题，我们一定不陌生。打开QQ或微信，我们可以看到好友列表，打开PTA，我们能看到题目列表，打开音乐软件，我们可以看见歌曲列表，线性表在我们的生活中无处不在。线性表是怎么呈现的呢？线性表把我们在生活中需要的信息，按照顺序进行排列，使得这些信息直观、有条理，如果是按照某种顺序排列的列表，我们可以做到信息的快速检索。\n\n\n\n1) 线性表（线性存储结构）线性表又称线性存储结构，是最简单的一种存储结构，专门用来存储逻辑关系为“一对一”的数据。\n在一个数据集中，如果每个数据的左侧都有且仅有一个数据和它有关系，数据的右侧也有且仅有一个数据和它有关系，那么这些数据之间就是“一对一“的逻辑关系。\n所谓线性表，是零个或多个数据元素的有限序列，线性表的元素具有相同的特征，数据元素之间的关系是一对一的关系。\n\n如上图所示，在 {1,2,3,4,5} 数据集中，每个数据的左侧都有且仅有一个数据和它紧挨着（除 1 外），右侧也有且仅有一个数据和它紧挨着（除 5 外），这些数据之间就是“一对一“的关系。\n使用线性表存储具有“一对一“逻辑关系的数据，不仅可以将所有数据存储到内存中，还可以将“一对一”的逻辑关系也存储到内存中。\n线性表存储数据的方案可以这样来理解，先用一根线将所有数据按照先后次序“串”起来，如下图所示：\n\n数据和“一对一”的逻辑关系\n左侧是“串”起来的数据，右侧是空闲的物理空间。将这“一串儿”数据存放到物理空间中，有以下两种方法：\n\n两种存储方式都可以将数据之间的关系存储起来，从线的一头开始捋，可以依次找到每个数据，且数据的前后位置没有发生改变。\n像上图这样，用一根线将具有“一对一”逻辑关系的数据存储起来，这样的存储方式就称为线性表或者线性存储结构。\n顺序存储结构和链式存储结构从图 3 不难看出，线性表存储数据的实现方案有两种，分别是：\n\n像图 3a) 那样，不破坏数据的前后次序，将它们连续存储在内存空间中，这样的存储方案称为顺序存储结构（简称顺序表）；\n像图 3b) 那样，将所有数据分散存储在内存中，数据之间的逻辑关系全靠“一根线”维系，这样的存储方案称为链式存储结构（简称链表）。\n\n也就是说，使用线性表存储数据，有两种真正可以落地的存储方案，分别是顺序表和链表。\n前驱和后继在具有“一对一“逻辑关系的数据集中，每个个体习惯称为数据元素（简称元素）。例如，图 1 显示的这组数据集中，一共有 5 个元素，分别是 1、2、3、4 和 5。\n此外，很多教程中喜欢用前驱和后继来描述元素之间的前后次序：\n\n某一元素的左侧相邻元素称为该元素的“直接前驱”，此元素左侧的所有元素统称为该元素的“前驱元素”；\n某一元素的右侧相邻元素称为该元素的“直接后继”，此元素右侧的所有元素统称为该元素的“后继元素”；\n\n以图 1 数据中的元素 3 来说，它的直接前驱是 2 ，此元素的前驱元素有 2 个，分别是 1 和 2；同理，此元素的直接后继是 4 ，后继元素也有 2 个，分别是 4 和 5。\n\n2) 顺序表（顺序存储结构）顺序表又称顺序存储结构，是线性表的一种，专门存储逻辑关系为“一对一”的数据。\n顺序表存储数据的具体实现方案是：将数据全部存储到一整块内存空间中，数据元素之间按照次序挨个存放。\n举个简单的例子，将 {1,2,3,4,5} 这些数据使用顺序表存储，数据最终的存储状态如下图所示：\n\n线性表的抽象数据结构ADT List&#123;    Data:        D = &#123;ai | 1 ≤ i ≤ n, n ≥ 0, ai 为 ElemType 类型&#125;    Relation：        R = &#123; &lt;ai,ai+1&gt; | ai,ai+1 ∈ D, i = 1, i ∈ (0,n)&#125;    Operation:        InitList(&amp;L);    //初始化，建立一个空的线性表L        MakeList(&amp;L);    //建立线性表，向表中存入数据        ListEmpty(*L);    //空表判断，是则返回true,否则返回false        DestroyList(&amp;L);    //清除操作，清空线性表的元素        GetElem(L,i,&amp;e);    //获取线性表的元素，将线性表L的第i个元素的值返回给e        LocateElem(L,e);    //按值查找元素，在线性表L中查找与e元素相等的元素，查找成功返回对应的序号，查找失败则返回0        ListInsert(&amp;L,i,e);    //插入操作，在线性表L的第i个位置插入元素e        ListDelete(&amp;L,i,&amp;e);    //删除操作，删除线性表L中的第i个位置的元素，并将其用e返回        ListLength(L);    //计算表长，返回线性表L的元素个数        DispList(L);    //输出线性表，当线性表不为空表时，按顺序输出表中的每一个元素&#125;\n\n\n\n顺序表的建立使用顺序表存储数据，除了存储数据本身的值以外，通常还会记录以下两样数据：\n\n顺序表的最大存储容量：顺序表最多可以存储的数据个数；\n顺序表的长度：当前顺序表中存储的数据个数。\n\nC 语言中，可以定义一个结构体来表示顺序表：\ntypedef struct&#123;    int * head; //定义一个名为head的长度不确定的数组，也叫“动态数组”    int length; //记录当前顺序表的长度    int size; //记录顺序表的存储容量&#125;Table;\n\n尝试建立一个顺序表，例如：\n#define Size 5 //对Size进行宏定义，表示顺序表的最大容量void initTable(Table * t) &#123;    //构造一个空的顺序表，动态申请存储空间    t-&gt;head = (int*)malloc(Size * sizeof(int)); //申请内存空间    //如果申请失败，作出提示并直接退出程序    if (!t-&gt;head)    &#123;        printf(&quot;初始化失败&quot;);        exit(0);    &#125;    //空表的长度初始化为0    t-&gt;length = 0;    //空表的初始存储空间为Size    t-&gt;size = Size;&#125;\n\n\n\n如上所示，整个建立顺序表的过程都封装在一个函数中，建好的顺序表可以存储 5 个逻辑关系为“一对一”的整数。\n在顺序表的实现中，t-&gt;head 是一个指向动态数组基地址的指针，其核心作用是为顺序表提供存储数据的连续内存空间。以下是具体解析：\n\n1. t-&gt;head 的定义与作用• 定义：  t-&gt;head 是顺序表结构体中的一个成员变量，通常声明为动态数组的起始地址指针。例如在 C 语言中，顺序表的结构体定义如下：  typedef struct &#123;    int *head;  // 动态数组基地址    int length; // 当前元素个数    int size;   // 总存储容量&#125; Table;\n顺序表的使用通过调用 initTable() 函数，就可以成功地创建一个顺序表，还可以往顺序表中存储一些元素。\n例如，将 {1,2,3,4,5} 存储到顺序表中，实现代码如下：\n#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define Size 5 //对Size进行宏定义，表示顺序表的最大容量typedef struct&#123;    int* head;    int length;    int size;&#125;Table;void initTable(Table * t) &#123;    //构造一个空的顺序表，动态申请存储空间    t-&gt;head = (int*)malloc(Size * sizeof(int));    //如果申请失败，作出提示并直接退出程序    if (!t-&gt;head) //无头（申请失败）    &#123;        printf(&quot;初始化失败&quot;);        exit(0);    &#125;    //空表的长度初始化为0    t-&gt;length = 0; //t-&gt;length：当前元素个数    //空表的初始存储空间为Size    t-&gt;size = Size; //t-&gt;size：总存储容量&#125;//输出顺序表中元素的函数void displayTable(Table t) &#123;    int i;    for (i = 0; i &lt; t.length; i++) &#123;        printf(&quot;%d &quot;, t.head[i]);    &#125;    printf(&quot;\\n&quot;);&#125;int main() &#123;    int i;    Table t = &#123; NULL,0,0 &#125;;    initTable(&amp;t);    //向顺序表中添加&#123;1,2,3,4,5&#125;    for (i = 1; i &lt;= Size; i++) &#123;        t.head[i - 1] = i;        t.length++;    &#125;    printf(&quot;顺序表中存储的元素分别是：\\n&quot;);    displayTable(t);    free(t.head);//释放申请的堆内存    return 0;&#125;\n\n程序运行结果如下：\n\n顺序表中存储的元素分别是： 1 2 3 4 5\n\n3) 顺序表的基本操作我们学习了顺序表及初始化的过程，本节学习有关顺序表的一些基本操作，以及如何使用 C 语言实现它们。\n顺序表插入元素向已有顺序表中插入数据元素，根据插入位置的不同，可分为以下 3 种情况：\n\n插入到顺序表的表头；\n在表的中间位置插入元素；\n尾随顺序表中已有元素，作为顺序表中的最后一个元素；\n\n虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：\n\n将要插入位置元素以及后续的元素整体向后移动一个位置；\n将元素放到腾出来的位置上；\n\n例如，在 {1,2,3,4,5} 的第 3 个位置上插入元素 6，实现过程如下：\n\n遍历至顺序表存储第 3 个数据元素的位置\n\n\n\n将元素 3、4 和 5 整体向后移动一个位置\n\n\n\n将新元素 6 放入腾出的位置\n\n\n因此，顺序表插入数据元素的 C 语言实现代码如下：\n//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置void insertTable(Table* t, int elem, int add)&#123;    int i;            //如果插入元素位置(add)比整张表的长度+1(t-&gt;length + 1)还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出    if (add &gt; t-&gt;length + 1 || add &lt; 1) &#123;        printf(&quot;插入位置有问题\\n&quot;);        return;    &#125;            //做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，有就是(t-&gt;length &lt; t-&gt;size)，如果没有就是(t-&gt;length == t-&gt;size)，需要申请    if (t-&gt;length == t-&gt;size) &#123;        t-&gt;head = (int*)realloc(t-&gt;head, (t-&gt;size + 1) * sizeof(int));        //重新分配内存，动态数组额外申请更多物理空间        if (!t-&gt;head) &#123;            printf(&quot;存储分配失败\\n&quot;);            return;        &#125;        t-&gt;size += 1;    &#125;            //插入操作，需要将自插入位置之后的所有元素(从t-&gt;length - 1倒数到add - 1)全部后移一位    for (i = t-&gt;length - 1; i &gt;= add - 1; i--) &#123;        t-&gt;head[i + 1] = t-&gt;head[i];    &#125;        //后移完成后，直接插入元素    t-&gt;head[add - 1] = elem;    t-&gt;length++;&#125;\n\n注意，动态数组额外申请更多物理空间使用的是 realloc 函数。此外在实现元素整体后移的过程中，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。\n顺序表删除元素从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。\n后续元素整体前移一个位置，会直接将目标元素删除，可间接实现删除元素的目的。\n例如，从 {1,2,3,4,5} 中删除元素 3 的过程如图 4 所示：\n\n因此，顺序表删除元素的 C 语言实现代码为：\nvoid delTable(Table* t, int add) &#123;    int i;    if (add &gt; t-&gt;length || add &lt; 1) &#123;  //删除元素位置大于表长或小于0        printf(&quot;被删除元素的位置有误\\n&quot;);        return;    &#125;    //删除操作    for (i = add; i &lt; t-&gt;length; i++) &#123;        t-&gt;head[i - 1] = t-&gt;head[i];    &#125;    t-&gt;length--;//表长减短&#125;\n\n顺序表查找元素顺序表中查找目标元素，可以使用多种查找算法实现，比如说二分查找算法、插值查找算法等。\n这里，我们选择顺序查找算法，具体实现代码为：\n//查找函数，其中，elem表示要查找的数据元素的值int selectTable(table t,int elem)&#123;    for (int i=0; i&lt;t.length; i++) &#123;        if (t.head[i]==elem) &#123;            return i+1;        &#125;    &#125;    return -1;//如果查找失败，返回-1&#125;\n\n顺序表更改元素顺序表更改元素的实现过程是：\n\n找到目标元素；\n直接修改该元素的值；\n\n顺序表更改元素的 C 语言实现代码为：\nvoid amendTable(Table* t, int elem, int newElem) &#123;    int add = selectTable(*t, elem);    if (add == -1) &#123;        printf(&quot;顺序表中没有找到目标元素\\n&quot;);        return;    &#125;    t-&gt;head[add - 1] = newElem;&#125;\n\n关于 t-&gt;head,t-&gt;length 和 t-&gt;size• 物理存储管理：  t-&gt;head 指向通过 malloc 或 realloc 动态申请的内存块的首地址。顺序表中的所有元素按逻辑顺序连续存储在这段内存中。\n• 操作接口：  通过 t-&gt;head 可直接访问顺序表的元素，例如：  • 插入：t-&gt;head[add-1] = elem 将元素写入指定位置。  • 遍历：通过 t-&gt;head[i] 访问第 i 个元素。\n顺序表初始化时，t-&gt;head 被赋予动态分配的内存地址。例如：  \nvoid initTable(Table *t) &#123;    t-&gt;head = (int*)malloc(Size * sizeof(int));  // 申请初始内存    t-&gt;length = 0;    t-&gt;size = Size;&#125;\n\n若内存分配失败，t-&gt;head 会指向 NULL，此时需进行错误处理。\n所有对顺序表元素的增删查改均通过 t-&gt;head 实现：• 插入元素：将后续元素右移后，直接通过 t-&gt;head[add-1] 写入新值。• 删除元素：左移覆盖目标元素后，通过 t-&gt;head 重新定位后续元素。\nt-&gt;head 是顺序表实现中动态内存管理的核心，它指向存储数据的连续内存块，并通过指针操作支持元素的增删查改。\n在顺序表的实现中，t-&gt;length和t-&gt;size是两个关键字段，它们的含义及设计逻辑如下：\n\n1. t-&gt;length：当前元素个数\n• 定义：表示顺序表中实际存储的有效元素数量，即当前表内数据的逻辑长度。• 作用：  • 控制插入&#x2F;删除操作的合法性（例如插入位置不能超过length+1，删除位置不能超过length）。  • 遍历时确定元素范围（从下标0到length-1）。• 示例：若顺序表存储&#123;1,2,3&#125;，则length=3。\n\n2. t-&gt;size：总存储容量\n• 定义：表示顺序表已申请的内存空间能容纳的最大元素数量，即物理存储容量。• 作用：  • 判断是否需要扩容（当length == size时，表已满需扩展内存）。  • 动态调整内存时记录当前分配的空间上限。• 示例：若初始分配容量为size=5，插入5个元素后length=5，此时需扩容才能继续插入。\n\n3. 两者的区别与联系\n\n\n\n字段\n意义\n操作触发条件\n命名逻辑\n\n\n\nlength\n实际元素个数（动态变化）\n插入时位置需满足1 ≤ add ≤ length+1\n直观体现“逻辑长度”，类似数组的size()\n\n\nsize\n最大容量（静态&#x2F;动态）\n扩容条件为length == size\n体现“物理容量上限”，类似容器的capacity()\n\n\n\n逻辑与物理分离：• length关注数据逻辑层面的使用情况，size关注物理内存的管理，两者分离便于维护动态内存。\n\n操作安全性：• 通过length限制插入&#x2F;删除位置，避免越界访问；通过size判断内存是否耗尽，防止溢出。\n\n动态扩容机制：• 当length达到size时，触发realloc扩展内存（例如每次扩容固定步长或按倍数增长），保证数据连续性。\n插入函数中：\n\n\nif (add &gt; t-&gt;length + 1 || add &lt; 1) &#123;    printf(&quot;插入位置有问题\\n&quot;);    return;&#125;if (t-&gt;length == t-&gt;size) &#123;    t-&gt;head = (int*)realloc(t-&gt;head, (t-&gt;size + 1) * sizeof(int));    // 扩容逻辑...&#125;\n\n• add &gt; t-&gt;length + 1：确保插入位置不超过逻辑长度的下一个合法位置（如length=3时，允许插入到第4位，但不可到第5位）。• t-&gt;length == t-&gt;size：触发扩容的条件，保证物理空间始终足够容纳逻辑元素。\nt-&gt;length和t-&gt;size是顺序表实现中动态内存管理与逻辑操作控制的核心字段。通过两者的协同，既能高效利用内存，又能确保数据操作的合法性。\n其他操作的实现逆序void reverseTable(Table* t) &#123;    if (t-&gt;length &lt;= 1) return; // 空表或单元素表无需处理        for (int i = 0; i &lt; t-&gt;length / 2; i++) &#123;        int temp = t-&gt;head[i];        t-&gt;head[i] = t-&gt;head[t-&gt;length - 1 - i];        t-&gt;head[t-&gt;length - 1 - i] = temp;    &#125;&#125;\n\n输出表长int ListLength(Table* t) &#123;    return L-&gt;length; // 直接返回顺序表的当前长度&#125;\n\n删除全表void SeqListDestory(Table* t) &#123;    assert(t);  // 确保传入的指针非空    free(t-&gt;head);  // 释放动态数组内存    t-&gt;head = NULL;  // 指针置空    t-&gt;size = 0;  // 容量归零    t-&gt;length = 0;  // 元素个数归零&#125;\n\n\n\n完整代码实现以下是一个完整的顺序表操作示例代码，包含初始化、插入、删除、查找、修改、逆序、销毁等操作，并在main函数中展示了具体调用逻辑：\n#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;#define INIT_SIZE 5  // 初始容量typedef struct &#123;    int* head;    // 动态数组基地址    int length;   // 当前元素个数    int size;     // 总存储容量&#125; Table;// 初始化顺序表void initTable(Table* t) &#123;    t-&gt;head = (int*)malloc(INIT_SIZE * sizeof(int));    if (!t-&gt;head) &#123;        printf(&quot;内存分配失败\\n&quot;);        exit(EXIT_FAILURE);    &#125;    t-&gt;length = 0;    t-&gt;size = INIT_SIZE;&#125;// 插入元素（位置从1开始）void insertTable(Table* t, int elem, int pos) &#123;    if (pos &lt; 1 || pos &gt; t-&gt;length + 1) &#123;        printf(&quot;非法插入位置: %d\\n&quot;, pos);        return;    &#125;        // 容量检查与扩容    if (t-&gt;length == t-&gt;size) &#123;        int new_size = t-&gt;size * 2;  // 容量翻倍        int* new_head = (int*)realloc(t-&gt;head, new_size * sizeof(int));        if (!new_head) &#123;            printf(&quot;扩容失败\\n&quot;);            return;        &#125;        t-&gt;head = new_head;        t-&gt;size = new_size;        printf(&quot;已扩容至 %d\\n&quot;, new_size);    &#125;    // 元素后移    for (int i = t-&gt;length; i &gt;= pos; i--) &#123;        t-&gt;head[i] = t-&gt;head[i - 1];    &#125;        t-&gt;head[pos - 1] = elem;    t-&gt;length++;&#125;// 删除元素（位置从1开始）void delTable(Table* t, int pos) &#123;    if (pos &lt; 1 || pos &gt; t-&gt;length) &#123;        printf(&quot;非法删除位置: %d\\n&quot;, pos);        return;    &#125;        // 元素前移覆盖    for (int i = pos; i &lt; t-&gt;length; i++) &#123;        t-&gt;head[i - 1] = t-&gt;head[i];    &#125;    t-&gt;length--;&#125;// 查找元素（返回位置，从1开始）int selectTable(Table* t, int elem) &#123;    for (int i = 0; i &lt; t-&gt;length; i++) &#123;        if (t-&gt;head[i] == elem) &#123;            return i + 1;// 返回元素位置        &#125;    &#125;    return -1;  // 未找到&#125;// 修改元素值void amendTable(Table* t, int old_elem, int new_elem) &#123;    int pos = selectTable(t, old_elem); // 查找元素    if (pos == -1) &#123;        printf(&quot;元素 %d 不存在\\n&quot;, old_elem);        return;    &#125;    t-&gt;head[pos - 1] = new_elem;&#125;// 逆序顺序表void reverseTable(Table* t) &#123;    for (int i = 0; i &lt; t-&gt;length / 2; i++) &#123;        int temp = t-&gt;head[i];        t-&gt;head[i] = t-&gt;head[t-&gt;length - 1 - i];        t-&gt;head[t-&gt;length - 1 - i] = temp;    &#125;&#125;// 销毁顺序表void destroyTable(Table* t) &#123;    free(t-&gt;head);    t-&gt;head = NULL;    t-&gt;length = 0;    t-&gt;size = 0;&#125;// 打印顺序表void displayTable(Table* t) &#123;    printf(&quot;[当前表长: %d, 总容量: %d]\\n&quot;, t-&gt;length, t-&gt;size);    for (int i = 0; i &lt; t-&gt;length; i++) &#123;        printf(&quot;%d &quot;, t-&gt;head[i]);    &#125;    printf(&quot;\\n\\n&quot;);&#125;int main() &#123;    Table my_table; //声明一个名为 my_table 的变量，其类型为 Table 结构体        // 1. 初始化    initTable(&amp;my_table);    //&amp;my_table的作用是将结构体的地址传递给函数，使函数能通过指针直接修改原始变量    printf(&quot;=== 初始化顺序表 ===\\n&quot;);    displayTable(&amp;my_table);    // 2. 插入初始元素    for (int i = 1; i &lt;= 5; i++) &#123;        insertTable(&amp;my_table, i, i);    &#125;    printf(&quot;=== 插入5个元素 ===\\n&quot;);    displayTable(&amp;my_table);    // 3. 测试扩容插入    insertTable(&amp;my_table, 6, 3);  // 在第3位插入6    printf(&quot;=== 插入第6个元素触发扩容 ===\\n&quot;);    displayTable(&amp;my_table);    // 4. 删除元素    delTable(&amp;my_table, 2);  // 删除第2个元素    printf(&quot;=== 删除第2个元素 ===\\n&quot;);    displayTable(&amp;my_table);    // 5. 查找元素    int target = 6;    int pos = selectTable(&amp;my_table, target);    printf(&quot;=== 查找元素 %d ===\\n&quot;, target);    if (pos != -1) &#123;        printf(&quot;元素 %d 位于第 %d 位\\n&quot;, target, pos);    &#125; else &#123;        printf(&quot;元素不存在\\n&quot;);    &#125;    // 6. 修改元素    amendTable(&amp;my_table, 6, 66);    printf(&quot;=== 修改元素 6 → 66 ===\\n&quot;);    displayTable(&amp;my_table);    // 7. 逆序操作    reverseTable(&amp;my_table);    printf(&quot;=== 逆序顺序表 ===\\n&quot;);    displayTable(&amp;my_table);    // 8. 销毁顺序表    destroyTable(&amp;my_table);    printf(&quot;=== 销毁后的状态 ===\\n&quot;);    printf(&quot;指针状态: %s\\n&quot;, (my_table.head == NULL) ? &quot;已释放&quot; : &quot;未释放&quot;);        return 0;&#125;\n\n\n\n关键调用逻辑说明：\n初始化顺序表\n\ninitTable(&amp;my_table);\n• 创建空表，初始容量为5• 时间复杂度：O(1)\n\n批量插入元素\n\nfor (int i = 1; i &lt;= 5; i++) &#123;    insertTable(&amp;my_table, i, i);&#125;\n• 插入5个元素填满初始容量• 时间复杂度：O(n)\n\n触发扩容插入\n\ninsertTable(&amp;my_table, 6, 3);\n• 当插入第6个元素时触发动态扩容（容量翻倍为10）• 时间复杂度：O(n)\n\n删除元素\n\ndelTable(&amp;my_table, 2);\n• 删除第2个元素（值为2），后续元素前移• 时间复杂度：O(n)\n\n元素查找\n\nselectTable(&amp;my_table, target);\n• 使用顺序查找，返回元素位置• 时间复杂度：O(n)\n\n逆序操作\n\nreverseTable(&amp;my_table);\n• 通过对称交换实现逆序• 时间复杂度：O(n)\n\n销毁顺序表\n\ndestroyTable(&amp;my_table);\n• 释放动态内存并将指针置空• 防止内存泄漏的关键操作\n执行结果示例：=== 初始化顺序表 ===[当前表长: 0, 总容量: 5]=== 插入5个元素 ===[当前表长: 5, 总容量: 5]1 2 3 4 5 已扩容至 10=== 插入第6个元素触发扩容 ===[当前表长: 6, 总容量: 10]1 2 6 3 4 5 === 删除第2个元素 ===[当前表长: 5, 总容量: 10]1 6 3 4 5 === 查找元素 6 ===元素 6 位于第 2 位=== 修改元素 6 → 66 ===[当前表长: 5, 总容量: 10]1 66 3 4 5 === 逆序顺序表 ===[当前表长: 5, 总容量: 10]5 4 3 66 1 === 销毁后的状态 ===指针状态: 已释放\n\n复杂度对比：\n\n\n操作\n最好情况\n最坏情况\n平均情况\n\n\n\n插入\nO(1)\nO(n)\nO(n)\n\n\n删除\nO(1)\nO(n)\nO(n)\n\n\n查找\nO(1)\nO(n)\nO(n)\n\n\n逆序\n-\nO(n)\nO(n)\n\n\n初始化\nO(1)\nO(1)\nO(1)\n\n\n​\t首先是插入操作，插入操作时间复杂度最小的情况是，当元素要插入到最后一个位置时，你就不需要移动任何元素即可实现，只需要将需要插入的元素插在表的末端即可，时间复杂度O(1)，最费时的操作就是插入的元素要放在表头，那我们就需要把表中的所有元素都移动了,时间复杂度为O(n)。\n​\t删除操作也如此，当我们要删除最后一个元素，也不需要移动顺序表，而删除第一个元素时需要移动整个表。我们知道，在实际的操作中，删除表中的任何一个位置需要被插入删除的可能性是相同的，因此从平均角度来分析，移动表的平均次数为 (n - 1) &#x2F; 2，时间复杂度为O(n)。​\t因此我们可以看出，顺序表在插入、删除操作时是比较费时间的，然而其他的基本操作例如初始化、建表或者销毁，时间复杂度都是O(1)，因此我们在使用顺序表的时候，要尽量让表保持不变，而是多多使用顺序表的存储和随机提取等优点。\n优缺点分析顺序表主要有如下一些优点：\n\n顺序表进行随机提取元素的效率较高，能够快速存储、提取元素；\n建表时无需对表中元素的逻辑关系进行描述，各元素在存储地址上是连续的；\n对于CPU，顺序表的高速缓存效率更高，且CPU流水线也不会总是被打断。\n\n顺序表主要有如下一些缺点：\n\n申请顺序表时，顺序表存储元素的上限是固定的，这就导致了存在溢出的可能性；\n插入、删除元素时，时间复杂度较大，需要大范围移动表中的元素；\n由于我们在很多情况下无法预知需要存储多少元素，因此容易导致内存碎片的现象，即申请了空间却没有充分利用。\n\n关于链表再新开一个页面\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"2024一些笔记（常微分）","url":"/Arknight-notes/posts/40883.html","content":"2024的一些笔记（常微分）（共20张）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nebp)\n","categories":["笔记"],"tags":["常微分"]},{"title":"数据结构-绪论","url":"/Arknight-notes/posts/45088.html","content":"1.1 数据结构的基本概念　　数据、数据元素、数据对象、数据结构、存储结构、数据类型和抽象数据类型。\n\n数据(data)是对客观事物的符号表示。在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。数据元素(data element)是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。数据对象(data object)是性质相同的数据元素的集合，是数据的一个子集。数据结构(data structure)是相互之间存在一种或多种特定关系的数据元素的集合。存储结构（物理结构）是数据结构在计算机中的表示（又称映像）。数据类型(data type)是一个值的集合和定义在这个值集上的一组操作的总称。抽象数据类型(Abstract Data Type)是指一个数学模型以及定义在该模型上的一组操作。\n\n抽象数据类型的定义ADT 抽象数据类型名&#123;    数据对象：数据对象的定义    数据关系：数据关系的定义    基本操作：基本操作的定义&#125;ADT 抽象数据类型名\n\n例子如下\n抽象数据类型复数和有理数的定义（有理数是其分子、分母均为自然数且分母不为零的分数）。\n复数定义：ADT Complex  //复数定义 a±bi&#123;    数据对象：D = &#123;a, b | a,b为实数&#125;    数据关系：R = &#123;&lt;a, b&gt;&#125;    基本操作：        InitComplex(&amp;C, re, im)            操作结果：构造一个复数C，其实部和虚部分别为re和im        DestroyCmoplex(&amp;C)            操作结果：销毁复数C        Get(C, k, &amp;e)            初始条件：复数C已存在            操作结果：用e返回复数C的第k元的值        Put(&amp;C, k, e)            初始条件：复数C已存在            操作结果：改变复数C的第k元的值为e        IsAscending(C)            初始条件：复数C已存在            操作结果：如果复数C的两个元素按升序排列，则返回1，否则返回0        IsDescending(C)            初始条件：复数C已存在            操作结果：如果复数C的两个元素按降序排列，则返回1，否则返回0        Max(C, &amp;e)            初始条件：复数C已存在            操作结果：用e返回复数C的两个元素中值较大的一个        Min(C, &amp;e)            初始条件：复数C已存在            操作结果：用e返回复数C的两个元素中值较小的一个&#125;ADT Complex\n\n有理数定义：ADT RationalNumber  //有理数定义&#123;    数据对象：D=&#123;s, m | s,m为自然数，且m不为0&#125;    数据关系：R=&#123;&lt;s, m&gt;&#125;    基本操作：        InitRationalNumber(&amp;R, s, m)            操作结果：构造一个有理数R，其分子和分母分别为s和m        DestroyRationalNumber(&amp;R)            操作结果：销毁有理数R        Get(R, k, &amp;e)            初始条件：有理数R已存在            操作结果：用e返回有理数R的第k元的值        Put(&amp;R, k, e)            初始条件：有理数R已存在            操作结果：改变有理数R的第k元的值为e        IsAscending(R)            初始条件：有理数R已存在            操作结果：若有理数R的两个元素按升序排列，则返回1，否则返回0        IsDescending(R)            初始条件：有理数R已存在            操作结果：若有理数R的两个元素按降序排列，则返回1，否则返回0        Max(R, &amp;e)            初始条件：有理数R已存在            操作结果：用e返回有理数R的两个元素中值较大的一个        Min(R, &amp;e)            初始条件：有理数R已存在            操作结果：用e返回有理数R的两个元素中值较小的一个&#125;ADT RationalNumber\n\n　　\n根据数据元素之间关系的 不同特性，通常有下列几种类基本结构：\n(1) 集合 结构中的 如生 数据元素之间除了“同属千一个集合”的关系外，别无其他关系\n(2) 线性结构 结构中的数据元素之间存在一个对 一个的关系；\n(3) 树形结构 结构中的数据元素之间存在一 个对多个的关系； \n(4) 图状结构或网状结构 结构中的数据 元素之间存在多个对多个的关系。\n1.1.2 数据结构三要素　　　　① 逻辑结构\n　　　　　　逻辑结构指数据元素之间存在的逻辑关系，是固有的客观联系；\n　　　　　　逻辑结构分为线性结构与非线性结构，比如：线性表、树、图等；\n　　　　② 存储结构\n　　　　　　存储结构又称为物理结构，指数据结构在计算机中的表示（映像），是计算机内部的存储方法；\n　　　　　　存储结构主要有顺序存储、链式存储、索引存储和散列存储；\n　　　　　　一种逻辑结构通过映像便可以得到它的存储结构；\n　　　　　　诸如顺序表、哈希表、链表这样的表述，它们既体现了逻辑结构（均为线性），又体现了存储结构（顺序、散列、链式）；\n　　　　　　而这样的表述我们往往就直接称之为数据结构；\n　　　　　　诸如有序表，它只体现了逻辑结构（线性），而存储结构是未知的（可以是顺序、链式……）；\n　　　　　　不存在只体现存储结构而不体现逻辑结构的表述；\n　　　　　　所以，我们认为：逻辑结构独立于存储结构。\n　　　　③ 数据的运算（算法）\n　　　　　　算法包括运算的定义（取决于逻辑结构，体现算法功能）与实现（取决于存储结构，体现于操作步骤）。\n1.2 算法的基本概念　　算法的 5 个重要特性：有穷性、确定性、有效性（可行性）、输入，输出；\n　　一个好的算法的目标：正确性、可读性、鲁棒性、效率与低存储量需求。\n1.3 算法分析\n　　时间复杂度指算法所有语句被重复执行次数总和的数量级。\n　　常见时间复杂度比较：\n　　　　O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)\n　　　　(log 表示以 2 为底的对数)\n　　空间复杂度指算法耗费存储空间的数量级。\n1.4 时间复杂度的计算\n计算时间复杂度问题规模——&gt; 输入量的多少\n语句频度——&gt; 一条语句的重复执行次数\n执行时间&lt;—— 所有语句频度之和\n\n1.基本操作，即只有常数项，认为其时间复杂度为O(1)2.顺序结构，时间复杂度按加法进行计算3.循环结构，时间复杂度按乘法进行计算4.分支结构，时间复杂度取最大值 判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略5.在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度\n\n　　\n循环条件包含主体变量\n将执行次数代入循环条件进行求解：\n示例1：\nint i = 1;while (i &lt;= n)     i = i * 2;\n\n\n每次循环后 i &#x3D;2t（t 为执行次数）\n终止条件：2t ≤ n\n解得 t ≤ log2n\n时间复杂度：T(n) &#x3D; O(logn)\n\n示例2：\nint i = 3;while ((i + 1) * (i + 1) &lt; n)     i = i + 1;\n\n\n令 t&#x3D;i−3，则 i&#x3D;t+3\n代入条件：(t+3+1)2&lt;n⟹(t+4)2&lt;n\n解得 t&lt;n−4\n时间复杂度：T(n)&#x3D;O(n)\n\n\n循环条件与主体变量无关\n通过数学归纳法或递归展开直接计数：\n示例（递归函数）：\nint fact(int n) &#123;    if (n &lt;= 1) return 1;    return n * fact(n - 1);&#125;\n\n\n递归方程：T(n)&#x3D;1+T(n−1)\n展开递推：T(n)&#x3D;1+T(n−1)&#x3D;1+1+T(n−2) ⋮&#x3D;k+T(n−k)(当 k&#x3D;n−1)&#x3D;(n−1)+T(1)&#x3D;O(n)\n时间复杂度：T(n)&#x3D;O(n)\n\n常见的数据结构如下图所示，常见的数据结构可分为「线性数据结构」与「非线性数据结构」，具体为：「数组」、「链表」、「栈」、「队列」、「树」、「图」、「散列表」、「堆」。\n\n\n数组数组是将相同类型的元素存储于连续内存空间的数据结构，其长度不可变。\n如下图所示，构建此数组需要在初始化时给定长度，并对数组每个索引元素赋值，代码如下：\n// 初始化一个长度为 5 的数组 arrayint array[5];// 元素赋值array[0] = 2;array[1] = 3;array[2] = 1;array[3] = 0;array[4] = 2;\n\n或者可以使用直接赋值的初始化方式，代码如下：\nint array[] = &#123;2, 3, 1, 0, 2&#125;;\n\n\n「可变数组」是经常使用的数据结构，其基于数组和扩容机制实现，相比普通数组更加灵活。常用操作有：访问元素、添加元素、删除元素。\n// 初始化可变数组vector&lt;int&gt; array;// 向尾部添加元素array.push_back(2);array.push_back(3);array.push_back(1);array.push_back(0);array.push_back(2);\n\n\n链表链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 val」，「后继节点引用 next」 。\nstruct ListNode &#123;    int val;        // 节点值    ListNode *next; // 后继节点引用    ListNode(int x) : val(x), next(NULL) &#123;&#125;&#125;;\n\n如下图所示，建立此链表需要实例化每个节点，并构建各节点的引用指向。\n// 实例化节点ListNode *n1 = new ListNode(4); // 节点 headListNode *n2 = new ListNode(5);ListNode *n3 = new ListNode(1);// 构建引用指向n1-&gt;next = n2;n2-&gt;next = n3;\n\n\n\n栈栈是一种具有 「先入后出」 特点的抽象数据结构，可使用数组或链表实现。\nstack&lt;int&gt; stk;\n\n如下图所示，通过常用操作「入栈 push()」,「出栈 pop()」，展示了栈的先入后出特性。\nstk.push(1); // 元素 1 入栈stk.push(2); // 元素 2 入栈stk.pop();   // 出栈 -&gt; 元素 2stk.pop();   // 出栈 -&gt; 元素 1\n\n\n\n队列队列是一种具有 「先入先出」 特点的抽象数据结构，可使用链表实现。\nqueue&lt;int&gt; que;\n\n如下图所示，通过常用操作「入队 push()」,「出队 pop()」，展示了队列的先入先出特性。\nque.push(1); // 元素 1 入队que.push(2); // 元素 2 入队que.pop();   // 出队 -&gt; 元素 1que.pop();   // 出队 -&gt; 元素 2\n\n\n\n树树是一种非线性数据结构，根据子节点数量可分为 「二叉树」 和 「多叉树」，最顶层的节点称为「根节点 root」。以二叉树为例，每个节点包含三个成员变量：「值 val」、「左子节点 left」、「右子节点 right」 。\nstruct TreeNode &#123;    int val;         // 节点值    TreeNode *left;  // 左子节点    TreeNode *right; // 右子节点    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;&#125;;\n\n如下图所示，建立此二叉树需要实例化每个节点，并构建各节点的引用指向。\n// 初始化节点TreeNode *n1 = new TreeNode(3); // 根节点 rootTreeNode *n2 = new TreeNode(4);TreeNode *n3 = new TreeNode(5);TreeNode *n4 = new TreeNode(1);TreeNode *n5 = new TreeNode(2);// 构建引用指向n1-&gt;left = n2;n1-&gt;right = n3;n2-&gt;left = n4;n2-&gt;right = n5;\n\n\n\n图图是一种非线性数据结构，由「节点（顶点）vertex」和「边 edge」组成，每条边连接一对顶点。根据边的方向有无，图可分为「有向图」和「无向图」。本文 以无向图为例 开展介绍。\n如下图所示，此无向图的 顶点 和 边 集合分别为：\n\n顶点集合： vertices = &#123;1, 2, 3, 4, 5&#125;\n边集合： edges = &#123;(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (3, 5), (4, 5)&#125;\n\n\n表示图的方法通常有两种：\n邻接矩阵：\nint vertices[5] = &#123;1, 2, 3, 4, 5&#125;;int edges[5][5] = &#123;&#123;0, 1, 1, 1, 1&#125;,                   &#123;1, 0, 0, 1, 0&#125;,                   &#123;1, 0, 0, 0, 1&#125;,                   &#123;1, 1, 0, 0, 1&#125;,                   &#123;1, 0, 1, 1, 0&#125;&#125;;\n\n\n邻接表：\n\n顶点存储: 数组 vertices 存储顶点值\n边存储: 二维容器 edges 存储边关系\n第一维 i 表示顶点索引（对应 vertices[i]）\n第二维 edges[i] 存储该顶点连接的目标顶点值集合\nedges[i] 中的数字直接表示目标顶点值**（非索引）\n例如 edges[0] = [1,2,3,4] 表示顶点1连接到值2&#x2F;3&#x2F;4&#x2F;5（注意实际值比索引大1）\n\n\n\nint vertices[5] = &#123;1, 2, 3, 4, 5&#125;;vector&lt;vector&lt;int&gt;&gt; edges;vector&lt;int&gt; edge_1 = &#123;1, 2, 3, 4&#125;;vector&lt;int&gt; edge_2 = &#123;0, 3&#125;;vector&lt;int&gt; edge_3 = &#123;0, 4&#125;;vector&lt;int&gt; edge_4 = &#123;0, 1, 4&#125;;vector&lt;int&gt; edge_5 = &#123;0, 2, 3&#125;;edges.push_back(edge_1);edges.push_back(edge_2);edges.push_back(edge_3);edges.push_back(edge_4);edges.push_back(edge_5);\n\n\n邻接矩阵 VS 邻接表 ：\n邻接矩阵的大小只与节点数量有关，即 N2N2 ，其中 NN 为节点数量。因此，当边数量明显少于节点数量时，使用邻接矩阵存储图会造成较大的内存浪费。因此，邻接表 适合存储稀疏图（顶点较多、边较少）； 邻接矩阵 适合存储稠密图（顶点较少、边较多）。\n\n\n散列表散列表是一种非线性数据结构，通过利用 Hash 函数将指定的「键 key」映射至对应的「值 value」，以实现高效的元素查找。\n\n设想一个简单场景：小力、小特、小扣的学号分别为 10001, 10002, 10003 。现需求从「姓名」查找「学号」。\n\n则可通过建立姓名为 key ，学号为 value 的散列表实现此需求，代码如下：\n// 初始化散列表unordered_map&lt;string, int&gt; dic;// 添加 key -&gt; value 键值对dic[&quot;小力&quot;] = 10001;dic[&quot;小特&quot;] = 10002;dic[&quot;小扣&quot;] = 10003;// 从姓名查找学号dic.find(&quot;小力&quot;)-&gt;second; // -&gt; 10001dic.find(&quot;小特&quot;)-&gt;second; // -&gt; 10002dic.find(&quot;小扣&quot;)-&gt;second; // -&gt; 10003\n\n\nHash 函数设计示例 ：\n\n假设需求：从「学号」查找「姓名」。\n\n将三人的姓名存储至以下数组中，则各姓名在数组中的索引分别为 0, 1, 2 。\nstring names[] = &#123; &quot;小力&quot;, &quot;小特&quot;, &quot;小扣&quot; &#125;;\n\n此时，我们构造一个简单的 Hash 函数（ %% 为取余符号 ），公式和封装函数如下所示：\nhash(key)&#x3D;(key−1)%10000\nint hash(int id) &#123;    int index = (id - 1) % 10000;    return index;&#125;\n\n则我们构建了以学号为 key 、姓名对应的数组索引为 value 的散列表。利用此 Hash 函数，则可在 O(1)O(1) 时间复杂度下通过学号查找到对应姓名，即：\nnames[hash(10001)] // 小力names[hash(10002)] // 小特names[hash(10003)] // 小扣\n\n\n以上设计只适用于此示例，实际的 Hash 函数需保证低碰撞率、 高鲁棒性等，以适用于各类数据和场景。\n\n堆堆是一种基于「完全二叉树」的数据结构，可使用数组实现。以堆为原理的排序算法称为「堆排序」，基于堆实现的数据结构为「优先队列」。堆分为「大顶堆」和「小顶堆」，大（小）顶堆：任意节点的值不大于（小于）其父节点的值。\n\n完全二叉树定义： 设二叉树深度为 kk ，若二叉树除第 kk 层外的其它各层（第 11 至 k−1k−1 层）的节点达到最大个数，且处于第 kk 层的节点都连续集中在最左边，则称此二叉树为完全二叉树。\n\n如下图所示，为包含 1, 4, 2, 6, 8 元素的小顶堆。将堆（完全二叉树）中的结点按层编号，即可映射到右边的数组存储形式。\n\n通过使用「优先队列」的「压入 push()」和「弹出 pop()」操作，即可完成堆排序，实现代码如下：\n// 初始化小顶堆priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; heap;// 元素入堆heap.push(1);heap.push(4);heap.push(2);heap.push(6);heap.push(8);// 元素出堆（从小到大）heap.pop(); // -&gt; 1heap.pop(); // -&gt; 2heap.pop(); // -&gt; 4heap.pop(); // -&gt; 6heap.pop(); // -&gt; 8\n\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"使用Neo4j图数据科学库（GDS）进行中心度分析","url":"/Arknight-notes/posts/19918.html","content":"安装并加载GDS库  \n​    确保已安装并启用GDS插件。若未安装，需从Neo4j官网下载对应版本。​    \n创建图投影在 GDS 中创建内存中的图投影：\nCALL gds.graph.project(  &#x27;nodeGraph&#x27;,      // 图名称  &#x27;Node&#x27;,           // 节点标签  &#x27;NEIGHBOR&#x27;,       // 关系类型  &#123;    nodeProperties: [&#x27;degree&#x27;],  // 需要加载的节点属性    relationshipProperties: &#123;&#125;  // 关系属性（可选）  &#125;);\n\n\n运行度中心性算法并写入属性 \n使用gds.degree.write方法计算每个节点的度（可指定入度、出度或总度数），并将结果存储为节点属性degree：\nCALL gds.degree.write(&#x27;nodeGraph&#x27;, &#123;    writeProperty: &#x27;degree&#x27;,   // 写入的属性名    orientation: &#x27;UNDIRECTED&#x27;  // 方向：UNDIRECTED（总度数）、NATURAL（出度）、REVERSE（入度）&#125;)YIELD nodePropertiesWritten\n\n\n计算中心性指标1. PageRankCALL gds.pageRank.write(&#x27;nodeGraph&#x27;, &#123;  maxIterations: 20,  dampingFactor: 0.85,  writeProperty: &#x27;pagerank&#x27;&#125;);\n\n2. 度中心性 (Degree Centrality)CALL gds.degree.write(&#x27;nodeGraph&#x27;, &#123;  writeProperty: &#x27;degree_centrality&#x27;&#125;);\n\n3. 亲密中心性 (Closeness Centrality)CALL gds.closeness.write(&#x27;nodeGraph&#x27;, &#123;  writeProperty: &#x27;closeness_centrality&#x27;&#125;);\n\n4. 介数中心性 (Betweenness Centrality)CALL gds.betweenness.write(&#x27;nodeGraph&#x27;, &#123;  writeProperty: &#x27;betweenness_centrality&#x27;&#125;);\n\n\n查询结果MATCH (n:Node)RETURN   n.address AS Address,  n.pagerank AS PageRank,  n.degree_centrality AS DegreeCentrality,  n.closeness_centrality AS ClosenessCentrality,  n.betweenness_centrality AS BetweennessCentralityORDER BY PageRank DESC;\n\n\n\n╒═════════════╤═══════════════════╤════════════════╤═══════════════════╤═════════════════════╕│Address      │PageRank           │DegreeCentrality│ClosenessCentrality│BetweennessCentrality│╞═════════════╪═══════════════════╪════════════════╪═══════════════════╪═════════════════════╡│&quot;10.104.0.73&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.105.0.71&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.105.0.72&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.101.0.73&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.103.0.71&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.101.0.71&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.107.0.73&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.108.0.73&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.107.0.71&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.103.0.73&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.106.0.71&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.101.0.72&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.104.0.71&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.109.0.72&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.109.0.73&quot;│0.17143947585331437│0.0             │1.0                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.103.0.72&quot;│0.16639351504031516│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.102.0.73&quot;│0.16639351504031516│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.102.0.71&quot;│0.16639351504031516│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.107.0.72&quot;│0.16638840173142871│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.106.0.73&quot;│0.16638840173142871│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.100.0.72&quot;│0.16638840173142871│28.0            │1.0                │6.833333333333333    │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.104.0.73&quot;│0.16620703459522992│27.0            │1.0                │4.166666666666666    │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.102.0.72&quot;│0.16620703459522992│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.109.0.71&quot;│0.16532947619296923│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.100.0.72&quot;│0.16532947619296923│23.0            │1.0                │2.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.105.0.73&quot;│0.16532947619296923│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.108.0.71&quot;│0.16532947619296923│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.104.0.72&quot;│0.16532947619296923│0.0             │0.8                │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.100.0.74&quot;│0.16028351537997002│27.0            │0.75               │2.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.106.0.72&quot;│0.16009703493488484│0.0             │0.6666666666666666 │0.0                  │├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤│&quot;10.108.0.72&quot;│0.16009703493488484│0.0             │0.6666666666666666 │0.0                  │└─────────────┴───────────────────┴────────────────┴───────────────────┴─────────────────────┘\n\n\n\n","categories":["笔记"],"tags":["Neo4j"]}]