<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Notes|笔记站</title>
  
  
  <link href="https://zhongye1.github.io/Arknight-notes/rss.xml" rel="self"/>
  
  <link href="https://zhongye1.github.io/Arknight-notes/"/>
  <updated>2025-09-28T13:27:34.894Z</updated>
  <id>https://zhongye1.github.io/Arknight-notes/</id>
  
  <author>
    <name>柊野</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次配置Obsidian配合Hexo写博客</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/t2zf3s.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/t2zf3s.html</id>
    <published>2025-09-22T08:47:52.000Z</published>
    <updated>2025-09-28T13:27:34.894Z</updated>
    
    <content type="html"><![CDATA[<p><del>测试，现在新写了个插件，晚上回来整</del></p><p>看网上教程又是整Templates又是整quickadd太麻烦，遂自己写了一个插件</p><p>地址 <a href="https://github.com/Zhongye1/obsidian-with-hexo">https://github.com/Zhongye1/obsidian-with-hexo</a></p><p class='item-img' data-src='https://pica.zhimg.com/v2-0b4e651d9720ff3f9fc14bc6576d26f4_r.jpg'><img src="https://pica.zhimg.com/v2-0b4e651d9720ff3f9fc14bc6576d26f4_r.jpg" alt=""></p><p class='item-img' data-src='https://picx.zhimg.com/v2-3d00531878223fb29e447dab5bd1c96d_r.jpg'><img src="https://picx.zhimg.com/v2-3d00531878223fb29e447dab5bd1c96d_r.jpg" alt=""></p><p>首先使用 obsidian 打开现有Hexo项目的 <code>source/_posts</code> 作为文章目录，然后什么博客文章操作一键完成就行了</p><p>差不多，没啥好水的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;del&gt;测试，现在新写了个插件，晚上回来整&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;看网上教程又是整Templates又是整quickadd太麻烦，遂自己写了一个插件&lt;/p&gt;
&lt;p&gt;地址 &lt;a href=&quot;https://github.com/Zhongye1/obsidian-wit</summary>
      
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>利用chrome F12 测试应用实践详解</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/41925.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/41925.html</id>
    <published>2025-06-10T01:54:31.944Z</published>
    <updated>2025-09-28T11:15:50.124Z</updated>
    
    <content type="html"><![CDATA[<p>首先介绍 Chrome 开发者工具中，调试时使用最多的三个功能页面是：<a href="https://zhida.zhihu.com/search?content_id=119003541&amp;content_type=Article&amp;match_order=1&amp;q=%E5%85%83%E7%B4%A0&amp;zhida_source=entity">元素</a>（ELements）、<a href="https://zhida.zhihu.com/search?content_id=119003541&amp;content_type=Article&amp;match_order=1&amp;q=%E6%8E%A7%E5%88%B6%E5%8F%B0&amp;zhida_source=entity">控制台</a>（Console）、<a href="https://zhida.zhihu.com/search?content_id=119003541&amp;content_type=Article&amp;match_order=1&amp;q=%E6%BA%90%E4%BB%A3%E7%A0%81&amp;zhida_source=entity">源代码</a>（Sources），此外还有<a href="https://zhida.zhihu.com/search?content_id=119003541&amp;content_type=Article&amp;match_order=1&amp;q=%E7%BD%91%E7%BB%9C&amp;zhida_source=entity">网络</a>（Network）等。</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-7b3aa7ae78cff19d9f3f8902027b271e_1440w.jpg'><img src="https://pic3.zhimg.com/v2-7b3aa7ae78cff19d9f3f8902027b271e_1440w.jpg" alt=""></p><ul><li>元素（Elements）：用于查看或修改 HTML 元素的属性、CSS 属性、监听事件、断点等。</li><li>控制台（Console）：控制台一般用于执行一次性代码，查看 JavaScript 对象，查看调试日志信息或异常信息。</li><li>源代码（Sources）：该页面用于查看页面的 HTML 文件源代码、JavaScript 源代码、CSS 源代码，此外最重要的是可以调试 JavaScript 源代码，可以给 JS 代码添加断点等。</li><li>网络（Network）：网络页面主要用于查看 header 等与网络连接相关的信息。</li></ul><p><strong>1、元素（Elements）</strong></p><p>查看元素代码：点击如图</p><p class='item-img' data-src='https://picx.zhimg.com/v2-c55350fef2cc9847c9e88a00caffa2a1_1440w.png'><img src="https://picx.zhimg.com/v2-c55350fef2cc9847c9e88a00caffa2a1_1440w.png" alt=""></p><p>箭头（或用者用快捷键 Ctrl+Shift+C）进入选择元素模式，然后从页面中选择需要查看的元素，然后可以在开发者工具元素（Elements）一栏中定位到该元素源代码的具体位置 。</p><p>查看元素属性：可从被定位的源码中查看部分，如 class、src，也可在右边的侧栏中查看全部的属性，如下图位置查看</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-0a485043e71f01c0be4e2212852d22c0_1440w.jpg'><img src="https://pic3.zhimg.com/v2-0a485043e71f01c0be4e2212852d22c0_1440w.jpg" alt=""></p><p>修改元素的代码与属性：可直接双击想要修改的部分，然后就进行修改，或者选中要修改部分后点击右键进行修改，如下图</p><p>**</p><p class='item-img' data-src='https://pica.zhimg.com/v2-60169f4ee8921f961300d6ea7002d388_1440w.png'><img src="https://pica.zhimg.com/v2-60169f4ee8921f961300d6ea7002d388_1440w.png" alt=""></p><p>**</p><p><strong>注意：这个修改也仅对当前的页面渲染生效，不会修改服务器的源代码，故而这个功能也是作为调试页面效果而使用。</strong></p><p>右边的侧栏个功能的介绍:如下图所示</p><p class='item-img' data-src='https://picx.zhimg.com/v2-dd0bbf6c9cb776b8eff94db3c387c019_1440w.jpg'><img src="https://picx.zhimg.com/v2-dd0bbf6c9cb776b8eff94db3c387c019_1440w.jpg" alt=""></p><p><strong>2、控制台（Console）</strong></p><ul><li>查看 JS 对象的及其属性</li><li>执行 JS 语句</li><li>查看控制台日志：当网页的 JS 代码中使用了 console.log()函数时，该函数输出的日志信息会在控制台中显示。日志信息一般在开发调试时启用，而当正式上线后，一般会将该函数去掉。</li></ul><p><strong>3、源代码（Sources）</strong>其主要功能如下介绍</p><p class='item-img' data-src='https://pic4.zhimg.com/v2-cf61d4c59d1620e9a96f74ab84d2d027_1440w.jpg'><img src="https://pic4.zhimg.com/v2-cf61d4c59d1620e9a96f74ab84d2d027_1440w.jpg" alt=""></p><p><strong>4、网络（Network）大体功能如下：</strong></p><p class='item-img' data-src='https://pic4.zhimg.com/v2-ff058011fb5c4df1e1a558feb67df545_1440w.jpg'><img src="https://pic4.zhimg.com/v2-ff058011fb5c4df1e1a558feb67df545_1440w.jpg" alt=""></p><ul><li>打开浏览器,按 f12,点击 Network,可以查看相关网络请求信息,记得是打开 f12 之后再刷新页面才会开始记录的</li></ul><p class='item-img' data-src='https://pic3.zhimg.com/v2-e8b63050aa5aee1271250d45f940024e_1440w.jpg'><img src="https://pic3.zhimg.com/v2-e8b63050aa5aee1271250d45f940024e_1440w.jpg" alt=""></p><ul><li>查看 Network 基本信息,请求了哪些地址及每个 URL 的网络相关请求信息都可以看的到 URL，响应状态码，响应数据类型，响应数据大小，响应时间</li></ul><p class='item-img' data-src='https://pic1.zhimg.com/v2-5a3eb9a4f6553aaf12e2e715000c7f7a_1440w.jpg'><img src="https://pic1.zhimg.com/v2-5a3eb9a4f6553aaf12e2e715000c7f7a_1440w.jpg" alt=""></p><ul><li>请求 URL 可进行筛选和分类，选择不同分类,查看请求 URL,方便查找</li></ul><p class='item-img' data-src='https://pic2.zhimg.com/v2-fff49ec5c4761f0e17fa70f47d4093c7_1440w.jpg'><img src="https://pic2.zhimg.com/v2-fff49ec5c4761f0e17fa70f47d4093c7_1440w.jpg" alt=""></p><ul><li>也可以直接 Filter 搜索查询相关 URL，可以输入关键字或者正则表达式进行查询</li></ul><p class='item-img' data-src='https://pic1.zhimg.com/v2-9f813a3d5a045e7771de0052958c1e84_1440w.jpg'><img src="https://pic1.zhimg.com/v2-9f813a3d5a045e7771de0052958c1e84_1440w.jpg" alt=""></p><ul><li>Waterfall 能分割重要的请求耗时,查看具体请求耗时在哪个地方,鼠标指到相关区域可以看到具体耗时</li></ul><p class='item-img' data-src='https://pic1.zhimg.com/v2-443fe9f7eabd239b9762e4701ab44a24_1440w.jpg'><img src="https://pic1.zhimg.com/v2-443fe9f7eabd239b9762e4701ab44a24_1440w.jpg" alt=""></p><ul><li>我们具体分析下里面每个各代表什么意思,分别耗时多少,通过这个来分析服务器到底是哪个环节出了问题</li></ul><ol><li>Queueing 是排队的意思</li><li>Stalled 是阻塞 请求访问该 URL 的主机是有并发和连接数限制的,必须要等之前的执行才能执行之后的,这段时间的耗时</li><li>DNS Lookup 是指域名解析所耗时间</li><li>Initial connection 初始化连接时间,这里一般是 TCP 3 次连接握手时间</li><li>SSL https 特有,是一种协议</li><li>Request sent 发送请求所消耗的时间</li><li>Waiting 等待响应时间,这里一般是最耗时的</li><li>Content Download 下载内容所需要消耗的时间</li></ol><p><strong>请求文件具体说明</strong></p><p class='item-img' data-src='https://pica.zhimg.com/v2-457e994216ffe2626cd07c84a0bdf4d4_1440w.jpg'><img src="https://pica.zhimg.com/v2-457e994216ffe2626cd07c84a0bdf4d4_1440w.jpg" alt=""></p><p><strong>一共分为四个模块：</strong></p><ul><li>Header：面板列出资源的请求 url、HTTP 方法、响应状态码、请求头和响应头及它们各自的值、请求参数等等</li><li>Preview：预览面板，用于资源的预览。</li><li>Response：响应信息面板包含资源还未进行格式处理的内容</li><li>Timing：资源请求的详细信息花费时间</li></ul><p>转载自 <a href="https://zhuanlan.zhihu.com/p/138922503">chrome 浏览器中 F12 功能的简单介绍 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先介绍 Chrome 开发者工具中，调试时使用最多的三个功能页面是：&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=119003541&amp;amp;content_type=Article&amp;amp;match_order=</summary>
      
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端开发" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-图</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/18076.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/18076.html</id>
    <published>2025-04-29T12:48:06.000Z</published>
    <updated>2025-09-29T13:52:55.656Z</updated>
    
    <content type="html"><![CDATA[<p>图是一种比线性表和树更为复杂的数据结构。在图结构中，结点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关。</p><p>图结构在计算机科学和算法设计中有广泛的应用。例如，在社交网络分析中，可以使用图结构来表示用户之间的关系；在路线规划中，可以使用图结构来表示道路网络和城市之间的连接关系；在人工智能领域中，图结构可以用于表示知识图谱和推荐系统等。</p><p>在离散数学中，<a href="https://zhida.zhihu.com/search?content_id=240065349&amp;content_type=Article&amp;match_order=1&amp;q=%E5%9B%BE%E8%AE%BA&amp;zhida_source=entity">图论</a>是专门研究图的性质的数学分支，而在数据结构中，则应用图论的知识讨论如何在计算机上实现图的操作，因此主要学习图的存储结构，以及若干图的操作的实现。</p><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a><strong>一、定义</strong></h2><p>图（Graph）<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container>由两个集合<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.74ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 769 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container>组成，记为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.03ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4875.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1063.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2119.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2508.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(3277.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3722.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(4486.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.74ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 769 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container>是顶点的有穷非空集合，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container>是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.74ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 769 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container>中顶点偶对的有穷集合，这些顶点偶对称为边。<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.278ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2333 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(769,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1158,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1944,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.267ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2328 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(764,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1153,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1939,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>通常分别表示图<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container>的顶点集合和边集合，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.267ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2328 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(764,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1153,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1939,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>可以为空集。<br>若<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.267ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2328 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(764,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1153,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1939,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>为空，则图<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container>只有顶点而没有边。</p><p class='item-img' data-src='https://pic1.zhimg.com/v2-e3059f50f90d9658cefa096fb0b25a46_1440w.jpg'><img src="https://pic1.zhimg.com/v2-e3059f50f90d9658cefa096fb0b25a46_1440w.jpg" alt=""></p><p>对于图<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container>，若边集<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.267ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2328 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(764,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1153,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1939,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>为有向边的集合，则称该图为有向图；<br>若边集<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.267ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2328 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(764,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1153,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1939,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>为无向边的集合，则称该图为无向图。<br>如上图所示，左图为有向图，右图为无向图。</p><p>在有向图中，顶点对$<x, y=""><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="56.701ex" height="2.161ex" role="img" focusable="false" viewBox="0 -750 25062 955"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">序</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">它</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">称</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">从</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">顶</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="mi" transform="translate(11000,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(11572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(12572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">顶</text></g><g data-mml-node="mi" transform="translate(13572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="mi" transform="translate(14572,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(16062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(17062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">条</text></g><g data-mml-node="mi" transform="translate(18062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(19062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(20062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">边</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(21062,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(22062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">因</text></g><g data-mml-node="mi" transform="translate(23062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">此</text></g><g data-mml-node="mi" transform="translate(24062,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g></g></g></svg></mjx-container><x, y=""><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 1000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">与</text></g></g></g></svg></mjx-container><y, x=""><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="86.113ex" height="2.161ex" role="img" focusable="false" viewBox="0 -750 38062 955"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">不</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">同</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">两</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">条</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">边</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7000,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">顶</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">尖</text></g><g data-mml-node="mi" transform="translate(15000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">括</text></g><g data-mml-node="mi" transform="translate(16000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">号</text></g><g data-mml-node="mi" transform="translate(17000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">括</text></g><g data-mml-node="mi" transform="translate(18000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">起</text></g><g data-mml-node="mi" transform="translate(19000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">来</text></g><g data-mml-node="mi" transform="translate(20000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(21000,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(21572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(22572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(23572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(24572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">边</text></g><g data-mml-node="mi" transform="translate(25572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(26572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">始</text></g><g data-mml-node="mi" transform="translate(27572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="mi" transform="translate(28572,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(29572,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(30062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(31062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(32062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(33062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">边</text></g><g data-mml-node="mi" transform="translate(34062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(35062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">终</text></g><g data-mml-node="mi" transform="translate(36062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(37062,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g></g></g></svg></mjx-container><x, y="">$也称作一条弧，其中 x 为弧尾，y 为弧头。</x,></y,></x,></x,></p><pre><code>A ──→ B│     │↓     ↓C ──→ D</code></pre><ul><li><a,b> 表示从顶点 A 到顶点 B 的有向边</a,b></li><li><a,c> 表示从顶点 A 到顶点 C 的有向边</a,c></li><li><b,d> 表示从顶点 B 到顶点 D 的有向边</b,d></li><li><c,d> 表示从顶点 C 到顶点 D 的有向边</c,d></li><li>箭头表示方向，<a,b> ≠ <b,a></b,a></a,b></li></ul><p>在无向图中，顶点对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>是无序的，它称为与顶点 x 和顶点 y 相关联的一条边。这条边没有特定的方向，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(879,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1323.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1895.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>是同一条边。为了有别于有向图，无向图的顶点对用一对圆括号括起来。</p><pre><code>A ---- B|      ||      |C ---- D</code></pre><ul><li>(A,B) 表示顶点 A 和顶点 B 之间的无向边</li><li>(A,C) 表示顶点 A 和顶点 C 之间的无向边</li><li>(B,D) 表示顶点 B 和顶点 D 之间的无向边</li><li>(C,D) 表示顶点 C 和顶点 D 之间的无向边</li><li>没有方向性，(A,B) = (B,A)</li></ul><h2 id="二、基本术语"><a href="#二、基本术语" class="headerlink" title="二、基本术语"></a><strong>二、基本术语</strong></h2><p>下面介绍图结构中的一些基本术语（注：n 表示图中顶点数目，e 表示边的数目）。</p><ul><li>子图：假设右两个图 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.03ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4875.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1063.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2119.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2508.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(3277.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3722.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(4486.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.163ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 5818.2 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(819,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1341.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2397,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(2786,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(861.3,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(3891.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(4336.4,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(848.3,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(5429.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，如果  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="7.119ex" height="1.857ex" role="img" focusable="false" viewBox="0 -683 3146.6 821"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(769,0)"><g data-mml-node="mo"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1321.8,0)"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path></g><g data-mml-node="mi" transform="translate(2377.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container> 且  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="7.096ex" height="1.851ex" role="img" focusable="false" viewBox="0 -680 3136.6 818"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(764,0)"><g data-mml-node="mo"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1316.8,0)"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path></g><g data-mml-node="mi" transform="translate(2372.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container> ，则称 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.406ex" height="1.767ex" role="img" focusable="false" viewBox="0 -759 1063.5 781"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(819,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container> 为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container> 的子图。如下图所示，图（b）是图（a）的子图。</li></ul><p class='item-img' data-src='https://pica.zhimg.com/v2-e792ed271825867742cba1f2c3158414_1440w.jpg'><img src="https://pica.zhimg.com/v2-e792ed271825867742cba1f2c3158414_1440w.jpg" alt=""></p><ul><li>无向完全图和有向完全图：对于无向图，若具有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.634ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4700.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1811.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2811.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3311.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3700.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(4200.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> 条边，则称为无向安全图。对于有向图，若具有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.372ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3700.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1811.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2811.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3311.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 条弧，则称为有向完全图。</li><li>稀疏图和稠密图：边或弧很少（如  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="10.768ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4759.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(743.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1799.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2399.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2697.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3182.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(3659.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4159.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(4159.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> ​ ）的图称为稀疏图，反之称为稠密图。</li><li>权和网：若在图的每条边上标上具有某种含义的数值，该数值称为该边上的权值。这些权值可以表示从一个顶点到另一个顶点的距离或耗费。这种带权的图通常称为网。</li><li>邻接点：对于无向图 G，如果图的边  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.077ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4454.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(874,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1318.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1803.7,0)"><g data-mml-node="mo"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(2078.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2745.4,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3690.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container> ，则称顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.725ex" height="1.742ex" role="img" focusable="false" viewBox="0 -759 762.5 770"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container> 互为邻接点，即 v 和 v’相邻接。边<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.589ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 2470.1 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(874,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1318.7,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(2081.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>依附于顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.725ex" height="1.742ex" role="img" focusable="false" viewBox="0 -759 762.5 770"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container>，或者说边<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.589ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 2470.1 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(874,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1318.7,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(2081.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>与顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.725ex" height="1.742ex" role="img" focusable="false" viewBox="0 -759 762.5 770"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container> 相关联。</li><li><p>度、入度和出度：顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 的度是指和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 相关联的边的数目，记为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.324ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2795 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1532,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1921,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(2406,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。例如，下图（b）中的顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.085ex" height="1.342ex" role="img" focusable="false" viewBox="0 -443 921.6 593"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>​ 的度是 2。</p><p>对于有向图，顶点 v 的度分为入度和出度。<br>入度是以顶点 v 为头的弧的数目，记为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2595 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1332,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1721,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(2206,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>；<br>出度是以顶点 v 为尾的弧的数目，记为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.457ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2854 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1591,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1980,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(2465,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 。<br>顶点 v 的度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.434ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10800 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1532,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1921,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(2406,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3072.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4128.6,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(4632.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(5460.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5849.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(6334.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6945.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7946,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(8709,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(9537,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9926,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(10411,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p><p>例如，下图（a）中的顶点  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.085ex" height="1.342ex" role="img" focusable="false" viewBox="0 -443 921.6 593"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> ​ 的入度 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.007ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4865.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1332,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1721,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="msub" transform="translate(1721,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2642.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3309.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4365.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，出度 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.593ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5124.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1591,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1980,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="msub" transform="translate(1980,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2901.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3568.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4624.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>，度 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="31.546ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13943.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1532,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1921,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="msub" transform="translate(1921,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2842.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3509.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4565.1,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(5069.1,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(5897.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6286.1,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7207.7,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(7207.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7818.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8819.1,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(9582.1,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(10410.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(10799.1,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11720.7,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(11720.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12387.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(13443.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></p></li></ul><p class='item-img' data-src='https://pic1.zhimg.com/v2-e3059f50f90d9658cefa096fb0b25a46_1440w.jpg'><img src="https://pic1.zhimg.com/v2-e3059f50f90d9658cefa096fb0b25a46_1440w.jpg" alt=""></p><ul><li>路径和路径长度：在无向图 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container> 中，从顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 到顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.725ex" height="1.742ex" role="img" focusable="false" viewBox="0 -759 762.5 770"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container> 的路径是一个顶点序列 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="29.558ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13064.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(1151.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2207.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(2692.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3037.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3482.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3982.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4426.9,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(4911.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5256.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(5701.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6201.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(6646.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(7984.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8429.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(8914.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9259.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9704.2,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10860,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(11915.8,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12400.8,0)"><g data-mml-node="mo"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(12675.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> ，其中 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.79ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8305 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(874,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1219,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1663.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2297.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3298.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3798.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4242.8,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(4727.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5072.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5517.4,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(5929.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6596.2,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7541,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container> ， <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="10.084ex" height="1.968ex" role="img" focusable="false" viewBox="0 -666 4457.1 870"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2523.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3579.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> ​。</li><li>如果 G 是有向图，则路径也是有向的，顶点序列应满足  $<vi,j−1,vi,j>∈E<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 1000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g></g></g></svg></mjx-container>1≤j≤m$ ​。路径长度是一条路径上经过的边或弧的数目。</vi,j−1,vi,j></li><li>回路或环：第一个顶点和最后一个顶点相同的路径称为回路或环。</li><li>简单路径、简单回路或简单环：序列中顶点不重复出现的路径称为简单路径。除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路，称为简单回路或简单环。</li><li>连通、连通图和连通分量：在无向图 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container> 中，如果从顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 到顶点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.725ex" height="1.742ex" role="img" focusable="false" viewBox="0 -759 762.5 770"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container> 有路径，则称 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.725ex" height="1.742ex" role="img" focusable="false" viewBox="0 -759 762.5 770"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container> 是连通的。如果对于图中任意两个顶点 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="9.293ex" height="2.211ex" role="img" focusable="false" viewBox="0 -683 4107.5 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(812,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1256.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(2393.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3338.5,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container> ，​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>  和  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.944ex" height="1.668ex" role="img" focusable="false" viewBox="0 -443 859.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container> ​ 都是连通的，则称 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container> 是连通图。而所谓连通分量，指的是无向图中的极大连通子图。例如，下图（a）就是一个连通图，而图（b）则是非连通图，但它有 3 个连通分量，见图（c）。</li></ul><p class='item-img' data-src='https://pic4.zhimg.com/v2-f09095275a90d97101440d1c4a2c11c7_1440w.jpg'><img src="https://pic4.zhimg.com/v2-f09095275a90d97101440d1c4a2c11c7_1440w.jpg" alt=""></p><ul><li>强连通图和强连通分量：在有向图 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container> 中，如果对于每一对 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="9.293ex" height="2.211ex" role="img" focusable="false" viewBox="0 -683 4107.5 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(812,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1256.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(2393.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3338.5,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container> ，​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="6.798ex" height="2.286ex" role="img" focusable="false" viewBox="0 -716 3004.8 1010.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1089.7,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="msub" transform="translate(2145.5,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container> ，从 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>  到 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.944ex" height="1.668ex" role="img" focusable="false" viewBox="0 -443 859.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>  和从 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.944ex" height="1.668ex" role="img" focusable="false" viewBox="0 -443 859.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>  到 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>  都存在路径，则称 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container> 是强连通图。有向图中的极大强连通子图称作有向图的强连通分量。例如，下图（a）就是一个强连通图，而图（b）则不是强连通图，但它有两个强连通分量，见图（c）。</li></ul><p class='item-img' data-src='https://picx.zhimg.com/v2-10547220c74d442939b4130983ea0a99_1440w.jpg'><img src="https://picx.zhimg.com/v2-10547220c74d442939b4130983ea0a99_1440w.jpg" alt=""></p><ul><li>连通图的生成树：一个极小连通子图，它含有图中全部顶点，但只有足以构成一棵树的 n-1 边，这样的连通子图称为连通图的生成树。例如，下图（c）是图（a）的最大连通分量的一棵生成树。如果在一棵生成树上添加一条边，必定构成一个环，因为这条边使得它依附的那两个顶点之间有了第二条路径。</li></ul><p class='item-img' data-src='https://picx.zhimg.com/v2-e61ff08cd748d1d064f6d3c3976b17f7_1440w.jpg'><img src="https://picx.zhimg.com/v2-e61ff08cd748d1d064f6d3c3976b17f7_1440w.jpg" alt=""></p><ul><li>有向树和生成森林：有一个顶点的入度为 0，其余顶点的入度均为 1 的有向图称为有向树。一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧。例如，下图（a）是一棵有向树，图（b）是一个有向图，它的森林是图（c）。</li></ul><p class='item-img' data-src='https://picx.zhimg.com/v2-3af8740c7dc2a8fea87ab26ec43971b1_1440w.jpg'><img src="https://picx.zhimg.com/v2-3af8740c7dc2a8fea87ab26ec43971b1_1440w.jpg" alt=""></p><h2 id="三、存储结构"><a href="#三、存储结构" class="headerlink" title="三、存储结构"></a><strong>三、存储结构</strong></h2><p>由于图的结构比较复杂，任意两个顶点之间都可能存在联系，因此无法以数据元素在存储区中的物理位置来表示元素之间的关系，即图没有顺序存储结构，但可以借助二维数组来表示元素之间的关系，即<a href="https://zhida.zhihu.com/search?content_id=240065349&amp;content_type=Article&amp;match_order=1&amp;q=%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5&amp;zhida_source=entity">邻接矩阵</a>表示法。</p><p>另一方面，由于图的任意两个顶点间都可能存在关系，因此，用链式存储表示图是很自然的事，图的链式存储有多种，有<a href="https://zhida.zhihu.com/search?content_id=240065349&amp;content_type=Article&amp;match_order=1&amp;q=%E9%82%BB%E6%8E%A5%E8%A1%A8&amp;zhida_source=entity">邻接表</a>、<a href="https://zhida.zhihu.com/search?content_id=240065349&amp;content_type=Article&amp;match_order=1&amp;q=%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8&amp;zhida_source=entity">十字链表</a>和<a href="https://zhida.zhihu.com/search?content_id=240065349&amp;content_type=Article&amp;match_order=1&amp;q=%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8&amp;zhida_source=entity">邻接多重表</a>，应根据实际需要的不同选择不同的存储结构。</p><h3 id="3-1、邻接矩阵"><a href="#3-1、邻接矩阵" class="headerlink" title="3.1、邻接矩阵"></a><strong>3.1、邻接矩阵</strong></h3><h3 id="3-1-1、表示法"><a href="#3-1-1、表示法" class="headerlink" title="3.1.1、表示法"></a><strong>3.1.1、表示法</strong></h3><p>邻接矩阵（Adjacency Matrix）是表示顶点之间相邻关系的矩阵。设 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.013ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3541.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(786,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1175,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(1944,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2388.7,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(3152.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>是具有 n 个顶点的图，则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container> 的邻接矩阵是具有如下性质的 n 阶方阵：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.616ex;" xmlns="http://www.w3.org/2000/svg" width="44.695ex" height="2.363ex" role="img" focusable="false" viewBox="0 -772.1 19755 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1028,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1373,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1651,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1929,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2341,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2896.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3952.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr" transform="translate(0,22.1)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mtext"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msub" transform="translate(778,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1590,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2034.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mtext" transform="translate(2893.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mtext" transform="translate(3671.9,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">或</text><path data-c="A0" d="" transform="translate(1250,0)"></path></g><g data-mml-node="mo" transform="translate(5171.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5560.9,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6372.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6817.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(7676.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8343.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9288.4,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mtext" transform="translate(10052.4,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(10302.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(13302.4,0)"><g data-mml-node="mtext"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">其</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">他</text></g></g></g></g><g data-mml-node="mo" transform="translate(15802.4,0) translate(0 250)"></g></g></g></g></svg></mjx-container></p><p>例如，下图为一个有向图和它的邻接矩阵:</p><p class='item-img' data-src='https://pic4.zhimg.com/v2-06a9561715bda273fb3d261eabf17a39_1440w.jpg'><img src="https://pic4.zhimg.com/v2-06a9561715bda273fb3d261eabf17a39_1440w.jpg" alt=""></p><p>若 G 是网，则邻接矩阵可以定义为：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.616ex;" xmlns="http://www.w3.org/2000/svg" width="44.695ex" height="2.363ex" role="img" focusable="false" viewBox="0 -772.1 19755 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1028,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1373,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1651,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1929,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2341,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2896.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3952.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr" transform="translate(0,22.1)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mtext"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msub" transform="translate(778,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1590,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2034.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mtext" transform="translate(2893.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mtext" transform="translate(3671.9,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">或</text><path data-c="A0" d="" transform="translate(1250,0)"></path></g><g data-mml-node="mo" transform="translate(5171.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5560.9,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6372.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6817.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(7676.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8343.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9288.4,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mtext" transform="translate(10052.4,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(10302.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(13302.4,0)"><g data-mml-node="mtext"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">其</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">他</text></g></g></g></g><g data-mml-node="mo" transform="translate(15802.4,0) translate(0 250)"></g></g></g></g></svg></mjx-container></p><p>其中，​<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="3.019ex" height="1.668ex" role="img" focusable="false" viewBox="0 -443 1334.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="TeXAtom" transform="translate(749,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container>  表示边上的权值，​ ∞  表示计算机允许的、大于所有边上权值的数。例如，下图为一个有向网和它的邻接矩阵:</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-4a230713453857cef4793f659820c24e_1440w.jpg'><img src="https://pic3.zhimg.com/v2-4a230713453857cef4793f659820c24e_1440w.jpg" alt=""></p><p>用邻接矩阵表示法表示图，除了一个用于存储邻接矩阵的二维数组外，还需要用一个一维数组来存储顶点信息。在 C 语言中，图的邻接矩阵类型描述如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 表示极大值</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767</span><br><span class="hljs-comment">// 最大顶点数</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100</span><br>​<br><span class="hljs-comment">// 假设顶点的数据类型为字符型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;<br>​<br><span class="hljs-comment">// 假设边的权值类型为整型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;<br>​<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span><br>    <span class="hljs-comment">// 顶点表</span><br>    VerTexType vexs[MVNum];<br>    <span class="hljs-comment">// 邻接矩阵</span><br>    ArcType arcs[MVNum][MVNum];<br>    <span class="hljs-comment">// 图的当前顶点数和边数</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<br>}AMGraph;<br></code></pre></td></tr></table></figure><h3 id="3-1-2、创建无向网"><a href="#3-1-2、创建无向网" class="headerlink" title="3.1.2、创建无向网"></a><strong>3.1.2、创建无向网</strong></h3><p>已知一个图的顶点和边，使用邻接矩阵表示法来创建此图的方法比较简单，下面以一个无向网为例来说明创建图的算法。该算法的步骤为：</p><ul><li>输入总顶点数和总边数。</li><li>依次输入顶点的信息存入顶点表中。</li><li>初始化邻接矩阵，使每个权值初始化为极大值。</li><li>构造邻接矩阵。依次输入每条边依附的顶点和其权值，确定两个顶点在图中的位置之后，使相应边赋予相应的权值，同时使其对称边赋予相同的权值。</li></ul><p>相应的算法描述为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 采用邻接矩阵表示法，创建无向网G</span><br>Status <span class="hljs-title function_">CreateUDN</span><span class="hljs-params">(AMGraph &amp;G)</span> {<br>    <span class="hljs-comment">// 输入总顶点数和总边数</span><br>    <span class="hljs-built_in">cin</span>&gt;&gt;G.vexnum&gt;&gt;G.arcnum;<br>​<br>    <span class="hljs-comment">// 依次输入顶点信息</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;G.vexnum; ++i)<br>        <span class="hljs-built_in">cin</span>&gt;&gt;G.vexs[i]<br>​<br>    <span class="hljs-comment">// 初始化邻接矩阵，边的权值均为极大值MaxInt</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;G.vexnum; ++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;G.vexnum; ++j)<br>            G.arcs[i][j]=MaxInt;<br>​<br>    <span class="hljs-comment">// 构造邻接矩阵</span><br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;G.arcnum;++k) {<br>        <span class="hljs-comment">// 输入一条边依附的顶点和其权值</span><br>        <span class="hljs-built_in">cin</span>&gt;v1&gt;&gt;v2&gt;&gt;w;<br>        <span class="hljs-comment">// 确定v1和v2在G中的位置，即顶点数组的下标</span><br>        i=LocateVex(G,v1);<br>        j=LocateVex(G,v2);<br>        <span class="hljs-comment">// 边&lt;v1, v2&gt;的权值置为w</span><br>        G.arcs[i][j]=w;<br>        <span class="hljs-comment">// 置&lt;v1, v2&gt;的对称边&lt;v2, v1&gt;的权值置为w</span><br>        G.arcs[j][i]=G.arcs[i][j];<br>    }<br>​<br>    <span class="hljs-keyword">return</span> OK;<br>}<br></code></pre></td></tr></table></figure><p>该算法的时间复杂度是  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="17.767ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7853.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2030,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2559,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3131,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3520,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(4120,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4620,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5064.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5886.9,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(6609.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(7075.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7464.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> ​</p><p>若要建立无向图，只需对上述算法做两处小的改动：一是初始化邻接矩阵时，将边的权值均初始化为 0；二是构造邻接矩阵时，将权值 w 改为常量值 1 即可。同样，将该算法稍做修改即可建立一个有向网或有向图。</p><h3 id="3-1-3、优缺点"><a href="#3-1-3、优缺点" class="headerlink" title="3.1.3、优缺点"></a><strong>3.1.3、优缺点</strong></h3><p>邻接矩阵表示法的优点是：</p><ul><li>便于判断两个顶点之间是否有边，即根据 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.074ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4452.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1028,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1373,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1651,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1929,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2341,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2896.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3952.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 或 1 来判断。</li><li>便于计算各个顶点的度。对于无向图，邻接矩阵第 i 行元素之和就是顶点 i 的度；对于有向图，第 i 行元素之和就是顶点 i 的出度，第 i 列元素之和就是顶点 i 的入度。</li></ul><p>邻接矩阵表示法的缺点是：</p><ul><li>不便于增加和删除顶点。</li><li>不便于统计边的数目，需要扫描邻接矩阵所有元素才能统计完毕，时间复杂度为 ​ O(n2) 。</li><li>空间复杂度高。如果是有向图，n 个顶点需要 ​ n2  个单元存储边。如果是无向图，因其邻接矩阵是对称的，所以对规模较大的邻接矩阵可以采用压缩存储的方法，仅存储下三角（或上三角）的元素，这样需要 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.634ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4700.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1811.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2811.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3311.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3700.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(4200.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> 个单元即可。但无论以何种方式存储，邻接矩阵表示法的空间复杂度均为  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.975ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2641 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(1752,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2252,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> ​，这对于稀疏图而言尤其浪费空间。</li></ul><h3 id="3-2、邻接表"><a href="#3-2、邻接表" class="headerlink" title="3.2、邻接表"></a><strong>3.2、邻接表</strong></h3><h3 id="3-2-1、表示法"><a href="#3-2-1、表示法" class="headerlink" title="3.2.1、表示法"></a><strong>3.2.1、表示法</strong></h3><p>邻接表（Adjacency List）是图的一种链式存储结构。</p><p>在邻接表中，对图中每个顶点 ​ 建立一个单链表，把与  vi ​ 相邻接的顶点放在这个链表中。邻接表中每个单链表的第一个结点存放有关顶点的信息，把这一结点看成链表的表头，其余结点存放有关边的信息，这样邻接表便由两部分组成：表头结点表和边表。</p><p>表头结点表，由所有表头结点以顺序结构的形式存储，以便可以随机访问任一顶点的边链表。表头结点包括数据域（data）和链域（firstarc）两部分，如下图（a）所示。其中，数据域用于存储顶点 ​ vi  的名称或其他信息；链域用于指向链表中第一结点（即与顶点 ​ vi  相邻接的第一个邻接点）。</p><p>边表，由表示图中顶点间关系的 2n 个边链表组成。边链表中边结点包括邻接点域、数据域和链域三部分，如下图（b）所示。其中，邻接点域指示与顶点  vi ​ 相邻接的点在图中的位置；数据域存储和边相关的信息，如权值等；链域指示与顶点 ​ vi  相邻接的下一个邻接点。</p><p class='item-img' data-src='https://pica.zhimg.com/v2-2f9dcd6eccafd78d3ec359dfc8ad3e10_1440w.jpg'><img src="https://pica.zhimg.com/v2-2f9dcd6eccafd78d3ec359dfc8ad3e10_1440w.jpg" alt=""></p><p>例如，在下图（a）中有两个图，图（b）则是它们对应的邻接表。</p><p class='item-img' data-src='https://pica.zhimg.com/v2-393ef7abde2f46bc2d19efd7455791e6_1440w.jpg'><img src="https://pica.zhimg.com/v2-393ef7abde2f46bc2d19efd7455791e6_1440w.jpg" alt=""></p><p>在无向图的邻接表中，顶点 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>  的度恰为第 i 个链表中的结点数；而在有向图中，第 i 个链表中的结点个数只是顶点 ​ 的出度，为求入度，必须遍历整个邻接表。在所有链表中，其邻接点域的值为 i 的结点的个数就是顶点   <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> ​ 的入度。有时，为了便于确定顶点的入度，可以建立一个有向图的逆邻接表，即对每个顶点 ​  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>  建立一个链接所有进入 ​  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>  的边的表。例如，下图（c）为有向图 ​ 的逆邻接表。</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-8a8d905a5e97a7bbe990c42e5d162918_1440w.jpg'><img src="https://pic3.zhimg.com/v2-8a8d905a5e97a7bbe990c42e5d162918_1440w.jpg" alt=""></p><p>根据上述讨论，要定义一个邻接表，需要定义存放顶点的头结点和表示边的边结点。在 C 语言中，图的邻接表存储结构的类型描述如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 最大顶点数</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100</span><br>​<br><span class="hljs-comment">// 边结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span> {</span><br>    <span class="hljs-comment">// 该边所指向的顶点的位置（邻接点域）</span><br>    <span class="hljs-type">int</span> adjvex;<br>    <span class="hljs-comment">// 指向下一条边的指针（链域）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span> *<span class="hljs-title">nextarc</span>;</span><br>    <span class="hljs-comment">// 和边相关的信息（数据域）</span><br>    OtherInfo info;<br>}ArcNode;<br>​<br><span class="hljs-comment">// 顶点信息</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VNode</span> {</span><br>    VerTexType data;<br>    <span class="hljs-comment">// 指向第一条依附该顶点的边的指针</span><br>    ArcNode *firstarc;<br>}VNode, AdjList[MVNum];<br>​<br><span class="hljs-comment">// 邻接表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span><br>    AdjList vertices;<br>    <span class="hljs-comment">// 图的当前顶点数和边数</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<br>}ALGraph;<br></code></pre></td></tr></table></figure><h3 id="3-2-2、创建无向图"><a href="#3-2-2、创建无向图" class="headerlink" title="3.2.2、创建无向图"></a><strong>3.2.2、创建无向图</strong></h3><p>基于邻接表表示法创建一个图，需要创建其相应的顶点表和边表。下面以一个无向图为例来说明创建图的算法。该算法步骤为：</p><ul><li>输入总顶点数和总边数。</li><li>依次输入顶点的信息存入顶点表中，使每个表头结点的指针域初始化为 NULL。</li><li>创建邻接表。依次输入每条边依附的两个顶点，确定这两个顶点的序号 i 和 j 之后，将此边结点分别插入 ​  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>  和   <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.944ex" height="1.668ex" role="img" focusable="false" viewBox="0 -443 859.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container> ​ 对应的两个边链表的头部。</li></ul><p>相应的算法描述为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 采用邻接表表示法，创建无向图G</span><br>Status <span class="hljs-title function_">CreateUDG</span><span class="hljs-params">(ALGraph &amp;G)</span> {<br>    <span class="hljs-comment">// 输入总顶点数，总边数</span><br>    <span class="hljs-built_in">cin</span>&gt;&gt;G.vexnum&gt;&gt;G.arcnum;<br>​<br>    <span class="hljs-comment">// 输入顶点信息，构造表头结点表</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;G.vexnum; ++i) {<br>        <span class="hljs-comment">// 输入顶点的值</span><br>        <span class="hljs-built_in">cin</span>&gt;&gt;G.vertices[i].data;<br>        <span class="hljs-comment">// 初始化表头结点的指针域为NULL</span><br>        G.vertices[i].firstarc=<span class="hljs-literal">NULL</span>;<br>    }<br>​<br>    <span class="hljs-comment">// 输入各边，构造邻接表</span><br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>; k&lt;G.arcnum; ++k) {<br>        <span class="hljs-comment">// 输入一条边依附的两个顶点</span><br>        <span class="hljs-built_in">cin</span>&gt;&gt;v1&gt;&gt;v2;<br><br>        <span class="hljs-comment">// 确定v1和v2在G中的位置，即顶点在G.vertices中的下标</span><br>        i=LocateVex(G,v1);<br>        j=LocateVex(G,v2);<br>​<br>        <span class="hljs-comment">// 生成一个新的边结点*p1</span><br>        p1=new ArcNode;<br>        <span class="hljs-comment">// 邻接点序号为j</span><br>        p2-&gt;adjvex=j;<br>        <span class="hljs-comment">// 将新结点*p1插入到顶点vi的边表头部</span><br>        p1-&gt;nextarc=G.vertices[i].firstarc;<br>        G.vertices[i].firstarc=p1;<br>​<br>        <span class="hljs-comment">// 生成另一个对称的新边结点*p2</span><br>        p2=new ArcNode;<br>        <span class="hljs-comment">// 邻接点序号为i</span><br>        p2-&gt;adjvex=i;<br>        <span class="hljs-comment">// 将新结点*p2插入到顶点vj的边表头部</span><br>        p2-&gt;nextarc=G.vertices[j].firstarc;<br>        G.vertices[j].firstarc=p2;<br>    }<br>​<br>    <span class="hljs-keyword">return</span> OK;<br>}<br></code></pre></td></tr></table></figure><p>该算法的时间复杂度是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.035ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3551.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1974.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(2696.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(3162.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p><p>建立有向图的邻接表与此类似，只是更加简单，每读入一个顶点对序号<i, j="">，仅需生成一个邻接点序号为 j 的边表结点，并将其插入到 ​ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.837ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 812 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>  的边链表头部即可。若要创建网的邻接表，可以将边的权值存储在 info 域中。</i,></p><p>需要注意的是，一个图的邻接矩阵表示是唯一的，但其邻接表表示不唯一，这是因为在邻接表表示中，各边表结点的链接次序取决于建立邻接表的算法，以及边的输入次序。</p><h3 id="3-2-3、优缺点"><a href="#3-2-3、优缺点" class="headerlink" title="3.2.3、优缺点"></a><strong>3.2.3、优缺点</strong></h3><p>邻接矩阵和邻接表是图的两种最常用的存储结构，它们各有所长。与邻接矩阵相比，邻接表有其自己的优缺点。其优点是：</p><ul><li>便于增加和删除顶点。</li><li>便于统计边的数目，按顶点表顺序扫描所有边表可得到边的数目，时间复杂度为 O(n+e)。</li><li>空间效率高。对于一个具有 n 个顶点 e 条边的图 G，若 G 是无向图，则在其邻接表表示中有 n 个顶点表结点和 2e 个边表结点；若 G 是有向图，则在它的邻接表表示或逆邻接表表示中均有 n 个顶点表结点和 e 个边表结点。因此，邻接表或逆邻接表表示的空间复杂度为 O(n+e)，适合表示稀疏图。对于稠密图，考虑到邻接表中要附加链域，因此常采取邻接矩阵表示法。</li></ul><p>其缺点是：</p><ul><li>不便于判断顶点之间是否有边，要判定 ​ 和 ​ 之间是否有边，就需扫描第 i 个边表，最坏情况下要耗费 O(n)时间。</li><li>不便于计算有向图各个顶点的度。对于无向图，在邻接表表示中顶点 ​ 的度是第 i 个边表中的结点个数。在有向图的邻接表中，第 i 个边表上的结点个数是顶点 ​ vi  的出度，但求  vi ​ 的入度较困难，需遍历各顶点的边表。若有向图采用逆邻接表表示，则与邻接表表示相反，求顶点的入度容易，而求顶点的出度较难。</li></ul><h3 id="3-3、十字链表"><a href="#3-3、十字链表" class="headerlink" title="3.3、十字链表"></a><strong>3.3、十字链表</strong></h3><p>十字链表（Orthogonal List）是有向图的另一种链式存储结构。它可以看成是将有向图的邻接表和逆邻接表结合起来得到的一种链表。在十字链表中，对应于有向图中每一条弧有一个结点，对应于每个顶点也有一个结点。这些结点的结构形式如下图所示。</p><p class='item-img' data-src='https://pic4.zhimg.com/v2-4bb997c1c4861394a6576f934efaec75_1440w.jpg'><img src="https://pic4.zhimg.com/v2-4bb997c1c4861394a6576f934efaec75_1440w.jpg" alt=""></p><p>在弧结点中有 5 个域：其中尾域 tailvex 和头域 headvex 分别指示弧尾和弧头这两个顶点在图中的位置，链域 hlink 指向弧头相同的下一条弧，而链域 tlink 指向弧尾相同的下一条弧，info 域指向该弧的相关信息。弧头相同弧在同一链表上，弧尾相同的弧也在同一链表上。而它们的头结点即为顶点结点。</p><p>顶点结点由 3 个域组成：其中 data 域存储和顶点相关的信息，如顶点的名称等；firstin 和 firstout 为两个链域，分别指向以该顶点为弧头或弧尾的第一个弧结点。</p><p>例如，下图（b）是下图（a）所示图的十字链表。</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-7a7a65ce8f086a3a42646ff38aff0734_1440w.jpg'><img src="https://pic3.zhimg.com/v2-7a7a65ce8f086a3a42646ff38aff0734_1440w.jpg" alt=""></p><p>若将有向图的邻接矩阵看成是稀疏矩阵的话，则十字链表也可以看成是邻接矩阵的链式存储结构，在图的十字链表中，弧结点所在的链表非循环链表，结点之间相对位置自然形成，不一定按顶点序号有序，表头结点即顶点结点，它们之间不是链接，而是顺序存储。</p><p>在 C 语言中，有向图的十字链表存储结构的类型描述如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTEX_NUM 20</span><br>​<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcBox</span> {</span><br>    <span class="hljs-comment">// 该弧的尾和头结点的位置</span><br>    <span class="hljs-type">int</span> tailvex,headvex;<br>    <span class="hljs-comment">// 分别为弧头相同和弧尾相同的弧的链域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcBox</span> *<span class="hljs-title">hlink</span>,*<span class="hljs-title">tlink</span>;</span><br>    <span class="hljs-comment">// 该弧相关信息的指针</span><br>    InfoType *info;<br>}ArcBox;<br>​<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VexNode</span> {</span><br>    VertexType data;<br>    <span class="hljs-comment">// 分别指向该顶点的第一条入弧和出弧</span><br>    ArcBox *firstin, *firstout;<br>}VexNode;<br>​<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span><br>    <span class="hljs-comment">// 表头向量</span><br>    VexNode xlist[MAX_VERTEX_NUM];<br>    <span class="hljs-comment">// 有向图的当前顶点数和弧数</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<br>}QLGraph;<br></code></pre></td></tr></table></figure><p>只要输入 n 个顶点的信息和 e 条弧的信息，便可建立该有向图的十字链表。建立十字链表的时间复杂度和建立邻接表是相同的。在十字链表中既容易找到以 ​ vi  为尾的弧，也容易找到以  vi ​ 为头的弧，因而容易求得顶点的出度和入度（或需要，可在建立十字链表的同时求出）。在某些有向图的应用中，十字链表是很有用的工具。</p><h3 id="3-4、邻接多重表"><a href="#3-4、邻接多重表" class="headerlink" title="3.4、邻接多重表"></a><strong>3.4、邻接多重表</strong></h3><p>邻接多重表（Adjacency Multilist）是无向图的另一种链式存储结构。虽然邻接表是无向图的一种很有效的存储结构，在邻接表中容易求得顶点和边的各种信息。但是，在邻接表中每一条边  (vi,vj)  有 ​ 两个结点，分别在第 i 个和第 j 个链表中，这给某些图的操作带来不便。例如，在某些图的应用问题中，需要对边进行某种操作，如对已被搜索过的边作记号或删除一条边等，此时需要找到表示同一条边的两个结点。因此，在进行这一类操作的无向图的问题中采用邻接多重表作存储结构更为适宜。</p><p class='item-img' data-src='https://pic1.zhimg.com/v2-21cf84e7eb759e2e0732d32827d79014_1440w.jpg'><img src="https://pic1.zhimg.com/v2-21cf84e7eb759e2e0732d32827d79014_1440w.jpg" alt=""></p><p>邻接多重表的结构和十字链表类似。在邻接多重表中，每一条边用一个结点表示，它由 6 个域组成。其中，mark 为标志域，可用以标记该条边是否被搜索过；ivex 和 jvex 为该边依附的两个顶点在图中的位置；ilink 指向下一条依附于顶点 ivex 的边；jlink 指向下一条依附于顶点 jvex 的边；info 指向和边相关的各种信息的指针域。</p><p>每一个顶点也用一个结点表示，它由两个域组成。其中，data 域存储和该顶点相关的信息，firstedge 域指示第一条依附于该顶点的边。</p><p>例如，下图（b）是下图（a）所示图的邻接多重表。</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-34a280ae950d7e6eef6b312b1f648704_1440w.jpg'><img src="https://pic3.zhimg.com/v2-34a280ae950d7e6eef6b312b1f648704_1440w.jpg" alt=""></p><p>在邻接多重表中，所有依附于同一顶点的边串联在同一链表中，由于每条边依附于两个顶点，则每个边结点同时链接在两个链表中。可见，对无向图而言，其邻接多重表和邻接表的差别，仅仅在于同一条边在邻接表中用两个结点表示，而在邻接多重表中只有一个结点。因此，除了在边结点中增加一个标志域外，邻接多重表所需的存储量和邻接表相同。</p><p>在 C 语言中，邻接多重表的类型描述如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTEX_NUM 20</span><br>​<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>{</span>unvisited, visited} VisitIf;<br>​<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EBox</span> {</span><br>    <span class="hljs-comment">// 访问标记</span><br>    VisitIf mark;<br>    <span class="hljs-comment">// 该边依附的两个顶点的位置</span><br>    <span class="hljs-type">int</span> ivex, jvex;<br>    <span class="hljs-comment">// 分别指向依附这两个顶点的下一条边</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EBox</span> *<span class="hljs-title">ilink</span>, *<span class="hljs-title">jlink</span>;</span><br>    <span class="hljs-comment">// 该边信息指针</span><br>    InfoType *info;<br>}Ebox;<br>​<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VexBox</span> {</span><br>    VertexType data;<br>    <span class="hljs-comment">// 指向第一条依附该顶点的边</span><br>    EBox *firstedge;<br>}VexBox;<br>​<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span><br>    VexBox adjmulist[MAX_VERTEX_NUM];<br>    <span class="hljs-comment">// 无向图的当前顶点数和边数</span><br>    <span class="hljs-type">int</span> vexnum, edgenum;<br>}AMLGraph;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;图是一种比线性表和树更为复杂的数据结构。在图结构中，结点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关。&lt;/p&gt;
&lt;p&gt;图结构在计算机科学和算法设计中有广泛的应用。例如，在社交网络分析中，可以使用图结构来表示用户之间的关系；在路线规划中，可以使用图结构来表示道路</summary>
      
    
    
    
    <category term="归档" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E5%BD%92%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构-队列</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/27379.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/27379.html</id>
    <published>2025-04-29T07:30:08.000Z</published>
    <updated>2025-09-29T09:50:23.539Z</updated>
    
    <content type="html"><![CDATA[<p>队列（queue）是只允许在一端进行插入操作，在另一端进行删除操作的线性表</p><p>这个的特点是<strong>先进先出（First In First Out）</strong><br>然后是允许插入的一端称为队尾（rear），允许删除的一端称为队头(front)。<br>向队列中插入新的数据元素称为入队。<br>从队列中删除队头元素称为出队。</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-04e876ac91bea9efd936209291cf3faa_1440w.jpg'><img src="https://pic3.zhimg.com/v2-04e876ac91bea9efd936209291cf3faa_1440w.jpg" alt=""></p><h3 id="队列的顺序存储结构"><a href="#队列的顺序存储结构" class="headerlink" title="队列的顺序存储结构"></a>队列的顺序存储结构</h3><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a><a href="https://zhida.zhihu.com/search?content_id=232731442&amp;content_type=Article&amp;match_order=1&amp;q=%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97&amp;zhida_source=entity">顺序队列</a></h3><p>用一组地址连续的存储单元，依次存放从队头到队尾的数据元素，称为顺序队列。实现顺序队列需要设两个指针：队头指针（front）和队尾指针（rear），分别指向队头元素和队尾元素。</p><p class='item-img' data-src='https://picx.zhimg.com/v2-6d104064401aebf29ed49e89ee9de0d1_1440w.jpg'><img src="https://picx.zhimg.com/v2-6d104064401aebf29ed49e89ee9de0d1_1440w.jpg" alt=""></p><p><strong>如果在插入 E 的基础上再插入元素 F，将会插入失败。因为 rear == MAXSIZE，尾指针已经达到队列的最大长度。但实际上队列存储空间并未全部被占满，这种现象叫做假溢出</strong></p><p>通过上图可以发现队头出队、对尾入队造成了数组前面的空间未被利用而出现假溢出。</p><p>为了解决“假溢出”现象，使得队列的存储空间得到充分利用，一个非常巧妙的方法就是将顺序队列的数组看成一个头尾相接的循环结构。</p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TD<br>    subgraph &quot;循环队列 (大小=5)&quot;<br>        Cell0[0: a6] --&gt; Cell1[1: 空] --&gt; Cell2[2: a3] --&gt; Cell3[3: a4] --&gt; Cell4[4: a5]<br>        Cell4 -.-&gt; Cell0<br>    end<br><br>    Front[front指针] --&gt; Cell2<br>    Rear[rear指针] --&gt; Cell1<br><br>    style Cell2 fill:#e8f5e8<br>    style Cell1 fill:#fff3e0<br></code></pre></td></tr></table></figure><p><strong>现在队满了，但是队头指针和队尾指针相等（队空的时候也是这样）。</strong><br>那么该怎么判断队空还是队满？</p><blockquote><p>两种解决方案</p></blockquote><ol><li>设置一个计数器，开始的时候为 0，当有元素入队时+1，有元素出队时-1，值为 MAXSIZE 时队满</li><li>保留一个元素空间，当队尾指针指的空单元的下一个单元是队头指针所指单元是为对满</li></ol><p><strong>队满的条件（Queue.rear+1）%MAXSIZE == Queue.front</strong><br><strong>队空的条件 Queue.rear=Queue.front</strong></p><p>循环队列结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 20</span><br><span class="hljs-comment">/*循环队列的存储结构*/</span><br><span class="hljs-keyword">typedef</span> structQueue<br>&#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> front;    <span class="hljs-comment">//头指针</span><br>    <span class="hljs-type">int</span> rear;    <span class="hljs-comment">//尾指针</span><br>&#125;Queue;<br></code></pre></td></tr></table></figure><p>操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*初始化空队列*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InitSeQueue</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>)</span>;<br><span class="hljs-comment">/*获得队列长度*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetLength</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>)</span>;<br><span class="hljs-comment">/*判空*/</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>)</span>;<br><span class="hljs-comment">/*判满*/</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>)</span>;<br><span class="hljs-comment">/*入队操作*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">EnterQueue</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>, <span class="hljs-type">int</span> e)</span>;<br><span class="hljs-comment">/*出队操作*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ExitQueue</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>, <span class="hljs-type">int</span> e)</span>;<br></code></pre></td></tr></table></figure><h3 id="初始化空队列"><a href="#初始化空队列" class="headerlink" title="初始化空队列"></a>初始化空队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">InitSeQueue</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>)</span><br>&#123;<br>    <span class="hljs-built_in">queue</span>-&gt;front = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>-&gt;rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获得队列长度"><a href="#获得队列长度" class="headerlink" title="获得队列长度"></a>获得队列长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">GetLength</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">queue</span>-&gt;rear-<span class="hljs-built_in">queue</span>-&gt;front+MAXSIZE)%MAXSIZE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">queue</span>-&gt;front==<span class="hljs-built_in">queue</span>-&gt;rear;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判满"><a href="#判满" class="headerlink" title="判满"></a>判满</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">queue</span>-&gt;rear+<span class="hljs-number">1</span>)%MAXSIZE==<span class="hljs-built_in">queue</span>-&gt;front;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">EnterQueue</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>, <span class="hljs-type">int</span> e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (isFull(<span class="hljs-built_in">queue</span>))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列满了\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">queue</span>-&gt;data[<span class="hljs-built_in">queue</span>-&gt;rear] = e;<br>        <span class="hljs-built_in">queue</span>-&gt;rear = (<span class="hljs-built_in">queue</span>-&gt;rear + <span class="hljs-number">1</span>) % MAXSIZE;<span class="hljs-comment">//求模，rear的值就在[0,MAXSIZE-1]循环</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>queue-&gt;data[queue-&gt;rear] = e;</code><br>将要入队的元素 e 存储到队尾指针 rear 所指向的位置，这是实际的数据插入操作</p><p><code>queue-&gt;rear = (queue-&gt;rear + 1) % MAXSIZE;</code><br>将队尾指针 rear 向后移动一位<br>使用模运算(queue-&gt;rear + 1) % MAXSIZE 实现循环效果<br>当 rear 到达数组末尾时，会自动回到数组开头（索引 0）,利用了数组的存储空间，避免了顺序队列的”假溢出”问题</p><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ExitQueue</span><span class="hljs-params">(Queue* <span class="hljs-built_in">queue</span>, <span class="hljs-type">int</span>*e)</span><br>&#123;<br>     <span class="hljs-keyword">if</span> (isEmpty(<span class="hljs-built_in">queue</span>))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已经是空队列了\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        *e = <span class="hljs-built_in">queue</span>-&gt;data[<span class="hljs-built_in">queue</span>-&gt;front];<br>        <span class="hljs-built_in">queue</span>-&gt;front = (<span class="hljs-built_in">queue</span>-&gt;front + <span class="hljs-number">1</span>) % MAXSIZE;<span class="hljs-comment">//注意不要写成(queue-&gt;front - 1)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>*e = queue-&gt;data[queue-&gt;front];</code></p><p><code>queue-&gt;front</code>是队头指针，指向队列的第一个有效元素位置<br><code>queue-&gt;data[queue-&gt;front]</code>表示获取队头位置存储的数据元素<br><code>e</code>是一个指向整型变量的指针<br><code>*e</code>表示对这个指针进行解引用，访问指针指向的内存位置</p><p><strong>整体操作</strong>： - 将队头元素的值赋给调用者传入的变量地址 - 这样调用函数就能获取到出队的元素值</p><h3 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h3><p>链队列由单链表组成，队头指针指向链表的头结点，队尾指针指向尾节点。空队列时队头指针和队尾指针都指向头节点。</p><p class='item-img' data-src='https://pic4.zhimg.com/v2-ffb23cca0c20511b80a2970db251db65_1440w.jpg'><img src="https://pic4.zhimg.com/v2-ffb23cca0c20511b80a2970db251db65_1440w.jpg" alt=""></p><p>链队列结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*结点结构*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;Node;<br><br><span class="hljs-comment">/*链队列结构*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQueue</span></span><br><span class="hljs-class">&#123;</span><br>    Node* front,rear;<span class="hljs-comment">//队头、队尾指针</span><br>&#125;LinkQueue;<br></code></pre></td></tr></table></figure><h3 id="初始化链队列"><a href="#初始化链队列" class="headerlink" title="初始化链队列"></a>初始化链队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">InitLinkQueue</span><span class="hljs-params">(LinkQueue* LinkQ)</span><br>&#123;<br>    Node* head = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-keyword">if</span> (LinkQ != <span class="hljs-literal">NULL</span> &amp;&amp; head != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        LinkQ-&gt;front = LinkQ-&gt;rear = head;<br>        head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空-1"><a href="#判空-1" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(LinkQueue* LinkQ)</span><br>&#123;<br><br>    <span class="hljs-keyword">return</span> LinkQ-&gt;front == LinkQ-&gt;rear;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">EnterLinkQueue</span><span class="hljs-params">(LinkQueue* LinkQ, <span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-comment">/* 创建新节点并分配内存空间 */</span><br>    Node* node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-comment">/* 将待插入数据存入新节点 */</span><br>    node-&gt;data = x;<br>    <span class="hljs-comment">/* 设置新节点的后继指针为空 */</span><br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">/* 将新节点连接到当前队尾节点之后 */</span><br>    LinkQ-&gt;rear-&gt;next = node;<br>    <span class="hljs-comment">/* 更新队尾指针，指向新插入的节点 */</span><br>    LinkQ-&gt;rear = node;<br>&#125;<br></code></pre></td></tr></table></figure><p>链队列的入队操作：</p><p>创建新节点：动态分配内存创建新节点<br>设置节点数据：将入队元素 x 存入新节点<br>连接节点：将新节点链接到当前队尾节点之后<br>更新队尾指针：将队尾指针指向新加入的节点</p><h3 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ExitLinkQueue</span><span class="hljs-params">(LinkQueue* LinkQ, <span class="hljs-type">int</span>* x)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty(LinkQ)) <span class="hljs-comment">//首先判断队列是否为空，如果为空则直接返回</span><br>        <span class="hljs-keyword">return</span>;<br>    Node* node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-comment">//保留删除结点的信息</span><br>    node = LinkQ-&gt;front-&gt;next;<br>    *x = LinkQ-&gt;front-&gt;data; <span class="hljs-comment">//将队头节点的数据赋值给输出参数x</span><br>    <span class="hljs-comment">//建立新联系</span><br>    LinkQ-&gt;front-&gt;next = node-&gt;next; <span class="hljs-comment">// 跳过被删除节点，将队头直接连接到下一个节点</span><br>    <span class="hljs-comment">//如果队尾出队了，那么就是空队</span><br>    <span class="hljs-keyword">if</span> (LinkQ-&gt;rear == node)<br>        LinkQ-&gt;front = LinkQ-&gt;rear;<br>    <span class="hljs-built_in">free</span>(node);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;队列（queue）是只允许在一端进行插入操作，在另一端进行删除操作的线性表&lt;/p&gt;
&lt;p&gt;这个的特点是&lt;strong&gt;先进先出（First In First Out）&lt;/strong&gt;&lt;br&gt;然后是允许插入的一端称为队尾（rear），允许删除的一端称为队头(front)。&lt;</summary>
      
    
    
    
    <category term="归档" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E5%BD%92%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构-栈</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/33985.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/33985.html</id>
    <published>2025-04-17T16:17:37.000Z</published>
    <updated>2025-04-22T07:35:17.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈的基本概念"><a href="#栈的基本概念" class="headerlink" title="栈的基本概念"></a>栈的基本概念</h1><h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><p><strong>栈</strong>：是只允许在一端进行插入或删除的线性表。首先栈是一种线性表，但限定这种线性表只能在某一端进行插入和删除操作。<br class='item-img' data-src='https://pic1.zhimg.com/80/v2-a1d987369534eb6c471da568be4aa5cd_720w.png'><img src="https://pic1.zhimg.com/80/v2-a1d987369534eb6c471da568be4aa5cd_720w.png" alt="img"><br><strong>栈顶</strong>（Top）：线性表允许进行插入删除的那一端。<br><strong>栈底</strong>（Bottom)：固定的，不允许进行插入和删除的另一端。<br><strong>空栈</strong>：不含任何元素的空表。</p><p>栈又称为后进先出（Last In First Out）的线性表，简称LIFO结构</p><h3 id="栈的常见基本操作"><a href="#栈的常见基本操作" class="headerlink" title="栈的常见基本操作"></a>栈的常见基本操作</h3><p><strong>InitStack(&amp;S)</strong>：初始化一个空栈S</p><p><strong>StackEmpty(S)</strong>：判断一个栈是否为空，若栈为空则返回true，否则返回false</p><p><strong>Push(&amp;S, x)</strong>：进栈（栈的插入操作），若栈S未满，则将x加入使之成为新栈顶</p><p><strong>Pop(&amp;S, &amp;x)</strong>：出栈（栈的删除操作），若栈S非空，则弹出栈顶元素，并用x返回</p><p><strong>GetTop(S, &amp;x)</strong>：读栈顶元素，若栈S非空，则用x返回栈顶元素</p><p><strong>DestroyStack(&amp;S)</strong>：栈销毁，并释放S占用的存储空间（“&amp;”表示引用调用）</p><h1 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h1><h4 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h4><p>采用顺序存储的栈称为顺序栈，它利用一组地址连续的存储单元存放自栈底到栈顶的数据元素，同时附设一个指针（top）指示当前栈顶元素的位置。<br>若存储栈的长度为MAXSIZE，则栈顶位置top必须小于MAXSIZE。当栈存在一个元素时，top等于0，因此通常把空栈的判断条件定位top等于-1。<br>栈的顺序存储结构可描述为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 5  </span><br><span class="hljs-comment">//定义栈中元素的最大个数</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>&#123;</span><br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> top;<br>&#125;SqStack;<br></code></pre></td></tr></table></figure><p>若现在有一个栈，MAXSIZE是5，则栈的普通情况、空栈、满栈的情况分别如下图所示：</p><p class='item-img' data-src='https://picx.zhimg.com/80/v2-b667691c4e541ad1b4d77611d936ef7e_720w.png'><img src="https://picx.zhimg.com/80/v2-b667691c4e541ad1b4d77611d936ef7e_720w.png" alt="img"></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">InitStack</span><span class="hljs-params">(SqStack* S)</span>&#123; <br>    <span class="hljs-comment">//SqStack&amp; S 是 C++ 的引用参数，用于直接修改外部栈对象</span><br>    <span class="hljs-comment">//若用 C 语言，需改用指针（SqStack* S）</span><br>    S-&gt;top = <span class="hljs-number">-1</span>;             <span class="hljs-comment">//初始化栈顶指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>为什么要用 <code>S-&gt;top = -1</code>？</strong></p><p><strong>顺序栈的本质是一个数组</strong>，栈顶指针 <code>top</code> 表示当前栈顶元素在数组中的位置索引。<br>初始化时 <code>top = -1</code> 有</p><p><strong>空栈条件</strong>：<code>top == -1</code><br>当栈中没有元素时，<code>top</code> 指向数组的“前一个位置”（即无效索引），逻辑上表示“无元素”。</p><p><strong>入栈操作</strong></p><p>先让 <code>top++</code>，移动到下一个可用位置；将新元素存入 <code>data[top]</code>。<br>例如，第一次入栈时，<code>top</code> 从 <code>-1</code> 变为 <code>0</code>，元素存入 <code>data[0]</code>，对应数组的第一个索引。</p><p><strong>判断栈满</strong></p><p><strong>栈满条件</strong>：<code>top == MAX_SIZE - 1</code><br>如果数组大小为 <code>MAX_SIZE</code>，当 <code>top</code> 指向最后一个位置（即 <code>MAX_SIZE - 1</code>）时，表示栈已满。</p><h4 id="判断栈空"><a href="#判断栈空" class="headerlink" title="判断栈空"></a>判断栈空</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(SqStack* S)</span>&#123;<br>    <span class="hljs-keyword">if</span>( S-&gt;top == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//栈中没有元素时，`top` 指向数组的“前一个位置”（即无效索引），逻辑上表示“无元素”</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="进栈"><a href="#进栈" class="headerlink" title="进栈"></a>进栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack* S, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">if</span>( S-&gt;top == MAXSIZE - <span class="hljs-number">1</span> )&#123; <span class="hljs-comment">//栈满，报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <br>    &#125;<br>    S-&gt;top++ ;                  <span class="hljs-comment">//栈顶指针加1</span><br>    S-&gt;data[S-&gt;top] = x;         <span class="hljs-comment">//入栈,写入元素到新栈顶位置</span><br>    <span class="hljs-comment">//S-&gt;data[S-&gt;top]代表栈顶元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack* S, <span class="hljs-type">int</span>* x)</span> &#123;<span class="hljs-comment">//通过指针修改外部变量</span><br>    <span class="hljs-keyword">if</span> (StackEmpty(S)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空，无法出栈\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *x = S-&gt;data[S-&gt;top];<br>    S-&gt;top--;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出栈元素: %d\n&quot;</span>, *x);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="读栈顶元素"><a href="#读栈顶元素" class="headerlink" title="读栈顶元素"></a>读栈顶元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">GetTop</span><span class="hljs-params">(SqStack* S, <span class="hljs-type">int</span>* x)</span> &#123;<span class="hljs-comment">//通过指针修改外部变量</span><br>    <span class="hljs-keyword">if</span> (StackEmpty(S)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空，无栈顶元素\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *x = S-&gt;data[S-&gt;top];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前栈顶元素: %d\n&quot;</span>, *x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>出栈和读栈顶元素操作需要返回两个信息：</p><ul><li><strong>是否成功</strong>（通过 <code>bool</code> 返回值）。</li><li><strong>得到的元素值</strong>（通过 <code>int* x</code> 指针参数）。</li></ul><h3 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 5  <span class="hljs-comment">// 示例栈容量设为5</span></span><br><br><span class="hljs-comment">//栈结构定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span> &#123;</span><br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> top;<br>&#125; SqStack;<br><br><span class="hljs-comment">// 初始化栈</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitStack</span><span class="hljs-params">(SqStack* S)</span> &#123;<br>    S-&gt;top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断栈空</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(SqStack* S)</span> &#123;<br>    <span class="hljs-keyword">return</span> (S-&gt;top == <span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断栈满</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">StackFull</span><span class="hljs-params">(SqStack* S)</span> &#123;<br>    <span class="hljs-keyword">return</span> (S-&gt;top == MAXSIZE - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack* S, <span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StackFull(S)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈已满，无法入栈 %d\n&quot;</span>, x);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    S-&gt;top++;<br>    S-&gt;data[S-&gt;top] = x;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;入栈元素: %d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈（通过指针返回栈顶元素）</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack* S, <span class="hljs-type">int</span>* x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StackEmpty(S)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空，无法出栈\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *x = S-&gt;data[S-&gt;top];<br>    S-&gt;top--;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出栈元素: %d\n&quot;</span>, *x);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">// 获取栈顶元素（通过指针返回）</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">GetTop</span><span class="hljs-params">(SqStack* S, <span class="hljs-type">int</span>* x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StackEmpty(S)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空，无栈顶元素\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *x = S-&gt;data[S-&gt;top];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前栈顶元素: %d\n&quot;</span>, *x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 打印栈内容（辅助函数）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintStack</span><span class="hljs-params">(SqStack* S)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StackEmpty(S)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈内容 (从底到顶): &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= S-&gt;top; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, S-&gt;data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    SqStack S;<br>    <span class="hljs-type">int</span> val;  <span class="hljs-comment">// 用于接收出栈/栈顶元素的值</span><br><br>    InitStack(&amp;S);<br>    PrintStack(&amp;S);  <span class="hljs-comment">// 栈空</span><br><br>    <span class="hljs-comment">// 入栈测试</span><br>    Push(&amp;S, <span class="hljs-number">10</span>);<br>    Push(&amp;S, <span class="hljs-number">20</span>);<br>    Push(&amp;S, <span class="hljs-number">30</span>);<br>    Push(&amp;S, <span class="hljs-number">40</span>);<br>    Push(&amp;S, <span class="hljs-number">50</span>);   <span class="hljs-comment">// 栈满</span><br>    Push(&amp;S, <span class="hljs-number">60</span>);   <span class="hljs-comment">// 触发栈满报错</span><br>    PrintStack(&amp;S);  <span class="hljs-comment">// 10 20 30 40 50</span><br><br>    <span class="hljs-comment">// 获取栈顶</span><br>    GetTop(&amp;S, &amp;val);  <span class="hljs-comment">// 50</span><br><br>    <span class="hljs-comment">// 出栈测试</span><br>    Pop(&amp;S, &amp;val);     <span class="hljs-comment">// 50出栈</span><br>    Pop(&amp;S, &amp;val);     <span class="hljs-comment">// 40出栈</span><br>    PrintStack(&amp;S);    <span class="hljs-comment">// 10 20 30</span><br><br>    <span class="hljs-comment">// 继续出栈直到栈空</span><br>    Pop(&amp;S, &amp;val);     <span class="hljs-comment">// 30</span><br>    Pop(&amp;S, &amp;val);     <span class="hljs-comment">// 20</span><br>    Pop(&amp;S, &amp;val);     <span class="hljs-comment">// 10</span><br>    Pop(&amp;S, &amp;val);     <span class="hljs-comment">// 触发栈空报错</span><br>    PrintStack(&amp;S);    <span class="hljs-comment">// 栈空</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h1><p>采用<strong>链式存储</strong>的栈称为<strong>链栈</strong>，链栈的优点是便于多个栈共享存储空间和提高其效率，且不存在栈满上溢的情况。通常采用单链表实现，并规定所有操作都是在单链表的表头进行的。这里规定链栈没有头节点，<strong>Lhead</strong>指向栈顶元素</p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-2f84fc59716af6dc2a4bf3ca23f496d7_720w.webp'><img src="https://pic4.zhimg.com/80/v2-2f84fc59716af6dc2a4bf3ca23f496d7_720w.webp" alt="img"></p><p>对于空栈来说，链表原定义是头指针指向空，那么链栈的空其实就是top=NULL的时候。</p><h4 id="链栈的结构定义："><a href="#链栈的结构定义：" class="headerlink" title="链栈的结构定义："></a>链栈的结构定义：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 定义链式栈的节点结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkedStackNode</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> data;                       <span class="hljs-comment">// 存储栈元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkedStackNode</span> * <span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指向下一节点的指针</span><br>&#125; LinkedStackNode, * LinkedStack;   <span class="hljs-comment">// 类型别名：LinkedStackNode表示节点，LinkedStack表示节点指针</span><br>LinkedStack top; <span class="hljs-comment">// 声明一个栈顶指针（本质是LinkedStackNode*类型）</span><br></code></pre></td></tr></table></figure><h4 id="初始化空栈"><a href="#初始化空栈" class="headerlink" title="初始化空栈"></a>初始化空栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//初始化</span><br>LinkedStack <span class="hljs-title function_">Init_LinkedStack</span><span class="hljs-params">()</span>                                       <br>&#123;<br>LinkedStack top=(LinkedStackNode * )<span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>( LinkedStackNode));<br><span class="hljs-keyword">if</span>(top!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//申请空间成功</span><br>top-&gt;next=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//设置栈顶指针为空</span><br><span class="hljs-keyword">return</span> top;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判断栈空-1"><a href="#判断栈空-1" class="headerlink" title="判断栈空"></a>判断栈空</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//判栈空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LinkedStack_Empty</span><span class="hljs-params">(LinkedStack top)</span>                            <br>&#123;<br><span class="hljs-keyword">if</span>(top-&gt;next==<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//检查栈顶指针的值 </span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//栈S为空，函数返回1</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Push_LinkedStack</span><span class="hljs-params">(LinkedStack top,elemtype x)</span>                     <br><span class="hljs-comment">//插入数据元素x为新的栈顶元素</span><br>&#123;<br>LinkedStackNode * node;<br>node=(LinkedStackNode * )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkedStackNode));<br><span class="hljs-keyword">if</span>(node==<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//申请结点空间失败,插入失败，函数返回0</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>node-&gt;data=x;<span class="hljs-comment">//设置新结点的数据域</span><br>node-&gt;next=top-&gt;next;<span class="hljs-comment">//设置新结点的指针城</span><br>top-&gt;next=node;<span class="hljs-comment">//设置头结点指针城指向新的栈顶元素</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//插入成功，函数返回1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="出栈-1"><a href="#出栈-1" class="headerlink" title="出栈"></a>出栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Pop_LinkedStack</span><span class="hljs-params">(LinkedStack top, elemtype *x)</span>                    <br>&#123;LinkedStackNode * node;<br><span class="hljs-keyword">if</span>(top-&gt;next==<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>node=top-&gt;next;<span class="hljs-comment">//将原栈顶数据元素弹出并赋给node</span><br>*x=node-&gt;data;<span class="hljs-comment">//将原栈顶数据元素的数据赋值给x</span><br>top-&gt;next=node-&gt;next;<span class="hljs-comment">//top指向链栈中的下一个数据元素</span><br><span class="hljs-built_in">free</span> (node);<span class="hljs-comment">//释放原栈顶数据元素所占的空间</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;  <br></code></pre></td></tr></table></figure><h4 id="取栈顶元素"><a href="#取栈顶元素" class="headerlink" title="取栈顶元素"></a>取栈顶元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">GetTop_LinkedStack</span><span class="hljs-params">(LinkedStack top)</span>                <br>&#123; <br><span class="hljs-keyword">if</span>(top-&gt;next)<br>      &#123;<br>            <span class="hljs-keyword">return</span> top-&gt;next-&gt;data;<br><br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="求栈长"><a href="#求栈长" class="headerlink" title="求栈长"></a>求栈长</h4><p>设置计数器，随top指针后移，计数器加1，直到遍历完所有元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求栈长</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length_LinkedStack</span><span class="hljs-params">(LinkedStack top)</span>                                       <br>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(top-&gt;next!=<span class="hljs-literal">NULL</span>) <br>&#123;<br>++count;<br>top=top-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整代码实现-1"><a href="#完整代码实现-1" class="headerlink" title="完整代码实现"></a>完整代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-comment">// 定义链式栈的节点结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkedStackNode</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> data;                       <span class="hljs-comment">// 存储栈元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkedStackNode</span> * <span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指向下一节点的指针</span><br>&#125; LinkedStackNode, * LinkedStack;   <span class="hljs-comment">// 类型别名：LinkedStackNode表示节点，LinkedStack表示节点指针</span><br>LinkedStack top; <span class="hljs-comment">// 声明一个栈顶指针（本质是LinkedStackNode*类型）</span><br><br><span class="hljs-comment">//初始化</span><br>LinkedStack <span class="hljs-title function_">Init_LinkedStack</span><span class="hljs-params">()</span>                                       <br>&#123;<br>LinkedStack top=(LinkedStackNode * )<span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>( LinkedStackNode));<br><span class="hljs-keyword">if</span>(top!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//申请空间成功</span><br>top-&gt;next=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//设置栈顶指针为空</span><br><span class="hljs-keyword">return</span> top;<br>&#125;<br><br><span class="hljs-comment">//判栈空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LinkedStack_Empty</span><span class="hljs-params">(LinkedStack top)</span>                            <br>&#123;<br><span class="hljs-keyword">if</span>(top-&gt;next==<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//检查栈顶指针的值 </span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//栈S为空，函数返回1</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Push_LinkedStack</span><span class="hljs-params">(LinkedStack top,elemtype x)</span>                     <br><span class="hljs-comment">//插入数据元素x为新的栈顶元素</span><br>&#123;<br>LinkedStackNode * node;<br>node=(LinkedStackNode * )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkedStackNode));<br><span class="hljs-keyword">if</span>(node==<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//申请结点空间失败,插入失败，函数返回0</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>node-&gt;data=x;<span class="hljs-comment">//设置新结点的数据域</span><br>node-&gt;next=top-&gt;next;<span class="hljs-comment">//设置新结点的指针城</span><br>top-&gt;next=node;<span class="hljs-comment">//设置头结点指针城指向新的栈顶元素</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//插入成功，函数返回1</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//求栈长</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length_LinkedStack</span><span class="hljs-params">(LinkedStack top)</span>                                       <br>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(top-&gt;next!=<span class="hljs-literal">NULL</span>) <br>&#123;<br>++count;<br>top=top-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Pop_LinkedStack</span><span class="hljs-params">(LinkedStack top, elemtype *x)</span>                    <br>&#123;LinkedStackNode * node;<br><span class="hljs-keyword">if</span>(top-&gt;next==<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>node=top-&gt;next;<span class="hljs-comment">//将原栈顶数据元素弹出并赋给node</span><br>*x=node-&gt;data;<span class="hljs-comment">//将原栈顶数据元素的数据赋值给x</span><br>top-&gt;next=node-&gt;next;<span class="hljs-comment">//top指向链栈中的下一个数据元素</span><br><span class="hljs-built_in">free</span> (node);<span class="hljs-comment">//释放原栈顶数据元素所占的空间</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;  <br><br><span class="hljs-comment">//取栈顶元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetTop_LinkedStack</span><span class="hljs-params">(LinkedStack top)</span>                <br>&#123; <br><span class="hljs-keyword">if</span>(top-&gt;next)<br>      &#123;<br>            <span class="hljs-keyword">return</span> top-&gt;next-&gt;data;<br><br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i,t,x,a[<span class="hljs-number">20</span>];<br>LinkedStack top=Init_LinkedStack();<span class="hljs-comment">//初始化栈</span><br>x=LinkedStack_Empty(top);<span class="hljs-comment">//判栈空结果赋值给X</span><br><span class="hljs-keyword">if</span>(x=<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈为空\n&quot;</span>);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请依次输入5个数,开始入栈：\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) <br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>Push_LinkedStack(top,a[i]);<br>x=GetTop_LinkedStack(top);<br><span class="hljs-keyword">if</span>(x!=<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前栈顶元素为%d\n&quot;</span>,x);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;入栈结束\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈长为%d\n&quot;</span>,Length_LinkedStack(top));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始出栈:\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br>Pop_LinkedStack(top,&amp;t);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,t);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出栈后栈长为%d\n&quot;</span>,Length_LinkedStack(top));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈的基本概念&quot;&gt;&lt;a href=&quot;#栈的基本概念&quot; class=&quot;headerlink&quot; title=&quot;栈的基本概念&quot;&gt;&lt;/a&gt;栈的基本概念&lt;/h1&gt;&lt;h3 id=&quot;栈的定义&quot;&gt;&lt;a href=&quot;#栈的定义&quot; class=&quot;headerlink&quot; title=&quot;栈</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-线性表（链表）</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/42928.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/42928.html</id>
    <published>2025-04-05T16:24:40.000Z</published>
    <updated>2025-04-17T16:55:19.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表（链式存储结构）"><a href="#链表（链式存储结构）" class="headerlink" title="链表（链式存储结构）"></a>链表（链式存储结构）</h2><p>链表又称单链表、链式存储结构，用于存储逻辑关系为“一对一”的数据。</p><p>和顺序表不同，使用链表存储数据，不强制要求数据在内存中集中存储，各个元素可以分散存储在内存中。例如，使用链表存储 {1,2,3}，各个元素在内存中的存储状态可能是：</p><p class='item-img' data-src='https://pic2.zhimg.com/v2-5d42c22a139067e60fadd7957ef2c383_b.jpg'><img src="https://pic2.zhimg.com/v2-5d42c22a139067e60fadd7957ef2c383_b.jpg" alt="动图封面"></p><p>可以看到，数据不仅没有集中存放，在内存中的存储次序也是混乱的。那么，链表是如何存储数据间逻辑关系的呢？</p><p>链表存储数据间逻辑关系的实现方案是：为每一个元素配置一个指针，每个元素的指针都指向自己的直接后继元素，如下图所示：</p><p class='item-img' data-src='https://pic4.zhimg.com/v2-fdb02aabf90a9eb2d64c5e8a06feb053_b.jpg'><img src="https://pic4.zhimg.com/v2-fdb02aabf90a9eb2d64c5e8a06feb053_b.jpg" alt="动图封面"></p><p>显然，我们只需要记住元素 1 的存储位置，通过它的指针就可以找到元素 2，通过元素 2 的指针就可以找到元素 3，以此类推，各个元素的先后次序一目了然。</p><p>像图 2 这样，数据元素随机存储在内存中，通过指针维系数据之间“一对一”的逻辑关系，这样的存储结构就是链表。</p><h3 id="结点（节点）"><a href="#结点（节点）" class="headerlink" title="结点（节点）"></a>结点（节点）</h3><blockquote><p>很多教材中，也将“结点”写成“节点”，它们是一个意思。</p></blockquote><p>在链表中，每个数据元素都配有一个指针，这意味着，链表上的每个“元素”都长下图这个样子：</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-375eac6ce04146b28224cf447e00b012_b.jpg'><img src="https://pic3.zhimg.com/v2-375eac6ce04146b28224cf447e00b012_b.jpg" alt="动图封面"></p><p>数据域用来存储元素的值，指针域用来存放指针。数据结构中，通常将图 3 这样的整体称为结点。</p><p>也就是说，链表中实际存放的是一个一个的结点，数据元素存放在各个结点的数据域中。举个简单的例子，图 2 中 {1,2,3} 的存储状态用链表表示，如下图所示：</p><p class='item-img' data-src='https://pic1.zhimg.com/v2-6c920d117fb3d0a2bdcccfd3b002e20c_b.jpg'><img src="https://pic1.zhimg.com/v2-6c920d117fb3d0a2bdcccfd3b002e20c_b.jpg" alt="动图封面"></p><p>在 C 语言中，可以用结构体表示链表中的结点，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link</span>&#123;<br>    <span class="hljs-type">char</span> elem; <span class="hljs-comment">//代表数据域</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link</span> * next; <span class="hljs-comment">//代表指针域，指向直接后继元素</span><br>&#125;Link;<br></code></pre></td></tr></table></figure><blockquote><p>我们习惯将结点中的指针命名为 next，因此指针域又常称为“Next 域”。</p></blockquote><h3 id="头结点、头指针和首元结点"><a href="#头结点、头指针和首元结点" class="headerlink" title="头结点、头指针和首元结点"></a>头结点、头指针和首元结点</h3><p>图 4 所示的链表并不完整，一个完整的链表应该由以下几部分构成：</p><ol><li>头指针：一个和结点类型相同的指针，它的特点是：永远指向链表中的第一个结点。上文提到过，我们需要记录链表中第一个元素的存储位置，就是用头指针实现。</li><li>结点：链表中的节点又细分为头结点、首元结点和其它结点：</li></ol><ul><li>头结点：某些场景中，为了方便解决问题，会故意在链表的开头放置一个空结点，这样的结点就称为头结点。也就是说，头结点是位于链表开头、数据域为空（不利用）的结点。</li><li>首元结点：指的是链表开头第一个存有数据的结点。</li><li>其他节点：链表中其他的节点。</li></ul><p>也就是说，一个完整的链表是由头指针和诸多个结点构成的。每个链表都必须有头指针，但头结点不是必须的。</p><p>例如，创建一个包含头结点的链表存储 {1,2,3}，如下图所示：</p><p class='item-img' data-src='https://pic1.zhimg.com/v2-f2b1f40c7ed8cb36d1c7f3215f7b5530_b.jpg'><img src="https://pic1.zhimg.com/v2-f2b1f40c7ed8cb36d1c7f3215f7b5530_b.jpg" alt="动图封面"></p><p>再次强调，头指针永远指向链表中的第一个结点。换句话说，如果链表中包含头结点，那么头指针指向的是头结点，反之头指针指向首元结点。</p><h3 id="链表的创建"><a href="#链表的创建" class="headerlink" title="链表的创建"></a>链表的创建</h3><p>创建一个链表，实现步骤如下：</p><ol><li>定义一个头指针；</li><li>创建一个头结点或者首元结点，让头指针指向它；</li><li>每创建一个结点，都令其直接前驱结点的指针指向它。</li></ol><p>例如，创建一个存储 {1,2,3,4} 且无头节点的链表，C 语言实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Link* <span class="hljs-title">initLink</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">//1、创建头指针</span><br>    Link* p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//2、创建首元结点</span><br>    Link* temp = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>    temp-&gt;elem = <span class="hljs-number">1</span>;<br>    temp-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//头指针指向首元结点</span><br>    p = temp;<br>    <span class="hljs-comment">//3、每创建一个结点，都令其直接前驱结点的指针指向它</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-comment">//创建一个结点</span><br>        Link* a = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>        a-&gt;elem = i;<br>        a-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">//每次 temp 指向的结点就是 a 的直接前驱结点</span><br>        temp-&gt;next = a;<br>        <span class="hljs-comment">//temp指向下一个结点（也就是a),为下次添加结点做准备</span><br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>再比如，创建一个存储 {1,2,3,4} 且含头节点的链表，则 C 语言实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Link* <span class="hljs-title">initLink</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">//1、创建头指针</span><br>    Link* p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//2、创建头结点</span><br>    Link* temp = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>    temp-&gt;elem = <span class="hljs-number">0</span>;<br>    temp-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//头指针指向头结点</span><br>    p = temp;<br>    <span class="hljs-comment">//3、每创建一个结点，都令其直接前驱结点的指针指向它</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-comment">//创建一个结点</span><br>        Link* a = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>        a-&gt;elem = i;<br>        a-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">//每次 temp 指向的结点就是 a 的直接前驱结点</span><br>        temp-&gt;next = a;<br>        <span class="hljs-comment">//temp指向下一个结点（也就是a),为下次添加结点做准备</span><br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表的使用"><a href="#链表的使用" class="headerlink" title="链表的使用"></a>链表的使用</h3><p>对于创建好的链表，我们可以依次获取链表中存储的数据，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-comment">//链表中节点的结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link</span> &#123;<br>    <span class="hljs-type">int</span>  elem;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link</span>* next;<br>&#125;Link;<br><span class="hljs-function">Link* <span class="hljs-title">initLink</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">//1、创建头指针</span><br>    Link* p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//2、创建头结点</span><br>    Link* temp = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>    temp-&gt;elem = <span class="hljs-number">0</span>;<br>    temp-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//头指针指向头结点</span><br>    p = temp;<br>    <span class="hljs-comment">//3、每创建一个结点，都令其直接前驱结点的指针指向它</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-comment">//创建一个结点</span><br>        Link* a = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>        a-&gt;elem = i;<br>        a-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">//每次 temp 指向的结点就是 a 的直接前驱结点</span><br>        temp-&gt;next = a;<br>        <span class="hljs-comment">//temp指向下一个结点（也就是a),为下次添加结点做准备</span><br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">(Link* p)</span> </span>&#123;<br>    Link* temp = p;<span class="hljs-comment">//temp指针用来遍历链表</span><br>    <span class="hljs-comment">//只要temp指向结点的next值不是NULL，就执行输出语句。</span><br>    <span class="hljs-keyword">while</span> (temp) &#123;<br>        Link* f = temp;<span class="hljs-comment">//准备释放链表中的结点</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, temp-&gt;elem);<br>        temp = temp-&gt;next;<br>        <span class="hljs-built_in">free</span>(f);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Link* p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化链表为：\n&quot;</span>);<br>    <span class="hljs-comment">//创建链表&#123;1,2,3,4&#125;</span><br>    p = <span class="hljs-built_in">initLink</span>();<br>    <span class="hljs-comment">//输出链表中的数据</span><br>    <span class="hljs-built_in">display</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序中创建的是带头结点的链表，头结点的数据域存储的是元素 0，因此最终的输出结果为：</p><blockquote><p>0 1 2 3 4</p></blockquote><p>如果不想输出头结点的值，可以将 p-&gt;next 作为实参传递给 display() 函数。</p><p>如果程序中创建的是不带头结点的链表，最终的输出结果应该是：</p><blockquote><p>1 2 3 4</p></blockquote><h2 id="单链表的基本操作"><a href="#单链表的基本操作" class="headerlink" title="单链表的基本操作"></a>单链表的基本操作</h2><p>学会创建链表之后，本节继续讲解链表的一些基本操作，包括向链表中添加数据、删除链表中的数据、查找和更改链表中的数据。</p><p>首先，创建一个带头结点的链表，链表中存储着 {1,2,3,4}：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//链表中节点的结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link</span> &#123;<br>    <span class="hljs-type">int</span>  elem;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link</span>* next;<br>&#125;Link;<br><span class="hljs-function">Link* <span class="hljs-title">initLink</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">//1、创建头指针</span><br>    Link* p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//2、创建头结点</span><br>    Link* temp = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>    temp-&gt;elem = <span class="hljs-number">0</span>;<br>    temp-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//头指针指向头结点</span><br>    p = temp;<br>    <span class="hljs-comment">//3、每创建一个结点，都令其直接前驱结点的指针指向它</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-comment">//创建一个结点</span><br>        Link* a = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>        a-&gt;elem = i;<br>        a-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">//每次 temp 指向的结点就是 a 的直接前驱结点</span><br>        temp-&gt;next = a;<br>        <span class="hljs-comment">//temp指向下一个结点（也就是a),为下次添加结点做准备</span><br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表插入元素"><a href="#链表插入元素" class="headerlink" title="链表插入元素"></a>链表插入元素</h3><p>同顺序表一样，向链表中增添元素，根据添加位置不同，可分为以下 3 种情况：</p><ul><li>插入到链表的头部，作为首元节点；</li><li>插入到链表中间的某个位置；</li><li>插入到链表的最末端，作为链表中最后一个结点；</li></ul><p>对于有头结点的链表，3 种插入元素的实现思想是相同的，具体步骤是：</p><ol><li>将新结点的 next 指针指向插入位置后的结点；</li><li>将插入位置前结点的 next 指针指向插入结点；</li></ol><p>例如，在链表 {1,2,3,4}的基础上分别实现在头部、中间、尾部插入新元素 5，其实现过程如下图所示：</p><p class='item-img' data-src='https://pica.zhimg.com/v2-2b74576c4133d98967e430da2a156c6e_b.jpg'><img src="https://pica.zhimg.com/v2-2b74576c4133d98967e430da2a156c6e_b.jpg" alt="动图封面"></p><p>从图中可以看出，虽然新元素的插入位置不同，但实现插入操作的方法是一致的，都是先执行步骤 1 ，再执行步骤 2。实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertElem</span><span class="hljs-params">(Link* p, <span class="hljs-type">int</span> elem, <span class="hljs-type">int</span> add)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    Link* c = <span class="hljs-literal">NULL</span>;<br>    Link* temp = p;<span class="hljs-comment">//创建临时结点temp</span><br>    <span class="hljs-comment">//首先找到要插入位置的上一个结点</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; add; i++) &#123;<br>        temp = temp-&gt;next;<br>        <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置无效\n&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//创建插入结点c</span><br>    c = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>    c-&gt;elem = elem;<br>    <span class="hljs-comment">//① 将新结点的 next 指针指向插入位置后的结点</span><br>    c-&gt;next = temp-&gt;next;<br>    <span class="hljs-comment">//② 将插入位置前结点的 next 指针指向插入结点；</span><br>    temp-&gt;next = c;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：链表插入元素的操作必须是先步骤 1，再步骤 2；反之，若先执行步骤 2，除非再添加一个指针，作为插入位置后续链表的头指针，否则会导致插入位置后的这部分链表丢失，无法再实现步骤 1。</p><p>对于没有头结点的链表，在头部插入结点比较特殊，需要单独实现。</p><p class='item-img' data-src='https://pica.zhimg.com/v2-bc993f6cb9d4f6bfd732b0a341cfdf84_b.jpg'><img src="https://pica.zhimg.com/v2-bc993f6cb9d4f6bfd732b0a341cfdf84_b.jpg" alt="动图封面"></p><p>和 2)、3) 种情况相比，由于链表没有头结点，在头部插入新结点，此结点之前没有任何结点，实现的步骤如下：</p><ol><li>将新结点的指针指向首元结点；</li><li>将头指针指向新结点。</li></ol><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Link* <span class="hljs-title">insertElem</span><span class="hljs-params">(Link* p, <span class="hljs-type">int</span> elem, <span class="hljs-type">int</span> add)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (add == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">//创建插入结点c</span><br>        Link* c = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>        c-&gt;elem = elem;<br>        c-&gt;next = p;<br>        p = c;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> i;<br>        Link* c = <span class="hljs-literal">NULL</span>;<br>        Link* temp = p;<span class="hljs-comment">//创建临时结点temp</span><br>        <span class="hljs-comment">//首先找到要插入位置的上一个结点</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; add<span class="hljs-number">-1</span>; i++) &#123;<br>            temp = temp-&gt;next;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置无效\n&quot;</span>);<br>                <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//创建插入结点c</span><br>        c = (Link*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Link));<br>        c-&gt;elem = elem;<br>        <span class="hljs-comment">//向链表中插入结点</span><br>        c-&gt;next = temp-&gt;next;<br>        temp-&gt;next = c;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意当 add==1 成立时，形参指针 p 的值会发生变化，因此需要它的新值作为函数的返回值返回。</p></blockquote><h3 id="链表删除元素"><a href="#链表删除元素" class="headerlink" title="链表删除元素"></a>链表删除元素</h3><p>从链表中删除指定数据元素时，实则就是将存有该数据元素的节点从链表中摘除。</p><p>对于有头结点的链表来说，无论删除头部（首元结点）、中部、尾部的结点，实现方式都一样，执行以下三步操作：</p><ol><li>找到目标元素所在结点的直接前驱结点；</li><li>将目标结点从链表中摘下来;</li><li>手动释放结点占用的内存空间；</li></ol><p>从链表上摘除目标节点，只需找到该节点的直接前驱节点 temp，执行如下操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">temp-&gt;next=temp-&gt;next-&gt;next;<br></code></pre></td></tr></table></figure><p>例如，从存有 {1,2,3,4}的链表中删除存储元素 3 的结点，则此代码的执行效果如图 3 所示：</p><p class='item-img' data-src='https://pica.zhimg.com/v2-6d8f7d30515db53226312254da2db706_b.jpg'><img src="https://pica.zhimg.com/v2-6d8f7d30515db53226312254da2db706_b.jpg" alt="动图封面"></p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//p为原链表，elem 为要删除的目标元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">delElem</span><span class="hljs-params">(Link* p, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    Link* del = <span class="hljs-literal">NULL</span>, *temp = p;<br>    <span class="hljs-type">int</span> find = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//1、找到目标元素的直接前驱结点</span><br>    <span class="hljs-keyword">while</span> (temp-&gt;next) &#123;<br>        <span class="hljs-keyword">if</span> (temp-&gt;next-&gt;elem == elem) &#123;<br>            find = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (find == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//删除失败</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">//标记要删除的结点</span><br>        del = temp-&gt;next;<br>        <span class="hljs-comment">//2、将目标结点从链表上摘除</span><br>        temp-&gt;next = temp-&gt;next-&gt;next;<br>        <span class="hljs-comment">//3、释放目标结点</span><br>        <span class="hljs-built_in">free</span>(del);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于不带头结点的链表，需要单独考虑删除首元结点的情况，删除其它结点的方式和上图完全相同，如下图所示：</p><p class='item-img' data-src='https://pica.zhimg.com/v2-a82095c25e668736e2d38dcccf45a5bc_b.jpg'><img src="https://pica.zhimg.com/v2-a82095c25e668736e2d38dcccf45a5bc_b.jpg" alt="动图封面"></p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//p为原链表，elem 为要删除的目标元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">delElem</span><span class="hljs-params">(Link** p, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    Link* del = <span class="hljs-literal">NULL</span>, *temp = *p;<br>    <span class="hljs-comment">//删除首元结点需要单独考虑</span><br>    <span class="hljs-keyword">if</span> (temp-&gt;elem == elem) &#123;<br>        (*p) = (*p)-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> find = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//1、找到目标元素的直接前驱结点</span><br>        <span class="hljs-keyword">while</span> (temp-&gt;next) &#123;<br>            <span class="hljs-keyword">if</span> (temp-&gt;next-&gt;elem == elem) &#123;<br>                find = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (find == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//删除失败</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//标记要删除的结点</span><br>            del = temp-&gt;next;<br>            <span class="hljs-comment">//2、将目标结点从链表上摘除</span><br>            temp-&gt;next = temp-&gt;next-&gt;next;<br>            <span class="hljs-comment">//3、释放目标结点</span><br>            <span class="hljs-built_in">free</span>(del);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数返回 1 时，表示删除成功；返回 -1，表示删除失败。注意，该函数的形参 p 为二级指针，调用时需要传递链表头指针的地址。</p><h3 id="链表查找元素"><a href="#链表查找元素" class="headerlink" title="链表查找元素"></a>链表查找元素</h3><p>在链表中查找指定数据元素，最常用的方法是：从首元结点开始依次遍历所有节点，直至找到存储目标元素的结点。如果遍历至最后一个结点仍未找到，表明链表中没有存储该元素。</p><p>因此，链表中查找特定数据元素的 C 语言实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//p为原链表，elem表示被查找元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">selectElem</span><span class="hljs-params">(Link* p, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//带头结点，p 指向首元结点</span><br>    p = p-&gt;next;<br>    <span class="hljs-keyword">while</span> (p) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;elem == elem) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        p = p-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//返回-1，表示未找到</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意第 5 行代码，对于有结点的链表，需要先将 p 指针指向首元结点；反之，对于不带头结点的链表，注释掉第 5 行代码即可。</p><h3 id="链表更新元素"><a href="#链表更新元素" class="headerlink" title="链表更新元素"></a>链表更新元素</h3><p>更新链表中的元素，只需通过遍历找到存储此元素的节点，对节点中的数据域做更改操作即可。</p><p>直接给出链表中更新数据元素的 C 语言实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//p 为有头结点的链表，oldElem 为旧元素，newElem 为新元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">amendElem</span><span class="hljs-params">(Link* p, <span class="hljs-type">int</span> oldElem, <span class="hljs-type">int</span> newElem)</span> </span>&#123;<br>    p = p-&gt;next;<br>    <span class="hljs-keyword">while</span> (p) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;elem == oldElem) &#123;<br>            p-&gt;elem = newElem;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数返回 1，表示更改成功；返回数字 -1，表示更改失败。如果是没有头结点的链表，直接删除第 3 行代码即可。</p><hr><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>目前我们所学到的链表，无论是动态链表还是静态链表，表中各个节点都只包含一个指针（游标），且都统一指向直接后继节点，这类链表又统称为单向链表或单链表。</p><p>虽然单链表能 100% 存储逻辑关系为 “一对一” 的数据，但在解决某些实际问题时，单链表的执行效率并不高。例如，若实际问题中需要频繁地查找某个结点的前驱结点，使用单链表存储数据显然没有优势，因为单链表的强项是从前往后查找目标元素，不擅长从后往前查找元素。</p><p>解决此类问题，可以建立双向链表（简称双链表）。</p><h3 id="双向链表是什么"><a href="#双向链表是什么" class="headerlink" title="双向链表是什么"></a>双向链表是什么</h3><p>从名字上理解双向链表，即链表是 “双向” 的，如下图所示：</p><p class='item-img' data-src='https://pic4.zhimg.com/v2-62da5191aa8b27e80c1ffc4b1d61d367_b.jpg'><img src="https://pic4.zhimg.com/v2-62da5191aa8b27e80c1ffc4b1d61d367_b.jpg" alt="动图封面"></p><p>“双向”指的是各节点之间的逻辑关系是双向的，头指针通常只设置一个。</p><p>从上图中可以看到，双向链表中各节点包含以下 3 部分信息（如图 2 所示）：</p><ol><li>指针域：用于指向当前节点的直接前驱节点；</li><li>数据域：用于存储数据元素。</li><li>指针域：用于指向当前节点的直接后继节点；</li></ol><p class='item-img' data-src='https://pic4.zhimg.com/v2-6b063e7219eb5143755d567c16dc06b1_b.jpg'><img src="https://pic4.zhimg.com/v2-6b063e7219eb5143755d567c16dc06b1_b.jpg" alt="动图封面"></p><p>因此，双链表的节点结构用 C 语言实现为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span> * prior; <span class="hljs-comment">//指向直接前趋</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span> * next; <span class="hljs-comment">//指向直接后继</span><br>&#125;Line;<br></code></pre></td></tr></table></figure><h3 id="双向链表的创建"><a href="#双向链表的创建" class="headerlink" title="双向链表的创建"></a>双向链表的创建</h3><p>同单链表相比，双链表仅是各节点多了一个用于指向直接前驱的指针域。因此，我们可以在单链表的基础轻松实现对双链表的创建。</p><p>需要注意的是，与单链表不同，双链表创建过程中，每创建一个新节点都要与其前驱节点建立两次联系，分别是：</p><ul><li>将新节点的 prior 指针指向直接前驱节点；</li><li>将直接前驱节点的 next 指针指向新节点；</li></ul><p>这里给出创建双向链表的 C 语言实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Line* <span class="hljs-title">initLine</span><span class="hljs-params">(Line* head)</span> </span>&#123;<br>    Line* list = <span class="hljs-literal">NULL</span>;<br>    head = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<span class="hljs-comment">//创建链表第一个结点（首元结点）</span><br>    head-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    head-&gt;data = <span class="hljs-number">1</span>;<br>    list = head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-comment">//创建并初始化一个新结点</span><br>        Line* body = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<br>        body-&gt;prior = <span class="hljs-literal">NULL</span>;<br>        body-&gt;next = <span class="hljs-literal">NULL</span>;<br>        body-&gt;data = i;<br>        <span class="hljs-comment">//直接前趋结点的next指针指向新结点</span><br>        list-&gt;next = body;<br>        <span class="hljs-comment">//新结点指向直接前趋结点</span><br>        body-&gt;prior = list;<br>        list = list-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以尝试着在 main 函数中输出创建的双链表，C 语言代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span>* prior; <span class="hljs-comment">//指向直接前趋</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span>* next; <span class="hljs-comment">//指向直接后继</span><br>&#125;Line;<br><br><span class="hljs-function">Line* <span class="hljs-title">initLine</span><span class="hljs-params">(Line* head)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    Line* list = <span class="hljs-literal">NULL</span>;<br>    head = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<span class="hljs-comment">//创建链表第一个结点（首元结点）</span><br>    head-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    head-&gt;data = <span class="hljs-number">1</span>;<br>    list = head;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-comment">//创建并初始化一个新结点</span><br>        Line* body = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<br>        body-&gt;prior = <span class="hljs-literal">NULL</span>;<br>        body-&gt;next = <span class="hljs-literal">NULL</span>;<br>        body-&gt;data = i;<br>        <span class="hljs-comment">//直接前趋结点的next指针指向新结点</span><br>        list-&gt;next = body;<br>        <span class="hljs-comment">//新结点指向直接前趋结点</span><br>        body-&gt;prior = list;<br>        list = list-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-comment">//输出链表中的数据</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">(Line* head)</span> </span>&#123;<br>    Line* temp = head;<br>    <span class="hljs-keyword">while</span> (temp) &#123;<br>        <span class="hljs-comment">//如果该节点无后继节点，说明此节点是链表的最后一个节点</span><br>        <span class="hljs-keyword">if</span> (temp-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, temp-&gt;data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &lt;-&gt; &quot;</span>, temp-&gt;data);<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//释放链表中结点占用的空间</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free_line</span><span class="hljs-params">(Line* head)</span> </span>&#123;<br>    Line* temp = head;<br>    <span class="hljs-keyword">while</span> (temp) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>        temp = head;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建一个头指针</span><br>    Line* head = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//调用链表创建函数</span><br>    head = <span class="hljs-built_in">initLine</span>(head);<br>    <span class="hljs-comment">//输出创建好的链表</span><br>    <span class="hljs-built_in">display</span>(head);<br>    <span class="hljs-comment">//显示双链表的优点</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表中第 4 个节点的直接前驱是：%d&quot;</span>, head-&gt;next-&gt;next-&gt;next-&gt;prior-&gt;data);<br>    <span class="hljs-built_in">free_line</span>(head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果：</p><blockquote><p>1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5 链表中第 4 个节点的直接前驱是：3</p></blockquote><h2 id="双向链表基本操作"><a href="#双向链表基本操作" class="headerlink" title="双向链表基本操作"></a>双向链表基本操作</h2><p>前面学习了如何创建一个双向链表，本节学习有关双向链表的一些基本操作，即如何在双向链表中添加、删除、查找或更改数据元素。</p><p>本节知识基于已熟练掌握双向链表创建过程的基础上，我们继续上节所创建的双向链表来学习本节内容，创建好的双向链表如下图所示：</p><p class='item-img' data-src='https://pic2.zhimg.com/v2-c5f7cce2077c56369e912c09fbe8b1ef_b.jpg'><img src="https://pic2.zhimg.com/v2-c5f7cce2077c56369e912c09fbe8b1ef_b.jpg" alt="动图封面"></p><p>图 双向链表示意图</p><h3 id="双向链表添加节点"><a href="#双向链表添加节点" class="headerlink" title="双向链表添加节点"></a>双向链表添加节点</h3><p>根据数据添加到双向链表中的位置不同，可细分为以下 3 种情况：</p><p>1) 添加至表头</p><p>将新数据元素添加到表头，只需要将该元素与表头元素建立双层逻辑关系即可。</p><p>换句话说，假设新元素节点为 temp，表头节点为 head，则需要做以下 2 步操作即可：</p><ol><li>temp-&gt;next=head; head-&gt;prior=temp;</li><li>将 head 移至 temp，重新指向新的表头；</li></ol><p>例如，将新元素 7 添加至双链表的表头，则实现过程如图 2 所示：</p><p class='item-img' data-src='https://pic2.zhimg.com/v2-b9156e5d719713d2e4e61c308869a13b_b.jpg'><img src="https://pic2.zhimg.com/v2-b9156e5d719713d2e4e61c308869a13b_b.jpg" alt="动图封面"></p><p>图 添加元素至双向链表的表头</p><p>2) 添加至表的中间位置</p><p>同单链表添加数据类似，双向链表中间位置添加数据需要经过以下 2 个步骤，如下图所示：</p><ol><li>新节点先与其直接后继节点建立双层逻辑关系；</li><li>新节点的直接前驱节点与之建立双层逻辑关系；</li></ol><p class='item-img' data-src='https://pic2.zhimg.com/v2-f5407b137acf9de84e56c5e30cfc16e7_b.jpg'><img src="https://pic2.zhimg.com/v2-f5407b137acf9de84e56c5e30cfc16e7_b.jpg" alt="动图封面"></p><p>图 双向链表中间位置添加数据元素</p><p>3) 添加至表尾</p><p>与添加到表头是一个道理，实现过程如下（如图 4 所示）：</p><ol><li>找到双链表中最后一个节点；</li><li>让新节点与最后一个节点进行双层逻辑关系；</li></ol><p class='item-img' data-src='https://pic1.zhimg.com/v2-829fe83055126221b40116352bf5cdc6_b.jpg'><img src="https://pic1.zhimg.com/v2-829fe83055126221b40116352bf5cdc6_b.jpg" alt="动图封面"></p><p>图 双向链表尾部添加数据元素</p><p>因此，我们可以试着编写双向链表添加数据的 C 语言代码，参考代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Line* <span class="hljs-title">insertLine</span><span class="hljs-params">(Line* head, <span class="hljs-type">int</span> data, <span class="hljs-type">int</span> add)</span> </span>&#123;<br>    <span class="hljs-comment">//新建数据域为data的结点</span><br>    Line* temp = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<br>    temp-&gt;data = data;<br>    temp-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    temp-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//插入到链表头，要特殊考虑</span><br>    <span class="hljs-keyword">if</span> (add == <span class="hljs-number">1</span>) &#123;<br>        temp-&gt;next = head;<br>        head-&gt;prior = temp;<br>        head = temp;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> i;<br>        Line* body = head;<br>        <span class="hljs-comment">//找到要插入位置的前一个结点</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; add - <span class="hljs-number">1</span>; i++) &#123;<br>            body = body-&gt;next;<br>            <span class="hljs-comment">//只要 body 不存在，表明插入位置输入错误</span><br>            <span class="hljs-keyword">if</span> (!body) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置有误！\n&quot;</span>);<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//判断条件为真，说明插入位置为链表尾，实现第 2 种情况</span><br>        <span class="hljs-keyword">if</span> (body &amp;&amp; (body-&gt;next == <span class="hljs-literal">NULL</span>)) &#123;<br>            body-&gt;next = temp;<br>            temp-&gt;prior = body;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//第 2 种情况的具体实现</span><br>            body-&gt;next-&gt;prior = temp;<br>            temp-&gt;next = body-&gt;next;<br>            body-&gt;next = temp;<br>            temp-&gt;prior = body;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双向链表删除节点"><a href="#双向链表删除节点" class="headerlink" title="双向链表删除节点"></a>双向链表删除节点</h3><p>和添加结点的思想类似，在双向链表中删除目标结点也分为 3 种情况。</p><p>1) 删除表头结点</p><p>删除表头结点的过程如下图所示：</p><p class='item-img' data-src='https://picx.zhimg.com/v2-66cf8b9a6cc816e4a69143a68b662e25_b.jpg'><img src="https://picx.zhimg.com/v2-66cf8b9a6cc816e4a69143a68b662e25_b.jpg" alt="动图封面"></p><p>删除表头结点的实现过程是：</p><ol><li>新建一个指针指向表头结点；</li><li>断开表头结点和其直接后续结点之间的关联，更改 head 头指针的指向，同时将其直接后续结点的 prior 指针指向 NULL；</li><li>释放表头结点占用的内存空间。</li><li>删除表中结点</li></ol><p>删除表中结点的过程如下图所示：</p><p class='item-img' data-src='https://pic2.zhimg.com/v2-08e8d26851903ee8889321bbd20279d9_b.jpg'><img src="https://pic2.zhimg.com/v2-08e8d26851903ee8889321bbd20279d9_b.jpg" alt="动图封面"></p><p>删除表中结点的实现过程是：</p><ol><li>找到目标结点，新建一个指针指向改结点；</li><li>将目标结点从链表上摘除；</li><li>释放该结点占用的内存空间。</li><li>删除表尾结点</li></ol><p>删除表尾结点的过程如下图所示：</p><p class='item-img' data-src='https://picx.zhimg.com/v2-8c26da9694cfa9d5cdbe2043e553795b_b.jpg'><img src="https://picx.zhimg.com/v2-8c26da9694cfa9d5cdbe2043e553795b_b.jpg" alt="动图封面"></p><p>删除表尾结点的实现过程是：</p><ol><li>找到表尾结点，新建一个指针指向该结点；</li><li>断点表尾结点和其直接前驱结点的关联，并将其直接前驱结点的 next 指针指向 NULL；</li><li>释放表尾结点占用的内存空间。</li></ol><p>双向链表删除节点的 C 语言实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//删除结点的函数，data为要删除结点的数据域的值</span><br><span class="hljs-function">Line* <span class="hljs-title">delLine</span><span class="hljs-params">(Line* head, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    Line* temp = head;<br>    <span class="hljs-keyword">while</span> (temp) &#123;<br>        <span class="hljs-keyword">if</span> (temp-&gt;data == data) &#123;<br>            <span class="hljs-comment">//删除表头结点</span><br>            <span class="hljs-keyword">if</span> (temp-&gt;prior == <span class="hljs-literal">NULL</span>) &#123;<br>                head = head-&gt;next;<br>                <span class="hljs-keyword">if</span> (head) &#123;<br>                    head-&gt;prior = <span class="hljs-literal">NULL</span>;<br>                    temp-&gt;next = <span class="hljs-literal">NULL</span>;<br>                &#125;<br>                <span class="hljs-built_in">free</span>(temp);<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            <span class="hljs-comment">//删除表中结点</span><br>            <span class="hljs-keyword">if</span> (temp-&gt;prior &amp;&amp; temp-&gt;next) &#123;<br>                temp-&gt;next-&gt;prior = temp-&gt;prior;<br>                temp-&gt;prior-&gt;next = temp-&gt;next;<br>                <span class="hljs-built_in">free</span>(temp);<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            <span class="hljs-comment">//删除表尾结点</span><br>            <span class="hljs-keyword">if</span> (temp-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>                temp-&gt;prior-&gt;next = <span class="hljs-literal">NULL</span>;<br>                temp-&gt;prior = <span class="hljs-literal">NULL</span>;<br>                <span class="hljs-built_in">free</span>(temp);<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;表中没有目标元素，删除失败\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双向链表查找节点"><a href="#双向链表查找节点" class="headerlink" title="双向链表查找节点"></a>双向链表查找节点</h3><p>通常情况下，双向链表和单链表一样都仅有一个头指针。因此，双链表查找指定元素的实现同单链表类似，也是从表头依次遍历表中元素。</p><p>C 语言实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//head为原双链表，elem表示被查找元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">selectElem</span><span class="hljs-params">(line * head,<span class="hljs-type">int</span> elem)</span></span>&#123;<br><span class="hljs-comment">//新建一个指针t，初始化为头指针 head</span><br>    line * t=head;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (t) &#123;<br>        <span class="hljs-keyword">if</span> (t-&gt;data==elem) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        i++;<br>        t=t-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//程序执行至此处，表示查找失败</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双向链表更改节点"><a href="#双向链表更改节点" class="headerlink" title="双向链表更改节点"></a>双向链表更改节点</h3><p>更改双链表中指定结点数据域的操作是在查找的基础上完成的。实现过程是：通过遍历找到存储有该数据元素的结点，直接更改其数据域即可。</p><p>实现此操作的 C 语言实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//更新函数，其中，add 表示要修改的元素，newElem 为新数据的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">amendElem</span><span class="hljs-params">(Line* p, <span class="hljs-type">int</span> oldElem, <span class="hljs-type">int</span> newElem)</span> </span>&#123;<br>    Line* temp = p;<br>    <span class="hljs-type">int</span> find = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//找到要修改的目标结点</span><br>    <span class="hljs-keyword">while</span> (temp)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (temp-&gt;data == oldElem) &#123;<br>            find = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//成功找到，则进行更改操作</span><br>    <span class="hljs-keyword">if</span> (find == <span class="hljs-number">1</span>) &#123;<br>        temp-&gt;data = newElem;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//查找失败，输出提示信息</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表中未找到目标元素，更改失败\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>无论静态链表还是动态链表，有时在解决具体问题时，需要我们对其结构进行稍微地调整。比如，可以把链表的两头连接，使其成为了一个环状链表，通常称为循环链表。</p><p>和它名字的表意一样，只需要将表中最后一个结点的指针指向头结点，链表就能成环儿，如下图所示。</p><p class='item-img' data-src='https://picx.zhimg.com/v2-584465255c37aeaae235df42d7f2ab39_1440w.jpg'><img src="https://picx.zhimg.com/v2-584465255c37aeaae235df42d7f2ab39_1440w.jpg" alt="img"></p><p>需要注意的是，虽然循环链表成环状，但本质上还是链表，因此在循环链表中，依然能够找到头指针和首元节点等。循环链表和普通链表相比，唯一的不同就是循环链表首尾相连，其他都完全一样。</p><p>这里给大家一个循环链表的实例，用循环链表实现约瑟夫环</p><p><a href="https://link.zhihu.com/?target=https%3A//xiexuewu.github.io/view/7.html">循环链表实现约瑟夫环 - 玩转C语言和数据结构xiexuewu.github.io/view/7.html</a></p><h2 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h2><p>我们知道，单链表通过首尾连接可以构成单向循环链表，如下图所示：</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-2996fac84cba2bbc4ce278d68ec1f40c_b.jpg'><img src="https://pic3.zhimg.com/v2-2996fac84cba2bbc4ce278d68ec1f40c_b.jpg" alt="动图封面"></p><p>同样，双向链表也可以进行首尾连接，构成双向循环链表。如下图所示：</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-6661ba94cff67952b5108a7af5ca4564_b.jpg'><img src="https://pic3.zhimg.com/v2-6661ba94cff67952b5108a7af5ca4564_b.jpg" alt="动图封面"></p><p>解决某些问题，可能既需要正向遍历数据，又需要逆向遍历数据，这时就可以考虑使用双向循环链表。</p><h3 id="双向循环链表的创建"><a href="#双向循环链表的创建" class="headerlink" title="双向循环链表的创建"></a>双向循环链表的创建</h3><p>创建双向循环链表，只需在创建完成双向链表的基础上，将其首尾节点进行双向连接即可。</p><p>C 语言实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//创建双向循环链表</span><br><span class="hljs-function">Line* <span class="hljs-title">initLine</span><span class="hljs-params">(Line* head)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    Line* list = <span class="hljs-literal">NULL</span>;<br>    head = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<span class="hljs-comment">//创建链表第一个结点（首元结点）</span><br>    head-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    head-&gt;data = <span class="hljs-number">1</span>;<br>    list = head;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-comment">//创建并初始化一个新结点</span><br>        Line* body = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<br>        body-&gt;prior = <span class="hljs-literal">NULL</span>;<br>        body-&gt;next = <span class="hljs-literal">NULL</span>;<br>        body-&gt;data = i;<br>        <span class="hljs-comment">//直接前趋结点的next指针指向新结点</span><br>        list-&gt;next = body;<br>        <span class="hljs-comment">//新结点指向直接前趋结点</span><br>        body-&gt;prior = list;<br>        list = list-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//通过以上代码，已经创建好双线链表，接下来将链表的首尾节点进行双向连接</span><br>    list-&gt;next=head;<br>    head-&gt;prior=list;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过向 main 函数中调用 initLine 函数，就可以成功创建一个存储有 {1,2,3} 数据的双向循环链表，其完整的 C 语言实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span>* prior; <span class="hljs-comment">//指向直接前趋</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span>* next; <span class="hljs-comment">//指向直接后继</span><br>&#125;Line;<br><span class="hljs-comment">//创建双向循环链表</span><br><span class="hljs-function">Line* <span class="hljs-title">initLine</span><span class="hljs-params">(Line* head)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    Line* list = <span class="hljs-literal">NULL</span>;<br>    head = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<span class="hljs-comment">//创建链表第一个结点（首元结点）</span><br>    head-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    head-&gt;data = <span class="hljs-number">1</span>;<br>    list = head;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-comment">//创建并初始化一个新结点</span><br>        Line* body = (Line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Line));<br>        body-&gt;prior = <span class="hljs-literal">NULL</span>;<br>        body-&gt;next = <span class="hljs-literal">NULL</span>;<br>        body-&gt;data = i;<br>        <span class="hljs-comment">//直接前趋结点的next指针指向新结点</span><br>        list-&gt;next = body;<br>        <span class="hljs-comment">//新结点指向直接前趋结点</span><br>        body-&gt;prior = list;<br>        list = list-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//通过以上代码，已经创建好双线链表，接下来将链表的首尾节点进行双向连接</span><br>    list-&gt;next = head;<br>    head-&gt;prior = list;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-comment">//输出链表中的数据</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">(Line* head)</span> </span>&#123;<br>    Line* temp = head;<br>    <span class="hljs-comment">//由于是循环链表，所以当遍历指针temp指向的下一个节点是head时，证明此时已经循环至链表的最后一个节点</span><br>    <span class="hljs-keyword">while</span> (temp-&gt;next != head) &#123;<br>        <span class="hljs-keyword">if</span> (temp-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, temp-&gt;data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-&gt;&quot;</span>, temp-&gt;data);<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//输出循环链表中最后一个节点的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, temp-&gt;data);<br>&#125;<br><span class="hljs-comment">//释放链表中结点占用的空间</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free_line</span><span class="hljs-params">(Line* head)</span> </span>&#123;<br>    Line* temp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//切断循环</span><br>    head-&gt;prior-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//从第一个结点开始，依次 free</span><br>    temp = head;<br>    <span class="hljs-keyword">while</span> (temp) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>        temp = head;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建一个头指针</span><br>    Line* head = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//调用链表创建函数</span><br>    head = <span class="hljs-built_in">initLine</span>(head);<br>    <span class="hljs-comment">//输出创建好的链表</span><br>    <span class="hljs-built_in">display</span>(head);<br>    <span class="hljs-comment">//手动释放链表占用的内存</span><br>    <span class="hljs-built_in">free_line</span>(head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出结果如下：</p><blockquote><p>1-&gt;2-&gt;3</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链表（链式存储结构）&quot;&gt;&lt;a href=&quot;#链表（链式存储结构）&quot; class=&quot;headerlink&quot; title=&quot;链表（链式存储结构）&quot;&gt;&lt;/a&gt;链表（链式存储结构）&lt;/h2&gt;&lt;p&gt;链表又称单链表、链式存储结构，用于存储逻辑关系为“一对一”的数据。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-线性表（顺序表）</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/23014.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/23014.html</id>
    <published>2025-04-05T14:09:59.000Z</published>
    <updated>2025-04-17T16:53:48.651Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>说起这个问题，我们一定不陌生。打开QQ或微信，我们可以看到好友列表，打开PTA，我们能看到题目列表，打开音乐软件，我们可以看见歌曲列表，线性表在我们的生活中无处不在。线性表是怎么呈现的呢？线性表把我们在生活中需要的信息，按照顺序进行排列，使得这些信息直观、有条理，如果是按照某种顺序排列的列表，我们可以做到信息的快速检索。</p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-7c32c9f0fe93841585644ed3fe78d057_1440w.webp'><img src="https://pic4.zhimg.com/80/v2-7c32c9f0fe93841585644ed3fe78d057_1440w.webp" alt="img" style="zoom:50%;" /></p><h2 id="1-线性表（线性存储结构）"><a href="#1-线性表（线性存储结构）" class="headerlink" title="1) 线性表（线性存储结构）"></a>1) 线性表（线性存储结构）</h2><p>线性表又称线性存储结构，是最简单的一种存储结构，专门用来存储逻辑关系为“一对一”的数据。</p><p>在一个数据集中，如果每个数据的左侧都有且仅有一个数据和它有关系，数据的右侧也有且仅有一个数据和它有关系，那么这些数据之间就是“一对一“的逻辑关系。</p><p>所谓线性表，是<strong>零个或多个数据元素的有限序列</strong>，线性表的元素具有相同的特征，数据元素之间的关系是一对一的关系。</p><p class='item-img' data-src='https://pica.zhimg.com/v2-1d4fbbfe837a10f526f03db2b9bcb51e_b.jpg'><img src="https://pica.zhimg.com/v2-1d4fbbfe837a10f526f03db2b9bcb51e_b.jpg" alt="动图封面"></p><p>如上图所示，在 {1,2,3,4,5} 数据集中，每个数据的左侧都有且仅有一个数据和它紧挨着（除 1 外），右侧也有且仅有一个数据和它紧挨着（除 5 外），这些数据之间就是“一对一“的关系。</p><p>使用线性表存储具有“一对一“逻辑关系的数据，不仅可以将所有数据存储到内存中，还可以将“一对一”的逻辑关系也存储到内存中。</p><p>线性表存储数据的方案可以这样来理解，先用一根线将所有数据按照先后次序“串”起来，如下图所示：</p><p class='item-img' data-src='https://pic1.zhimg.com/v2-fa84cb14e76e339984f024a79e3faf50_b.jpg'><img src="https://pic1.zhimg.com/v2-fa84cb14e76e339984f024a79e3faf50_b.jpg" alt="动图封面"></p><p>数据和“一对一”的逻辑关系</p><p>左侧是“串”起来的数据，右侧是空闲的物理空间。将这“一串儿”数据存放到物理空间中，有以下两种方法：</p><p class='item-img' data-src='https://pic1.zhimg.com/v2-c83d6f36a89109312c6532bc67426d06_b.webp'><img src="https://pic1.zhimg.com/v2-c83d6f36a89109312c6532bc67426d06_b.webp" alt="动图"></p><p>两种存储方式都可以将数据之间的关系存储起来，从线的一头开始捋，可以依次找到每个数据，且数据的前后位置没有发生改变。</p><p>像上图这样，用一根线将具有“一对一”逻辑关系的数据存储起来，这样的存储方式就称为线性表或者线性存储结构。</p><h3 id="顺序存储结构和链式存储结构"><a href="#顺序存储结构和链式存储结构" class="headerlink" title="顺序存储结构和链式存储结构"></a>顺序存储结构和链式存储结构</h3><p>从图 3 不难看出，线性表存储数据的实现方案有两种，分别是：</p><ol><li>像图 3a) 那样，不破坏数据的前后次序，将它们连续存储在内存空间中，这样的存储方案称为顺序存储结构（简称<a href="https://link.zhihu.com/?target=https%3A//xiexuewu.github.io/view/158.html">顺序表</a>）；</li><li>像图 3b) 那样，将所有数据分散存储在内存中，数据之间的逻辑关系全靠“一根线”维系，这样的存储方案称为链式存储结构（简称<a href="https://link.zhihu.com/?target=https%3A//xiexuewu.github.io/view/160.html">链表</a>）。</li></ol><p>也就是说，使用线性表存储数据，有两种真正可以落地的存储方案，分别是顺序表和链表。</p><h3 id="前驱和后继"><a href="#前驱和后继" class="headerlink" title="前驱和后继"></a>前驱和后继</h3><p>在具有“一对一“逻辑关系的数据集中，每个个体习惯称为数据元素（简称元素）。例如，图 1 显示的这组数据集中，一共有 5 个元素，分别是 1、2、3、4 和 5。</p><p>此外，很多教程中喜欢用前驱和后继来描述元素之间的前后次序：</p><ul><li>某一元素的左侧相邻元素称为该元素的“直接前驱”，此元素左侧的所有元素统称为该元素的“前驱元素”；</li><li>某一元素的右侧相邻元素称为该元素的“直接后继”，此元素右侧的所有元素统称为该元素的“后继元素”；</li></ul><p>以图 1 数据中的元素 3 来说，它的直接前驱是 2 ，此元素的前驱元素有 2 个，分别是 1 和 2；同理，此元素的直接后继是 4 ，后继元素也有 2 个，分别是 4 和 5。</p><p class='item-img' data-src='https://pic2.zhimg.com/v2-06d19e0cf407ab715278064926dbdfa9_b.jpg'><img src="https://pic2.zhimg.com/v2-06d19e0cf407ab715278064926dbdfa9_b.jpg" alt="动图封面"></p><h2 id="2-顺序表（顺序存储结构）"><a href="#2-顺序表（顺序存储结构）" class="headerlink" title="2) 顺序表（顺序存储结构）"></a>2) 顺序表（顺序存储结构）</h2><p>顺序表又称顺序存储结构，是线性表的一种，专门存储逻辑关系为“一对一”的数据。</p><p>顺序表存储数据的具体实现方案是：将数据全部存储到一整块内存空间中，数据元素之间按照次序挨个存放。</p><p>举个简单的例子，将 {1,2,3,4,5} 这些数据使用顺序表存储，数据最终的存储状态如下图所示：</p><p class='item-img' data-src='https://pic2.zhimg.com/v2-0b61ec650d70af3469531945a0a0bc11_b.jpg'><img src="https://pic2.zhimg.com/v2-0b61ec650d70af3469531945a0a0bc11_b.jpg" alt="动图封面"></p><h3 id="线性表的抽象数据结构"><a href="#线性表的抽象数据结构" class="headerlink" title="线性表的抽象数据结构"></a>线性表的抽象数据结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">ADT List<br>&#123;<br>    Data:<br>        D = &#123;ai | <span class="hljs-number">1</span> ≤ i ≤ n, n ≥ <span class="hljs-number">0</span>, ai 为 ElemType 类型&#125;<br>    Relation：<br>        R = &#123; &lt;ai,ai<span class="hljs-number">+1</span>&gt; | ai,ai<span class="hljs-number">+1</span> ∈ D, i = <span class="hljs-number">1</span>, i ∈ (<span class="hljs-number">0</span>,n)&#125;<br>    Operation:<br>        <span class="hljs-built_in">InitList</span>(&amp;L);    <span class="hljs-comment">//初始化，建立一个空的线性表L</span><br>        <span class="hljs-built_in">MakeList</span>(&amp;L);    <span class="hljs-comment">//建立线性表，向表中存入数据</span><br>        <span class="hljs-built_in">ListEmpty</span>(*L);    <span class="hljs-comment">//空表判断，是则返回true,否则返回false</span><br>        <span class="hljs-built_in">DestroyList</span>(&amp;L);    <span class="hljs-comment">//清除操作，清空线性表的元素</span><br>        <span class="hljs-built_in">GetElem</span>(L,i,&amp;e);    <span class="hljs-comment">//获取线性表的元素，将线性表L的第i个元素的值返回给e</span><br>        <span class="hljs-built_in">LocateElem</span>(L,e);    <span class="hljs-comment">//按值查找元素，在线性表L中查找与e元素相等的元素，查找成功返回对应的序号，查找失败则返回0</span><br>        <span class="hljs-built_in">ListInsert</span>(&amp;L,i,e);    <span class="hljs-comment">//插入操作，在线性表L的第i个位置插入元素e</span><br>        <span class="hljs-built_in">ListDelete</span>(&amp;L,i,&amp;e);    <span class="hljs-comment">//删除操作，删除线性表L中的第i个位置的元素，并将其用e返回</span><br>        <span class="hljs-built_in">ListLength</span>(L);    <span class="hljs-comment">//计算表长，返回线性表L的元素个数</span><br>        <span class="hljs-built_in">DispList</span>(L);    <span class="hljs-comment">//输出线性表，当线性表不为空表时，按顺序输出表中的每一个元素</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序表的建立"><a href="#顺序表的建立" class="headerlink" title="顺序表的建立"></a>顺序表的建立</h3><p>使用顺序表存储数据，除了存储数据本身的值以外，通常还会记录以下两样数据：</p><ul><li>顺序表的最大存储容量：顺序表最多可以存储的数据个数；</li><li>顺序表的长度：当前顺序表中存储的数据个数。</li></ul><p>C 语言中，可以定义一个结构体来表示顺序表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    <span class="hljs-type">int</span> * head; <span class="hljs-comment">//定义一个名为head的长度不确定的数组，也叫“动态数组”</span><br>    <span class="hljs-type">int</span> length; <span class="hljs-comment">//记录当前顺序表的长度</span><br>    <span class="hljs-type">int</span> size; <span class="hljs-comment">//记录顺序表的存储容量</span><br>&#125;Table;<br></code></pre></td></tr></table></figure><p>尝试建立一个顺序表，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> Size 5 <span class="hljs-comment">//对Size进行宏定义，表示顺序表的最大容量</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initTable</span><span class="hljs-params">(Table * t)</span> </span>&#123;<br>    <span class="hljs-comment">//构造一个空的顺序表，动态申请存储空间</span><br>    t-&gt;head = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(Size * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">//申请内存空间</span><br>    <span class="hljs-comment">//如果申请失败，作出提示并直接退出程序</span><br>    <span class="hljs-keyword">if</span> (!t-&gt;head)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">//空表的长度初始化为0</span><br>    t-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//空表的初始存储空间为Size</span><br>    t-&gt;size = Size;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上所示，整个建立顺序表的过程都封装在一个函数中，建好的顺序表可以存储 5 个逻辑关系为“一对一”的整数。</p><p>在顺序表的实现中，<code>t-&gt;head</code> 是一个<strong>指向动态数组基地址的指针</strong>，其核心作用是为顺序表提供存储数据的连续内存空间。以下是具体解析：</p><hr><h3 id="1-t-gt-head-的定义与作用"><a href="#1-t-gt-head-的定义与作用" class="headerlink" title="1. t-&gt;head 的定义与作用"></a><strong>1. <code>t-&gt;head</code> 的定义与作用</strong></h3><p>• <strong>定义</strong>：<br>  <code>t-&gt;head</code> 是顺序表结构体中的一个成员变量，通常声明为动态数组的起始地址指针。例如在 C 语言中，顺序表的结构体定义如下：<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> *head;  <span class="hljs-comment">// 动态数组基地址</span><br>    <span class="hljs-type">int</span> length; <span class="hljs-comment">// 当前元素个数</span><br>    <span class="hljs-type">int</span> size;   <span class="hljs-comment">// 总存储容量</span><br>&#125; Table;<br></code></pre></td></tr></table></figure></p><h3 id="顺序表的使用"><a href="#顺序表的使用" class="headerlink" title="顺序表的使用"></a>顺序表的使用</h3><p>通过调用 initTable() 函数，就可以成功地创建一个顺序表，还可以往顺序表中存储一些元素。</p><p>例如，将 {1,2,3,4,5} 存储到顺序表中，实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Size 5 <span class="hljs-comment">//对Size进行宏定义，表示顺序表的最大容量</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    <span class="hljs-type">int</span>* head;<br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> size;<br>&#125;Table;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initTable</span><span class="hljs-params">(Table * t)</span> </span>&#123;<br>    <span class="hljs-comment">//构造一个空的顺序表，动态申请存储空间</span><br>    t-&gt;head = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(Size * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-comment">//如果申请失败，作出提示并直接退出程序</span><br>    <span class="hljs-keyword">if</span> (!t-&gt;head) <span class="hljs-comment">//无头（申请失败）</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">//空表的长度初始化为0</span><br>    t-&gt;length = <span class="hljs-number">0</span>; <span class="hljs-comment">//t-&gt;length：当前元素个数</span><br>    <span class="hljs-comment">//空表的初始存储空间为Size</span><br>    t-&gt;size = Size; <span class="hljs-comment">//t-&gt;size：总存储容量</span><br>&#125;<br><span class="hljs-comment">//输出顺序表中元素的函数</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">displayTable</span><span class="hljs-params">(Table t)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; t.length; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, t.head[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    Table t = &#123; <span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">initTable</span>(&amp;t);<br>    <span class="hljs-comment">//向顺序表中添加&#123;1,2,3,4,5&#125;</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= Size; i++) &#123;<br>        t.head[i - <span class="hljs-number">1</span>] = i;<br>        t.length++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表中存储的元素分别是：\n&quot;</span>);<br>    <span class="hljs-built_in">displayTable</span>(t);<br>    <span class="hljs-built_in">free</span>(t.head);<span class="hljs-comment">//释放申请的堆内存</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果如下：</p><blockquote><p>顺序表中存储的元素分别是： 1 2 3 4 5</p></blockquote><h2 id="3-顺序表的基本操作"><a href="#3-顺序表的基本操作" class="headerlink" title="3) 顺序表的基本操作"></a>3) 顺序表的基本操作</h2><p>我们学习了顺序表及初始化的过程，本节学习有关顺序表的一些基本操作，以及如何使用 C 语言实现它们。</p><h3 id="顺序表插入元素"><a href="#顺序表插入元素" class="headerlink" title="顺序表插入元素"></a>顺序表插入元素</h3><p>向已有顺序表中插入数据元素，根据插入位置的不同，可分为以下 3 种情况：</p><ol><li>插入到顺序表的表头；</li><li>在表的中间位置插入元素；</li><li>尾随顺序表中已有元素，作为顺序表中的最后一个元素；</li></ol><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：</p><ul><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li><li>将元素放到腾出来的位置上；</li></ul><p>例如，在 {1,2,3,4,5} 的第 3 个位置上插入元素 6，实现过程如下：</p><ul><li>遍历至顺序表存储第 3 个数据元素的位置</li></ul><p class='item-img' data-src='https://pic3.zhimg.com/v2-9ce044ee30b5c641efb5cfe4753b1ff2_b.jpg'><img src="https://pic3.zhimg.com/v2-9ce044ee30b5c641efb5cfe4753b1ff2_b.jpg" alt="动图封面"></p><ul><li>将元素 3、4 和 5 整体向后移动一个位置</li></ul><p class='item-img' data-src='https://pic1.zhimg.com/v2-926c02eec07c5de69d2a9c29149f76bc_b.jpg'><img src="https://pic1.zhimg.com/v2-926c02eec07c5de69d2a9c29149f76bc_b.jpg" alt="动图封面"></p><ul><li>将新元素 6 放入腾出的位置</li></ul><p class='item-img' data-src='https://pic3.zhimg.com/v2-d5868803c7ed313babcec6d6c5a29cf0_b.jpg'><img src="https://pic3.zhimg.com/v2-d5868803c7ed313babcec6d6c5a29cf0_b.jpg" alt="动图封面"></p><p>因此，顺序表插入数据元素的 C 语言实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertTable</span><span class="hljs-params">(Table* t, <span class="hljs-type">int</span> elem, <span class="hljs-type">int</span> add)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <br>    <br>    <span class="hljs-comment">//如果插入元素位置(add)比整张表的长度+1(t-&gt;length + 1)还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出</span><br>    <span class="hljs-keyword">if</span> (add &gt; t-&gt;length + <span class="hljs-number">1</span> || add &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置有问题\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">//做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，有就是(t-&gt;length &lt; t-&gt;size)，如果没有就是(t-&gt;length == t-&gt;size)，需要申请</span><br>    <span class="hljs-keyword">if</span> (t-&gt;length == t-&gt;size) &#123;<br>        t-&gt;head = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(t-&gt;head, (t-&gt;size + <span class="hljs-number">1</span>) * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-comment">//重新分配内存，动态数组额外申请更多物理空间</span><br>        <span class="hljs-keyword">if</span> (!t-&gt;head) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;存储分配失败\n&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        t-&gt;size += <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">//插入操作，需要将自插入位置之后的所有元素(从t-&gt;length - 1倒数到add - 1)全部后移一位</span><br>    <span class="hljs-keyword">for</span> (i = t-&gt;length - <span class="hljs-number">1</span>; i &gt;= add - <span class="hljs-number">1</span>; i--) &#123;<br>        t-&gt;head[i + <span class="hljs-number">1</span>] = t-&gt;head[i];<br>    &#125;<br>    <br>    <span class="hljs-comment">//后移完成后，直接插入元素</span><br>    t-&gt;head[add - <span class="hljs-number">1</span>] = elem;<br>    t-&gt;length++;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，动态数组额外申请更多物理空间使用的是 realloc 函数。此外在实现元素整体后移的过程中，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</p><h3 id="顺序表删除元素"><a href="#顺序表删除元素" class="headerlink" title="顺序表删除元素"></a>顺序表删除元素</h3><p>从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p><p>后续元素整体前移一个位置，会直接将目标元素删除，可间接实现删除元素的目的。</p><p>例如，从 {1,2,3,4,5} 中删除元素 3 的过程如图 4 所示：</p><p class='item-img' data-src='https://pic3.zhimg.com/v2-dfb4a1ff7c8dc898a0b7fef73f637262_b.jpg'><img src="https://pic3.zhimg.com/v2-dfb4a1ff7c8dc898a0b7fef73f637262_b.jpg" alt="动图封面"></p><p>因此，顺序表删除元素的 C 语言实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">delTable</span><span class="hljs-params">(Table* t, <span class="hljs-type">int</span> add)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span> (add &gt; t-&gt;length || add &lt; <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">//删除元素位置大于表长或小于0</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;被删除元素的位置有误\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//删除操作</span><br>    <span class="hljs-keyword">for</span> (i = add; i &lt; t-&gt;length; i++) &#123;<br>        t-&gt;head[i - <span class="hljs-number">1</span>] = t-&gt;head[i];<br>    &#125;<br>    t-&gt;length--;<span class="hljs-comment">//表长减短</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序表查找元素"><a href="#顺序表查找元素" class="headerlink" title="顺序表查找元素"></a>顺序表查找元素</h3><p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说<a href="https://link.zhihu.com/?target=https%3A//xiexuewu.github.io/view/55.html">二分查找</a>算法、插值查找算法等。</p><p>这里，我们选择<a href="https://link.zhihu.com/?target=https%3A//xiexuewu.github.io/view/54.html">顺序查找</a>算法，具体实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//查找函数，其中，elem表示要查找的数据元素的值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">selectTable</span><span class="hljs-params">(table t,<span class="hljs-type">int</span> elem)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;t.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (t.head[i]==elem) &#123;<br>            <span class="hljs-keyword">return</span> i<span class="hljs-number">+1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//如果查找失败，返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序表更改元素"><a href="#顺序表更改元素" class="headerlink" title="顺序表更改元素"></a>顺序表更改元素</h3><p>顺序表更改元素的实现过程是：</p><ol><li>找到目标元素；</li><li>直接修改该元素的值；</li></ol><p>顺序表更改元素的 C 语言实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">amendTable</span><span class="hljs-params">(Table* t, <span class="hljs-type">int</span> elem, <span class="hljs-type">int</span> newElem)</span> </span>&#123;<br>    <span class="hljs-type">int</span> add = <span class="hljs-built_in">selectTable</span>(*t, elem);<br>    <span class="hljs-keyword">if</span> (add == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表中没有找到目标元素\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    t-&gt;head[add - <span class="hljs-number">1</span>] = newElem;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于-t-gt-head-t-gt-length和-t-gt-size"><a href="#关于-t-gt-head-t-gt-length和-t-gt-size" class="headerlink" title="关于 t-&gt;head,t-&gt;length和 t-&gt;size"></a>关于 <code>t-&gt;head</code>,<code>t-&gt;length</code>和 <code>t-&gt;size</code></h3><p>• <strong>物理存储管理</strong>：<br>  <code>t-&gt;head</code> 指向通过 <code>malloc</code> 或 <code>realloc</code> 动态申请的内存块的首地址。顺序表中的所有元素按逻辑顺序连续存储在这段内存中。</p><p>• <strong>操作接口</strong>：<br>  通过 <code>t-&gt;head</code> 可直接访问顺序表的元素，例如：<br>  • <strong>插入</strong>：<code>t-&gt;head[add-1] = elem</code> 将元素写入指定位置。<br>  • <strong>遍历</strong>：通过 <code>t-&gt;head[i]</code> 访问第 <code>i</code> 个元素。</p><p>顺序表初始化时，<code>t-&gt;head</code> 被赋予动态分配的内存地址。例如：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initTable</span><span class="hljs-params">(Table *t)</span> </span>&#123;<br>    t-&gt;head = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(Size * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));  <span class="hljs-comment">// 申请初始内存</span><br>    t-&gt;length = <span class="hljs-number">0</span>;<br>    t-&gt;size = Size;<br>&#125;<br></code></pre></td></tr></table></figure><p>若内存分配失败，<code>t-&gt;head</code> 会指向 <code>NULL</code>，此时需进行错误处理。</p><p>所有对顺序表元素的增删查改均通过 <code>t-&gt;head</code> 实现：<br>• <strong>插入元素</strong>：将后续元素右移后，直接通过 <code>t-&gt;head[add-1]</code> 写入新值。<br>• <strong>删除元素</strong>：左移覆盖目标元素后，通过 <code>t-&gt;head</code> 重新定位后续元素。</p><p><code>t-&gt;head</code> 是顺序表实现中<strong>动态内存管理的核心</strong>，它指向存储数据的连续内存块，并通过指针操作支持元素的增删查改。</p><p>在顺序表的实现中，<code>t-&gt;length</code>和<code>t-&gt;size</code>是两个关键字段，它们的含义及设计逻辑如下：</p><hr><p><strong>1. <code>t-&gt;length</code>：当前元素个数</strong></p><p>• <strong>定义</strong>：表示顺序表中<strong>实际存储的有效元素数量</strong>，即当前表内数据的逻辑长度。<br>• <strong>作用</strong>：<br>  • 控制插入/删除操作的合法性（例如插入位置不能超过<code>length+1</code>，删除位置不能超过<code>length</code>）。<br>  • 遍历时确定元素范围（从下标<code>0</code>到<code>length-1</code>）。<br>• <strong>示例</strong>：若顺序表存储<code>&#123;1,2,3&#125;</code>，则<code>length=3</code>。</p><hr><p><strong>2. <code>t-&gt;size</code>：总存储容量</strong></p><p>• <strong>定义</strong>：表示顺序表<strong>已申请的内存空间能容纳的最大元素数量</strong>，即物理存储容量。<br>• <strong>作用</strong>：<br>  • 判断是否需要扩容（当<code>length == size</code>时，表已满需扩展内存）。<br>  • 动态调整内存时记录当前分配的空间上限。<br>• <strong>示例</strong>：若初始分配容量为<code>size=5</code>，插入5个元素后<code>length=5</code>，此时需扩容才能继续插入。</p><hr><p><strong>3. 两者的区别与联系</strong></p><div class="table-container"><table><thead><tr><th><strong>字段</strong></th><th><strong>意义</strong></th><th><strong>操作触发条件</strong></th><th><strong>命名逻辑</strong></th></tr></thead><tbody><tr><td><code>length</code></td><td>实际元素个数（动态变化）</td><td>插入时位置需满足<code>1 ≤ add ≤ length+1</code></td><td>直观体现“逻辑长度”，类似数组的<code>size()</code></td></tr><tr><td><code>size</code></td><td>最大容量（静态/动态）</td><td>扩容条件为<code>length == size</code></td><td>体现“物理容量上限”，类似容器的<code>capacity()</code></td></tr></tbody></table></div><ol><li><p><strong>逻辑与物理分离</strong>：<br>• <code>length</code>关注数据逻辑层面的使用情况，<code>size</code>关注物理内存的管理，两者分离便于维护动态内存。</p></li><li><p><strong>操作安全性</strong>：<br>• 通过<code>length</code>限制插入/删除位置，避免越界访问；通过<code>size</code>判断内存是否耗尽，防止溢出。</p></li><li><p><strong>动态扩容机制</strong>：<br>• 当<code>length</code>达到<code>size</code>时，触发<code>realloc</code>扩展内存（例如每次扩容固定步长或按倍数增长），保证数据连续性。</p><p>插入函数中：</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (add &gt; t-&gt;length + <span class="hljs-number">1</span> || add &lt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置有问题\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (t-&gt;length == t-&gt;size) &#123;<br>    t-&gt;head = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(t-&gt;head, (t-&gt;size + <span class="hljs-number">1</span>) * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-comment">// 扩容逻辑...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>• <strong><code>add &gt; t-&gt;length + 1</code></strong>：确保插入位置不超过逻辑长度的下一个合法位置（如<code>length=3</code>时，允许插入到第4位，但不可到第5位）。<br>• <strong><code>t-&gt;length == t-&gt;size</code></strong>：触发扩容的条件，保证物理空间始终足够容纳逻辑元素。</p><p><code>t-&gt;length</code>和<code>t-&gt;size</code>是顺序表实现中<strong>动态内存管理</strong>与<strong>逻辑操作控制</strong>的核心字段。通过两者的协同，既能高效利用内存，又能确保数据操作的合法性。</p><h2 id="其他操作的实现"><a href="#其他操作的实现" class="headerlink" title="其他操作的实现"></a>其他操作的实现</h2><h3 id="逆序"><a href="#逆序" class="headerlink" title="逆序"></a>逆序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverseTable</span><span class="hljs-params">(Table* t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (t-&gt;length &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 空表或单元素表无需处理</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t-&gt;length / <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-type">int</span> temp = t-&gt;head[i];<br>        t-&gt;head[i] = t-&gt;head[t-&gt;length - <span class="hljs-number">1</span> - i];<br>        t-&gt;head[t-&gt;length - <span class="hljs-number">1</span> - i] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出表长"><a href="#输出表长" class="headerlink" title="输出表长"></a><strong>输出表长</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ListLength</span><span class="hljs-params">(Table* t)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> L-&gt;length; <span class="hljs-comment">// 直接返回顺序表的当前长度</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除全表"><a href="#删除全表" class="headerlink" title="删除全表"></a>删除全表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListDestory</span><span class="hljs-params">(Table* t)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(t);  <span class="hljs-comment">// 确保传入的指针非空</span><br>    <span class="hljs-built_in">free</span>(t-&gt;head);  <span class="hljs-comment">// 释放动态数组内存</span><br>    t-&gt;head = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 指针置空</span><br>    t-&gt;size = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 容量归零</span><br>    t-&gt;length = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 元素个数归零</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><p>以下是一个完整的顺序表操作示例代码，包含<strong>初始化、插入、删除、查找、修改、逆序、销毁</strong>等操作，并在<code>main</code>函数中展示了具体调用逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_SIZE 5  <span class="hljs-comment">// 初始容量</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span>* head;    <span class="hljs-comment">// 动态数组基地址</span><br>    <span class="hljs-type">int</span> length;   <span class="hljs-comment">// 当前元素个数</span><br>    <span class="hljs-type">int</span> size;     <span class="hljs-comment">// 总存储容量</span><br>&#125; Table;<br><br><span class="hljs-comment">// 初始化顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initTable</span><span class="hljs-params">(Table* t)</span> </span>&#123;<br>    t-&gt;head = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(INIT_SIZE * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span> (!t-&gt;head) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    t-&gt;length = <span class="hljs-number">0</span>;<br>    t-&gt;size = INIT_SIZE;<br>&#125;<br><br><span class="hljs-comment">// 插入元素（位置从1开始）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertTable</span><span class="hljs-params">(Table* t, <span class="hljs-type">int</span> elem, <span class="hljs-type">int</span> pos)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">1</span> || pos &gt; t-&gt;length + <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非法插入位置: %d\n&quot;</span>, pos);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 容量检查与扩容</span><br>    <span class="hljs-keyword">if</span> (t-&gt;length == t-&gt;size) &#123;<br>        <span class="hljs-type">int</span> new_size = t-&gt;size * <span class="hljs-number">2</span>;  <span class="hljs-comment">// 容量翻倍</span><br>        <span class="hljs-type">int</span>* new_head = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(t-&gt;head, new_size * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-keyword">if</span> (!new_head) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;扩容失败\n&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        t-&gt;head = new_head;<br>        t-&gt;size = new_size;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已扩容至 %d\n&quot;</span>, new_size);<br>    &#125;<br><br>    <span class="hljs-comment">// 元素后移</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = t-&gt;length; i &gt;= pos; i--) &#123;<br>        t-&gt;head[i] = t-&gt;head[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <br>    t-&gt;head[pos - <span class="hljs-number">1</span>] = elem;<br>    t-&gt;length++;<br>&#125;<br><br><span class="hljs-comment">// 删除元素（位置从1开始）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">delTable</span><span class="hljs-params">(Table* t, <span class="hljs-type">int</span> pos)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">1</span> || pos &gt; t-&gt;length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非法删除位置: %d\n&quot;</span>, pos);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 元素前移覆盖</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = pos; i &lt; t-&gt;length; i++) &#123;<br>        t-&gt;head[i - <span class="hljs-number">1</span>] = t-&gt;head[i];<br>    &#125;<br>    t-&gt;length--;<br>&#125;<br><br><span class="hljs-comment">// 查找元素（返回位置，从1开始）</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">selectTable</span><span class="hljs-params">(Table* t, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t-&gt;length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (t-&gt;head[i] == elem) &#123;<br>            <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<span class="hljs-comment">// 返回元素位置</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 未找到</span><br>&#125;<br><br><span class="hljs-comment">// 修改元素值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">amendTable</span><span class="hljs-params">(Table* t, <span class="hljs-type">int</span> old_elem, <span class="hljs-type">int</span> new_elem)</span> </span>&#123;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-built_in">selectTable</span>(t, old_elem); <span class="hljs-comment">// 查找元素</span><br>    <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;元素 %d 不存在\n&quot;</span>, old_elem);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    t-&gt;head[pos - <span class="hljs-number">1</span>] = new_elem;<br>&#125;<br><br><span class="hljs-comment">// 逆序顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverseTable</span><span class="hljs-params">(Table* t)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t-&gt;length / <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-type">int</span> temp = t-&gt;head[i];<br>        t-&gt;head[i] = t-&gt;head[t-&gt;length - <span class="hljs-number">1</span> - i];<br>        t-&gt;head[t-&gt;length - <span class="hljs-number">1</span> - i] = temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 销毁顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">destroyTable</span><span class="hljs-params">(Table* t)</span> </span>&#123;<br>    <span class="hljs-built_in">free</span>(t-&gt;head);<br>    t-&gt;head = <span class="hljs-literal">NULL</span>;<br>    t-&gt;length = <span class="hljs-number">0</span>;<br>    t-&gt;size = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 打印顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">displayTable</span><span class="hljs-params">(Table* t)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[当前表长: %d, 总容量: %d]\n&quot;</span>, t-&gt;length, t-&gt;size);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t-&gt;length; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, t-&gt;head[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Table my_table; <span class="hljs-comment">//声明一个名为 my_table 的变量，其类型为 Table 结构体</span><br>    <br>    <span class="hljs-comment">// 1. 初始化</span><br>    <span class="hljs-built_in">initTable</span>(&amp;my_table);<br>    <span class="hljs-comment">//&amp;my_table的作用是将结构体的地址传递给函数，使函数能通过指针直接修改原始变量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=== 初始化顺序表 ===\n&quot;</span>);<br>    <span class="hljs-built_in">displayTable</span>(&amp;my_table);<br><br>    <span class="hljs-comment">// 2. 插入初始元素</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-built_in">insertTable</span>(&amp;my_table, i, i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=== 插入5个元素 ===\n&quot;</span>);<br>    <span class="hljs-built_in">displayTable</span>(&amp;my_table);<br><br>    <span class="hljs-comment">// 3. 测试扩容插入</span><br>    <span class="hljs-built_in">insertTable</span>(&amp;my_table, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">// 在第3位插入6</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=== 插入第6个元素触发扩容 ===\n&quot;</span>);<br>    <span class="hljs-built_in">displayTable</span>(&amp;my_table);<br><br>    <span class="hljs-comment">// 4. 删除元素</span><br>    <span class="hljs-built_in">delTable</span>(&amp;my_table, <span class="hljs-number">2</span>);  <span class="hljs-comment">// 删除第2个元素</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=== 删除第2个元素 ===\n&quot;</span>);<br>    <span class="hljs-built_in">displayTable</span>(&amp;my_table);<br><br>    <span class="hljs-comment">// 5. 查找元素</span><br>    <span class="hljs-type">int</span> target = <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-built_in">selectTable</span>(&amp;my_table, target);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=== 查找元素 %d ===\n&quot;</span>, target);<br>    <span class="hljs-keyword">if</span> (pos != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;元素 %d 位于第 %d 位\n&quot;</span>, target, pos);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;元素不存在\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 6. 修改元素</span><br>    <span class="hljs-built_in">amendTable</span>(&amp;my_table, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=== 修改元素 6 → 66 ===\n&quot;</span>);<br>    <span class="hljs-built_in">displayTable</span>(&amp;my_table);<br><br>    <span class="hljs-comment">// 7. 逆序操作</span><br>    <span class="hljs-built_in">reverseTable</span>(&amp;my_table);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=== 逆序顺序表 ===\n&quot;</span>);<br>    <span class="hljs-built_in">displayTable</span>(&amp;my_table);<br><br>    <span class="hljs-comment">// 8. 销毁顺序表</span><br>    <span class="hljs-built_in">destroyTable</span>(&amp;my_table);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=== 销毁后的状态 ===\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指针状态: %s\n&quot;</span>, (my_table.head == <span class="hljs-literal">NULL</span>) ? <span class="hljs-string">&quot;已释放&quot;</span> : <span class="hljs-string">&quot;未释放&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关键调用逻辑说明："><a href="#关键调用逻辑说明：" class="headerlink" title="关键调用逻辑说明："></a>关键调用逻辑说明：</h3><ol><li><p><strong>初始化顺序表</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">initTable</span>(&amp;my_table);<br></code></pre></td></tr></table></figure><p>• 创建空表，初始容量为5<br>• 时间复杂度：O(1)</p></li><li><p><strong>批量插入元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">insertTable</span>(&amp;my_table, i, i);<br>&#125;<br></code></pre></td></tr></table></figure><p>• 插入5个元素填满初始容量<br>• 时间复杂度：O(n)</p></li><li><p><strong>触发扩容插入</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">insertTable</span>(&amp;my_table, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>• 当插入第6个元素时触发动态扩容（容量翻倍为10）<br>• 时间复杂度：O(n)</p></li><li><p><strong>删除元素</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">delTable</span>(&amp;my_table, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>• 删除第2个元素（值为2），后续元素前移<br>• 时间复杂度：O(n)</p></li><li><p><strong>元素查找</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">selectTable</span>(&amp;my_table, target);<br></code></pre></td></tr></table></figure><p>• 使用顺序查找，返回元素位置<br>• 时间复杂度：O(n)</p></li><li><p><strong>逆序操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">reverseTable</span>(&amp;my_table);<br></code></pre></td></tr></table></figure><p>• 通过对称交换实现逆序<br>• 时间复杂度：O(n)</p></li><li><p><strong>销毁顺序表</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">destroyTable</span>(&amp;my_table);<br></code></pre></td></tr></table></figure><p>• 释放动态内存并将指针置空<br>• 防止内存泄漏的关键操作</p></li></ol><h3 id="执行结果示例："><a href="#执行结果示例：" class="headerlink" title="执行结果示例："></a>执行结果示例：</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">=== 初始化顺序表 ===</span><br><span class="hljs-meta">[当前表长: 0, 总容量: 5]</span><br><br><br><span class="hljs-section">=== 插入5个元素 ===</span><br><span class="hljs-meta">[当前表长: 5, 总容量: 5]</span><br>1 2 3 4 5 <br><br>已扩容至 10<br><span class="hljs-section">=== 插入第6个元素触发扩容 ===</span><br><span class="hljs-meta">[当前表长: 6, 总容量: 10]</span><br>1 2 6 3 4 5 <br><br><span class="hljs-section">=== 删除第2个元素 ===</span><br><span class="hljs-meta">[当前表长: 5, 总容量: 10]</span><br>1 6 3 4 5 <br><br><span class="hljs-section">=== 查找元素 6 ===</span><br>元素 6 位于第 2 位<br><span class="hljs-section">=== 修改元素 6 → 66 ===</span><br><span class="hljs-meta">[当前表长: 5, 总容量: 10]</span><br>1 66 3 4 5 <br><br><span class="hljs-section">=== 逆序顺序表 ===</span><br><span class="hljs-meta">[当前表长: 5, 总容量: 10]</span><br>5 4 3 66 1 <br><br><span class="hljs-section">=== 销毁后的状态 ===</span><br>指针状态: 已释放<br></code></pre></td></tr></table></figure><h3 id="复杂度对比："><a href="#复杂度对比：" class="headerlink" title="复杂度对比："></a>复杂度对比：</h3><div class="table-container"><table><thead><tr><th>操作</th><th>最好情况</th><th>最坏情况</th><th>平均情况</th></tr></thead><tbody><tr><td>插入</td><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>删除</td><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>查找</td><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>逆序</td><td>-</td><td>O(n)</td><td>O(n)</td></tr><tr><td>初始化</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr></tbody></table></div><p>​    首先是插入操作，插入操作时间复杂度最小的情况是，当元素要插入到最后一个位置时，你就不需要移动任何元素即可实现，只需要将需要插入的元素插在表的末端即可，时间复杂度O(1)，最费时的操作就是插入的元素要放在表头，那我们就需要把表中的所有元素都移动了,时间复杂度为O(n)。</p><p>​    删除操作也如此，当我们要删除最后一个元素，也不需要移动顺序表，而删除第一个元素时需要移动整个表。我们知道，在实际的操作中，删除表中的任何一个位置需要被插入删除的可能性是相同的，因此从平均角度来分析，移动表的平均次数为 (n - 1) / 2，时间复杂度为O(n)。<br>​    因此我们可以看出，顺序表在插入、删除操作时是比较费时间的，然而其他的基本操作例如初始化、建表或者销毁，时间复杂度都是O(1)，因此我们在使用顺序表的时候，要尽量让表保持不变，而是多多使用顺序表的存储和随机提取等优点。</p><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><p>顺序表主要有如下一些优点：</p><ol><li>顺序表进行随机提取元素的效率较高，能够快速存储、提取元素；</li><li>建表时无需对表中元素的逻辑关系进行描述，各元素在存储地址上是连续的；</li><li>对于CPU，顺序表的高速缓存效率更高，且CPU流水线也不会总是被打断。</li></ol><p>顺序表主要有如下一些缺点：</p><ol><li>申请顺序表时，顺序表存储元素的上限是固定的，这就导致了存在溢出的可能性；</li><li>插入、删除元素时，时间复杂度较大，需要大范围移动表中的元素；</li><li>由于我们在很多情况下无法预知需要存储多少元素，因此容易导致内存碎片的现象，即申请了空间却没有充分利用。</li></ol><p><strong>关于链表再新开一个页面</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;说起这个问题，我们一定不陌生。打开QQ或微信，我们可以看到好友列表，打开PTA，我们能看到题目列表，打开音乐软件，我们可以</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-算法复杂度</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/25842.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/25842.html</id>
    <published>2025-04-05T08:09:55.000Z</published>
    <updated>2025-04-06T06:09:57.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h1><p>算法复杂度旨在计算在输入数据量 N的情况下，算法的「时间使用」和「空间使用」情况；体现算法运行使用的时间和空间随「数据大小 N」而增大的速度。</p><p>算法复杂度主要可从 <strong>时间</strong> 、<strong>空间</strong> 两个角度评价：</p><ul><li><strong>时间：</strong> 假设各操作的运行时间为固定常数，统计算法运行的「计算操作的数量」 ，以代表算法运行所需时间；</li><li><strong>空间：</strong> 统计在最差情况下，算法运行所需使用的「最大空间」；</li></ul><p>「输入数据大小N」指算法处理的输入数据量；根据不同算法，具有不同定义，例如：</p><ul><li><strong>排序算法：</strong> N代表需要排序的元素数量；</li><li><strong>搜索算法：</strong> N代表搜索范围的元素总数，例如数组大小、矩阵大小、二叉树节点数、图节点和边数等；</li></ul><p>接下来，我们将分别从概念定义、符号表示、常见种类、时空权衡、示例解析、示例题目等角度入手，学习「时间复杂度」和「空间复杂度」。</p><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p><strong>代码执行次数的简化估算值就是时间复杂度。</strong></p><p>一些例子</p><ol><li><p>线性复杂度<em>O</em>(<em>N</em>)：单层循环，如遍历数组求和。</p></li><li><p>对数复杂度<em>O</em>(log<em>N</em>)：二分查找。</p></li><li><p>线性对数复杂度<em>O</em>(<em>N</em>log<em>N</em>)：快速排序或归并排序的分治策略。</p></li><li><p>平方复杂度<em>O</em>(<em>N</em>^2)：双重循环，如冒泡排序。</p></li><li><p>指数复杂度<em>O</em>(2^<em>N</em>)：递归斐波那契。</p></li><li><p>阶乘复杂度<em>O</em>(<em>N</em>!)：全排列生成。</p></li></ol><p>   其中有：<em>O</em>(1)&lt;<em>O</em>(log<em>N</em>)&lt;<em>O</em>(<em>N</em>)&lt;<em>O</em>(<em>N</em>log<em>N</em>)&lt;<em>O</em>(<em>N</em>^2)&lt;<em>O</em>(2^<em>N</em>)&lt;<em>O</em>(<em>N</em>!)</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f219793a6bc.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f219793a6bc.png" alt=""></p><h3 id="基本复杂度计算"><a href="#基本复杂度计算" class="headerlink" title="基本复杂度计算"></a><strong>基本复杂度计算</strong></h3><p>层层（循环、递归）相加：比如有2层循环，第一层循环共执行n次基本语句，每个基本语句执行1次，也就是n个“1”次相加，为n；第二层循环执行log2n次第一次循环，每个第一次循环执行n次，总的也就是log2n个“n”次相加为nlog2n，故时间复杂度为O(nlogn)。</p><h3 id="复杂度计算的核心规则"><a href="#复杂度计算的核心规则" class="headerlink" title="复杂度计算的核心规则"></a>复杂度计算的核心规则</h3><ol><li><strong>单层循环</strong>：直接取循环次数，如 <code>O(n)</code>.  </li><li><strong>嵌套循环</strong>：各层循环次数相乘，如 <code>O(n²)</code> 或 <code>O(n log n)</code>.  </li><li><strong>递归算法</strong>：<br>• 递归次数 × 每次递归的操作次数，如斐波那契数列的 <code>O(2ⁿ)</code>.<br>• 分治策略（如归并排序）通过主定理计算，结果为 <code>O(n log n)</code>.  </li><li><strong>忽略低阶项</strong>：如 <code>T(n) = 3n² + 2n + 1</code> 简化为 <code>O(n²)</code>.  </li></ol><h3 id="1-O-1-—-常数复杂度"><a href="#1-O-1-—-常数复杂度" class="headerlink" title="1. O(1) — 常数复杂度"></a><strong>1. O(1) — 常数复杂度</strong></h3><p><strong>特点</strong>：运行次数与 N 大小呈常数关系，即不随输入数据大小 N 的变化而变化。</p><p><strong>示例</strong>：访问数组元素或交换变量。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 访问数组元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getElement</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> arr[index]; <span class="hljs-comment">// 无论数组大小，直接访问固定位置</span><br>&#125;<br><br><span class="hljs-comment">// 交换变量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span> &#123;<br>    <span class="hljs-type">int</span> temp = *a;<br>    *a = *b;<br>    *b = temp; <span class="hljs-comment">// 仅需三次赋值操作</span><br>&#125;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f219792807e.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f219792807e.png" alt=""></p><hr><h3 id="2-O-log-n-—-对数复杂度"><a href="#2-O-log-n-—-对数复杂度" class="headerlink" title="2. O(log n) — 对数复杂度"></a><strong>2. O(log n) — 对数复杂度</strong></h3><p><strong>特点</strong>：每次操作将问题规模缩减为固定比例（如折半）。<br><strong>示例</strong>：二分查找。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (arr[mid] == target) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">if</span> (arr[mid] &lt; target) left = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> right = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 每次搜索范围减半</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如下图所示，为二分查找的时间复杂度示意图，每次二分将搜索区间缩小一半。</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f2197929e82.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f2197929e82.png" alt=""></p><hr><h3 id="3-O-n-—-线性复杂度"><a href="#3-O-n-—-线性复杂度" class="headerlink" title="3. O(n) — 线性复杂度"></a><strong>3. O(n) — 线性复杂度</strong></h3><p><strong>特点</strong>：执行时间与输入规模成线性正比。<br><strong>示例</strong>：遍历数组求和。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sumArray</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        sum += arr[i]; <span class="hljs-comment">// 遍历所有元素，执行次数为n</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f2197926290.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f2197926290.png" alt=""></p><hr><h3 id="4-O-n-log-n-—-对数线性复杂度"><a href="#4-O-n-log-n-—-对数线性复杂度" class="headerlink" title="4. O(n log n) — 对数线性复杂度"></a><strong>4. O(n log n) — 对数线性复杂度</strong></h3><p><strong>特点</strong>：两层循环相互独立，第一层和第二层时间复杂度分别为 O(log⁡N) 和 O(N)，则总体时间复杂度为 O(Nlog⁡N)</p><p>结合线性与对数操作，常见于分治算法。<br><strong>示例</strong>：快速排序。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>        <span class="hljs-type">int</span> pivot = partition(arr, low, high); <span class="hljs-comment">// 分区操作O(n)</span><br>        quickSort(arr, low, pivot - <span class="hljs-number">1</span>);  <span class="hljs-comment">// 递归左半部分</span><br>        quickSort(arr, pivot + <span class="hljs-number">1</span>, high); <span class="hljs-comment">// 递归右半部分</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 每次递归将问题规模分半，递归深度为log n，每层总操作次数为n</span><br></code></pre></td></tr></table></figure><p>线性对数阶常出现于排序算法，例如「快速排序」、「归并排序」、「堆排序」等，其时间复杂度原理如下图所示。</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f219792ceba.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f219792ceba.png" alt=""></p><hr><h3 id="5-O-nᵏ-—-多项式复杂度（k-2为例）"><a href="#5-O-nᵏ-—-多项式复杂度（k-2为例）" class="headerlink" title="5. O(nᵏ) — 多项式复杂度（k=2为例）"></a><strong>5. O(nᵏ) — 多项式复杂度（k=2为例）</strong></h3><p><strong>特点</strong>：嵌套循环导致时间复杂度为输入规模的k次方。<br><strong>示例</strong>：冒泡排序。 第一层和第二层时间复杂度分别为 O(N) 和 O(N)，则总体时间复杂度为 O(N^2) </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size<span class="hljs-number">-1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size-i<span class="hljs-number">-1</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) &#123;<br>                swap(&amp;arr[j], &amp;arr[j+<span class="hljs-number">1</span>]); <span class="hljs-comment">// 双重循环，操作次数为n²</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f2197949027.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f2197949027.png" alt=""></p><hr><h3 id="6-O-kⁿ-—-指数复杂度"><a href="#6-O-kⁿ-—-指数复杂度" class="headerlink" title="6. O(kⁿ) — 指数复杂度"></a><strong>6. O(kⁿ) — 指数复杂度</strong></h3><p><strong>特点</strong>：问题规模每增加1，计算量翻倍。<br><strong>示例</strong>：斐波那契数列的递归实现。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-keyword">return</span> fibonacci(n<span class="hljs-number">-1</span>) + fibonacci(n<span class="hljs-number">-2</span>); <span class="hljs-comment">// 每次递归分裂为两次调用，复杂度为O(2ⁿ)</span><br>&#125;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f21979ba451.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f21979ba451.png" alt=""></p><hr><h3 id="7-O-n-—-阶乘复杂度"><a href="#7-O-n-—-阶乘复杂度" class="headerlink" title="7. O(n!) — 阶乘复杂度"></a><strong>7. O(n!) — 阶乘复杂度</strong></h3><p><strong>特点</strong>：问题规模每增加1，计算量增长为阶乘级。<br><strong>示例</strong>：生成全排列，给定 N<em>N</em> 个互不重复的元素，求其所有可能的排列方案（递归回溯）。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">algorithm</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> &#123;<br>    <span class="hljs-keyword">if</span> (N &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        count += algorithm(N - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f21979bc3d1.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f21979bc3d1.png" alt=""></p><h1 id="时间复杂度的意义"><a href="#时间复杂度的意义" class="headerlink" title="时间复杂度的意义"></a>时间复杂度的意义</h1><p>时间复杂度不同，随着输入数据量的增加，代码运行的时间也会增加。</p><p>例如O(1)无论输入数据如何增多，代码运行时间都不变。而O(n)的运行时间和输入数据量成正比。如果时间复杂度过高，例如O(2^n)，那么在小数据情况下，代码还可以运行，一旦数据量增大，则代码的运行时间将会几何级增加。</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f2197c5a42b.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f2197c5a42b.png" alt=""></p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f2197b9fefb.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f2197b9fefb.png" alt=""></p><p>代码执行时间总结如下：</p><div class="table-container"><table><thead><tr><th>名称</th><th>时间复杂度</th></tr></thead><tbody><tr><td>常数时间</td><td>O(1)</td></tr><tr><td>对数时间</td><td>O(log n)</td></tr><tr><td>线性时间</td><td>O(n)</td></tr><tr><td>线性对数时间</td><td>O(nlog n)</td></tr><tr><td>二次时间</td><td>O(n^2)</td></tr><tr><td>三次时间</td><td>O(n^3)</td></tr><tr><td>指数时间</td><td>O(2^n)</td></tr></tbody></table></div><h1 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h1><p class='item-img' data-src='https://pica.zhimg.com/80/v2-582c21adb0ae8039ad5cf5010c3b46b2_1440w.webp'><img src="https://pica.zhimg.com/80/v2-582c21adb0ae8039ad5cf5010c3b46b2_1440w.webp" alt="img"></p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-4671f059ba17906a6438c07a6a2815f7_1440w.webp'><img src="https://pic4.zhimg.com/80/v2-4671f059ba17906a6438c07a6a2815f7_1440w.webp" alt="img"></p><p class='item-img' data-src='https://pic2.zhimg.com/80/v2-6dd67dfea6b61a260c60b8b6cfc826f3_1440w.webp'><img src="https://pic2.zhimg.com/80/v2-6dd67dfea6b61a260c60b8b6cfc826f3_1440w.webp" alt="img"></p><hr><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><blockquote><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度。空间复杂度不是程序占用了多少字节的空间，因为这个也没太大意义，所以<strong>空间复杂度算的是变量的个数</strong>。空间复杂度计算规则基本跟时间复杂度类似，也使用大O渐进表示法。</p></blockquote><h3 id="常数-O-1"><a href="#常数-O-1" class="headerlink" title="常数 O(1)"></a>常数 O(1)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//计算冒泡排序函数的空间复杂度</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> N)</span><br>&#123;<br>assert(a);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>&#123;<br><span class="hljs-type">int</span> exchange = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[j]&gt;a[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> tmp = a[j];<br>a[j] = a[j + <span class="hljs-number">1</span>];<br>a[j + <span class="hljs-number">1</span>] = tmp;<br>exchange = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (exchange == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>冒泡排序函数中使用了常数个额外空间（即常数个变量），所以用大O的渐进表示法表示冒泡排序函数的空间复杂度为<strong>O(1)</strong> 。</p><h3 id="线性-O-N"><a href="#线性-O-N" class="headerlink" title="线性 O(N)"></a>线性 O<em>(</em>N)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//计算阶乘递归函数的空间复杂度</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title function_">Factorial</span><span class="hljs-params">(<span class="hljs-type">size_t</span> N)</span><br>&#123;<br><span class="hljs-keyword">return</span> N &lt; <span class="hljs-number">2</span> ? N : Factorial(N - <span class="hljs-number">1</span>)*N;<br>&#125;<br></code></pre></td></tr></table></figure><p>阶乘递归函数会依次调用Factorial(N),Factorial(N-1),…,Factorial(2),Factorial(1)，开辟了N个空间，所以空间复杂度为<strong>O(N)</strong> 。</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f2197a7f3a0.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f2197a7f3a0.png" alt=""></p><h3 id="平方-O-N²"><a href="#平方-O-N²" class="headerlink" title="平方 O(N²)"></a>平方 O(N²)</h3><p>元素数量与 N呈平方关系的任意类型集合（常见于矩阵），皆使用平方大小的空间。</p><ol><li><strong>递归调用栈的深度</strong><br>每次递归调用参数递减 1，直到 N ≤ 0。递归深度为 N 次（例如 N=5 时调用链为 algorithm(5) → algorithm(4) → … → algorithm(0)）</li><li><strong>每次递归的临时空间占用</strong><br>每次递归调用时，会在栈上动态创建一个大小为 N 的整型数组 <code>int nums[N]</code>。随着递归深度增加，数组长度的变化为 N, N-1, N-2, …, 1</li><li><strong>空间累计计算</strong><br>总空间占用为各次递归调用中数组大小的累加：<br><em>S</em>(<em>N</em>)=<em>N</em>+(<em>N</em>−1)+(<em>N</em>−2)+⋯+1=2<em>N</em>(<em>N</em>+1)​<br>根据大 O 表示法，简化为 ​<strong>​O(N²)​</strong>​</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">algorithm</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (N &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> nums[N];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">algorithm</span>(N - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f2197a7bf34.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f2197a7bf34.png" alt=""></p><h3 id="指数-O-2ᴺ"><a href="#指数-O-2ᴺ" class="headerlink" title="指数 O(2ᴺ)"></a>指数 O(2ᴺ)</h3><p>指数阶常见于二叉树、多叉树的空间分析，例如：</p><ol><li><p>满二叉树</p><p>高度为 <strong>N</strong> 的满二叉树，节点总数为 <strong>2ᴺ</strong>，空间复杂度为 <strong>O(2ᴺ)</strong>。</p></li><li><p>满 m 叉树</p><p>高度为 <strong>N</strong> 的满 m 叉树，节点总数为 <strong>mᴺ</strong>。</p><p>当 m 为常数时，<strong>O(mᴺ) = O(2ᴺ)</strong>（指数级增长性质相同）。</p></li></ol><p>指数阶常见于二叉树、多叉树。例如，高度为 N的「满二叉树」的节点数量为 2^N，占用 O(2^N)大小的空间；同理，高度为 N的「满 m叉树」的节点数量为 m^N，占用 O(m^N)大小的空间。</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/04/06/67f2197a8e599.png'><img src="https://free-img.400040.xyz/4/2025/04/06/67f2197a8e599.png" alt=""></p><h3 id="对数-O-log-N"><a href="#对数-O-log-N" class="headerlink" title="对数 O(log N)"></a><strong>对数 O(log N)</strong></h3><p>对数阶常出现于分治算法的栈帧空间累计、数据类型转换等，例如：</p><ul><li><strong>快速排序</strong>，平均空间复杂度为 Θ(log N)，最差空间复杂度为 O(N)。<br>通过应用尾递归优化，可以将快速排序的最差空间复杂度限定至 O(N)。</li><li><strong>数字转化为字符串</strong>，设某正整数为 N，则字符串的空间复杂度为 O(log N)。<br>正整数 N 的位数为 log₁₀ N，即转化的字符串长度为 log₁₀ N，因此空间复杂度为 O(log N)。</li></ul><p><strong>注：递归算法的空间复杂度通常是递归的深度（即递归多少层）。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法复杂度&quot;&gt;&lt;a href=&quot;#算法复杂度&quot; class=&quot;headerlink&quot; title=&quot;算法复杂度&quot;&gt;&lt;/a&gt;算法复杂度&lt;/h1&gt;&lt;p&gt;算法复杂度旨在计算在输入数据量 N的情况下，算法的「时间使用」和「空间使用」情况；体现算法运行使用的时间和空间随「数</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-绪论</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/45088.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/45088.html</id>
    <published>2025-04-05T03:31:22.000Z</published>
    <updated>2025-04-05T09:31:57.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-数据结构的基本概念"><a href="#1-1-数据结构的基本概念" class="headerlink" title="1.1 数据结构的基本概念"></a><strong>1.1 数据结构的基本概念</strong></h2><p>　　数据、数据元素、数据对象、数据结构、存储结构、数据类型和抽象数据类型。</p><blockquote><p><strong>数据</strong>(data)是对客观事物的符号表示。在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。<br><strong>数据元素</strong>(data element)是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。<br><strong>数据对象</strong>(data object)是性质相同的数据元素的集合，是数据的一个子集。<br><strong>数据结构</strong>(data structure)是相互之间存在一种或多种特定关系的数据元素的集合。<br><strong>存储结构</strong>（<strong>物理结构</strong>）是数据结构在计算机中的表示（又称映像）。<br><strong>数据类型</strong>(data type)是一个值的集合和定义在这个值集上的一组操作的总称。<br><strong>抽象数据类型</strong>(Abstract Data Type)是指一个数学模型以及定义在该模型上的一组操作。</p></blockquote><h3 id="抽象数据类型的定义"><a href="#抽象数据类型的定义" class="headerlink" title="抽象数据类型的定义"></a><strong>抽象数据类型的定义</strong></h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ADT 抽象数据类型名</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    数据对象：数据对象的定义</span><br><span class="hljs-template-variable">    数据关系：数据关系的定义</span><br><span class="hljs-template-variable">    基本操作：基本操作的定义</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml">ADT 抽象数据类型名</span><br></code></pre></td></tr></table></figure><p>例子如下</p><p><strong>抽象数据类型复数和有理数的定义</strong>（有理数是其分子、分母均为自然数且分母不为零的分数）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">复数定义：<br>ADT Complex  <span class="hljs-comment">//复数定义 a±bi</span><br>&#123;<br>    数据对象：D = &#123;a, b | a,b为实数&#125;<br>    数据关系：R = &#123;&lt;a, b&gt;&#125;<br>    基本操作：<br>        InitComplex(&amp;C, re, im)<br>            操作结果：构造一个复数C，其实部和虚部分别为re和im<br>        DestroyCmoplex(&amp;C)<br>            操作结果：销毁复数C<br>        Get(C, k, &amp;e)<br>            初始条件：复数C已存在<br>            操作结果：用e返回复数C的第k元的值<br>        Put(&amp;C, k, e)<br>            初始条件：复数C已存在<br>            操作结果：改变复数C的第k元的值为e<br>        IsAscending(C)<br>            初始条件：复数C已存在<br>            操作结果：如果复数C的两个元素按升序排列，则返回<span class="hljs-number">1</span>，否则返回<span class="hljs-number">0</span><br>        IsDescending(C)<br>            初始条件：复数C已存在<br>            操作结果：如果复数C的两个元素按降序排列，则返回<span class="hljs-number">1</span>，否则返回<span class="hljs-number">0</span><br>        Max(C, &amp;e)<br>            初始条件：复数C已存在<br>            操作结果：用e返回复数C的两个元素中值较大的一个<br>        Min(C, &amp;e)<br>            初始条件：复数C已存在<br>            操作结果：用e返回复数C的两个元素中值较小的一个<br>&#125;ADT Complex<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">有理数定义：<br>ADT RationalNumber  <span class="hljs-comment">//有理数定义</span><br>&#123;<br>    数据对象：D=&#123;s, m | s,m为自然数，且m不为<span class="hljs-number">0</span>&#125;<br>    数据关系：R=&#123;&lt;s, m&gt;&#125;<br>    基本操作：<br>        InitRationalNumber(&amp;R, s, m)<br>            操作结果：构造一个有理数R，其分子和分母分别为s和m<br>        DestroyRationalNumber(&amp;R)<br>            操作结果：销毁有理数R<br>        Get(R, k, &amp;e)<br>            初始条件：有理数R已存在<br>            操作结果：用e返回有理数R的第k元的值<br>        Put(&amp;R, k, e)<br>            初始条件：有理数R已存在<br>            操作结果：改变有理数R的第k元的值为e<br>        IsAscending(R)<br>            初始条件：有理数R已存在<br>            操作结果：若有理数R的两个元素按升序排列，则返回<span class="hljs-number">1</span>，否则返回<span class="hljs-number">0</span><br>        IsDescending(R)<br>            初始条件：有理数R已存在<br>            操作结果：若有理数R的两个元素按降序排列，则返回<span class="hljs-number">1</span>，否则返回<span class="hljs-number">0</span><br>        Max(R, &amp;e)<br>            初始条件：有理数R已存在<br>            操作结果：用e返回有理数R的两个元素中值较大的一个<br>        Min(R, &amp;e)<br>            初始条件：有理数R已存在<br>            操作结果：用e返回有理数R的两个元素中值较小的一个<br>&#125;ADT RationalNumber<br></code></pre></td></tr></table></figure><p>　　</p><p>根据数据元素之间关系的 不同特性，通常有下列几种类基本结构：</p><p>(1) <strong>集合</strong> 结构中的 如生 数据元素之间除了“同属千一个集合”的关系外，别无其他关系</p><p>(2) <strong>线性结构</strong> 结构中的数据元素之间存在一个对 一个的关系；</p><p>(3) <strong>树形结构</strong> 结构中的数据元素之间存在一 个对多个的关系； </p><p>(4) <strong>图状结构或网状结构</strong> 结构中的数据 元素之间存在多个对多个的关系。</p><h3 id="1-1-2-数据结构三要素"><a href="#1-1-2-数据结构三要素" class="headerlink" title="1.1.2 数据结构三要素"></a><strong>1.1.2 数据结构三要素</strong></h3><p>　　　　<strong>① 逻辑结构</strong></p><p>　　　　　　逻辑结构指数据元素之间存在的逻辑关系，是固有的客观联系；</p><p>　　　　　　逻辑结构分为<strong>线性结构</strong>与<strong>非线性结构</strong>，比如：线性表、树、图等；</p><p>　　　　<strong>② 存储结构</strong></p><p>　　　　　　存储结构又称为物理结构，指数据结构在计算机中的表示（映像），是计算机内部的存储方法；</p><p>　　　　　　存储结构主要有<strong>顺序存储、链式存储、索引存储</strong>和<strong>散列存储</strong>；</p><p>　　　　　　一种逻辑结构通过映像便可以得到它的存储结构；</p><p>　　　　　　诸如顺序表、哈希表、链表这样的表述，它们既体现了逻辑结构（均为线性），又体现了存储结构（顺序、散列、链式）；</p><p>　　　　　　而这样的表述我们往往就直接称之为<strong>数据结构</strong>；</p><p>　　　　　　诸如有序表，它只体现了逻辑结构（线性），而存储结构是未知的（可以是顺序、链式……）；</p><p>　　　　　　不存在只体现存储结构而不体现逻辑结构的表述；</p><p>　　　　　　所以，我们认为：<strong>逻辑结构独立于存储结构。</strong></p><p>　　　　<strong>③ 数据的运算（算法）</strong></p><p>　　　　　　算法包括运算的<strong>定义</strong>（取决于逻辑结构，体现算法功能）与<strong>实现</strong>（取决于存储结构，体现于操作步骤）。</p><h3 id="1-2-算法的基本概念"><a href="#1-2-算法的基本概念" class="headerlink" title="1.2 算法的基本概念"></a><strong>1.2 算法的基本概念</strong></h3><p>　　算法的 5 个重要特性：<strong>有穷性、确定性、有效性（可行性）、输入</strong>，<strong>输出</strong>；</p><p>　　一个好的算法的目标：<strong>正确性、可读性、鲁棒性、效率与低存储量需求</strong>。</p><p><strong>1.3 算法分析</strong></p><p>　　<strong>时间复杂度</strong>指算法所有语句被重复执行次数总和的数量级。</p><p>　　常见时间复杂度比较：</p><p>　　　　<strong>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</strong></p><p>　　　　(log 表示以 2 为底的对数)</p><p>　　<strong>空间复杂度</strong>指算法耗费存储空间的数量级。</p><p><strong>1.4 时间复杂度的计算</strong></p><h3 id="计算时间复杂度"><a href="#计算时间复杂度" class="headerlink" title="计算时间复杂度"></a><strong>计算时间复杂度</strong></h3><p>问题规模——&gt; 输入量的多少</p><p>语句频度——&gt; 一条语句的重复执行次数</p><p>执行时间&lt;—— 所有语句频度之和</p><blockquote><p>1.基本操作，即只有常数项，认为其时间复杂度为O(1)<br>2.顺序结构，时间复杂度按加法进行计算<br>3.循环结构，时间复杂度按乘法进行计算<br>4.分支结构，时间复杂度取最大值 判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略<br>5.在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度</p></blockquote><p>　　</p><p><strong>循环条件包含主体变量</strong></p><p>将执行次数代入循环条件进行求解：</p><p><strong>示例1：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= n) <br>    i = i * <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><ul><li>每次循环后 <em>i</em> =2<em>t</em>（<em>t</em> 为执行次数）</li><li>终止条件：2<em>t</em> ≤ <em>n</em></li><li>解得 <em>t </em>≤ log2<em>n</em></li><li>时间复杂度：<em>T</em>(<em>n</em>) = <em>O</em>(log<em>n</em>)</li></ul><p><strong>示例2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">while</span> ((i + <span class="hljs-number">1</span>) * (i + <span class="hljs-number">1</span>) &lt; n) <br>    i = i + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>令 <em>t</em>=<em>i</em>−3，则 <em>i</em>=<em>t</em>+3</li><li>代入条件：(<em>t</em>+3+1)2&lt;<em>n</em>⟹(<em>t</em>+4)2&lt;<em>n</em></li><li>解得 <em>t</em>&lt;<em>n</em>−4</li><li>时间复杂度：<em>T</em>(<em>n</em>)=<em>O</em>(<em>n</em>)</li></ul><hr><p><strong>循环条件与主体变量无关</strong></p><p>通过数学归纳法或递归展开直接计数：</p><p><strong>示例（递归函数）：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fact</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> n * fact(n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>递归方程：<em>T</em>(<em>n</em>)=1+<em>T</em>(<em>n</em>−1)</li><li>展开递推：<em>T</em>(<em>n</em>)=1+<em>T</em>(<em>n</em>−1)=1+1+<em>T</em>(<em>n</em>−2) ⋮=<em>k</em>+<em>T</em>(<em>n</em>−<em>k</em>)(当 <em>k</em>=<em>n</em>−1)=(<em>n</em>−1)+<em>T</em>(1)=<em>O</em>(<em>n</em>)</li><li>时间复杂度：<em>T</em>(<em>n</em>)=<em>O</em>(<em>n</em>)</li></ul><h2 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h2><p>如下图所示，常见的数据结构可分为「线性数据结构」与「非线性数据结构」，具体为：「数组」、「链表」、「栈」、「队列」、「树」、「图」、「散列表」、「堆」。</p><p class='item-img' data-src='https://pic.leetcode-cn.com/1599638810-SZDwfK-Picture1.png'><img src="https://pic.leetcode-cn.com/1599638810-SZDwfK-Picture1.png" alt="Picture1.png"></p><hr><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是将相同类型的元素存储于连续内存空间的数据结构，其长度不可变。</p><p>如下图所示，构建此数组需要在初始化时给定长度，并对数组每个索引元素赋值，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化一个长度为 5 的数组 array</span><br><span class="hljs-type">int</span> array[<span class="hljs-number">5</span>];<br><span class="hljs-comment">// 元素赋值</span><br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br>array[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>;<br>array[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>array[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>array[<span class="hljs-number">4</span>] = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>或者可以使用直接赋值的初始化方式，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> array[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>&#125;;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://pic.leetcode-cn.com/1599587176-JAxwpf-Picture2.png'><img src="https://pic.leetcode-cn.com/1599587176-JAxwpf-Picture2.png" alt="Picture2.png"></p><p>「可变数组」是经常使用的数据结构，其基于数组和扩容机制实现，相比普通数组更加灵活。常用操作有：访问元素、添加元素、删除元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化可变数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; array;<br><br><span class="hljs-comment">// 向尾部添加元素</span><br>array.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>array.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>array.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>array.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>array.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 <code>val</code>」，「后继节点引用 <code>next</code>」 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;        <span class="hljs-comment">// 节点值</span><br>    ListNode *next; <span class="hljs-comment">// 后继节点引用</span><br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如下图所示，建立此链表需要实例化每个节点，并构建各节点的引用指向。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 实例化节点</span><br>ListNode *n1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// 节点 head</span><br>ListNode *n2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">5</span>);<br>ListNode *n3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 构建引用指向</span><br>n1-&gt;next = n2;<br>n2-&gt;next = n3;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://pic.leetcode-cn.com/1599578767-zgLjYw-Picture3.png'><img src="https://pic.leetcode-cn.com/1599578767-zgLjYw-Picture3.png" alt="Picture3.png"></p><hr><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种具有 「先入后出」 特点的抽象数据结构，可使用数组或链表实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">stack&lt;<span class="hljs-type">int</span>&gt; stk;<br></code></pre></td></tr></table></figure><p>如下图所示，通过常用操作「入栈 <code>push()</code>」,「出栈 <code>pop()</code>」，展示了栈的先入后出特性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">stk.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 元素 1 入栈</span><br>stk.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 元素 2 入栈</span><br>stk.<span class="hljs-built_in">pop</span>();   <span class="hljs-comment">// 出栈 -&gt; 元素 2</span><br>stk.<span class="hljs-built_in">pop</span>();   <span class="hljs-comment">// 出栈 -&gt; 元素 1</span><br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://pic.leetcode-cn.com/1599578767-ZifMEX-Picture4.png'><img src="https://pic.leetcode-cn.com/1599578767-ZifMEX-Picture4.png" alt="Picture4.png"></p><hr><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列是一种具有 「先入先出」 特点的抽象数据结构，可使用链表实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">queue&lt;<span class="hljs-type">int</span>&gt; que;<br></code></pre></td></tr></table></figure><p>如下图所示，通过常用操作「入队 <code>push()</code>」,「出队 <code>pop()</code>」，展示了队列的先入先出特性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">que.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 元素 1 入队</span><br>que.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 元素 2 入队</span><br>que.<span class="hljs-built_in">pop</span>();   <span class="hljs-comment">// 出队 -&gt; 元素 1</span><br>que.<span class="hljs-built_in">pop</span>();   <span class="hljs-comment">// 出队 -&gt; 元素 2</span><br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://pic.leetcode-cn.com/1599588416-Majmwh-Picture5.png'><img src="https://pic.leetcode-cn.com/1599588416-Majmwh-Picture5.png" alt="Picture5.png"></p><hr><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>树是一种非线性数据结构，根据子节点数量可分为 「二叉树」 和 「多叉树」，最顶层的节点称为「根节点 <code>root</code>」。以二叉树为例，每个节点包含三个成员变量：「值 <code>val</code>」、「左子节点 <code>left</code>」、「右子节点 <code>right</code>」 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val;         <span class="hljs-comment">// 节点值</span><br>    TreeNode *left;  <span class="hljs-comment">// 左子节点</span><br>    TreeNode *right; <span class="hljs-comment">// 右子节点</span><br>    <span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如下图所示，建立此二叉树需要实例化每个节点，并构建各节点的引用指向。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化节点</span><br>TreeNode *n1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// 根节点 root</span><br>TreeNode *n2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">4</span>);<br>TreeNode *n3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">5</span>);<br>TreeNode *n4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">1</span>);<br>TreeNode *n5 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 构建引用指向</span><br>n1-&gt;left = n2;<br>n1-&gt;right = n3;<br>n2-&gt;left = n4;<br>n2-&gt;right = n5;<br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://pic.leetcode-cn.com/1599579136-bBARpC-Picture6.png'><img src="https://pic.leetcode-cn.com/1599579136-bBARpC-Picture6.png" alt="Picture6.png"></p><hr><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>图是一种非线性数据结构，由「节点（顶点）<code>vertex</code>」和「边 <code>edge</code>」组成，每条边连接一对顶点。根据边的方向有无，图可分为「有向图」和「无向图」。本文 <strong>以无向图为例</strong> 开展介绍。</p><p>如下图所示，此无向图的 <strong>顶点</strong> 和 <strong>边</strong> 集合分别为：</p><ul><li>顶点集合： <code>vertices = &#123;1, 2, 3, 4, 5&#125;</code></li><li>边集合： <code>edges = &#123;(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (3, 5), (4, 5)&#125;</code></li></ul><p class='item-img' data-src='https://pic.leetcode-cn.com/1599579136-Fxseew-Picture7.png'><img src="https://pic.leetcode-cn.com/1599579136-Fxseew-Picture7.png" alt="Picture7.png"></p><p>表示图的方法通常有两种：</p><p><strong>邻接矩阵</strong>：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">int vertices[5] = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class="language-xml">int edges[5][5] = </span><span class="hljs-template-variable">&#123;&#123;0, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,</span><br><span class="hljs-template-variable">                   &#123;<span class="hljs-number">1</span>, 0, 0, <span class="hljs-number">1</span>, 0&#125;,</span><br><span class="hljs-template-variable">                   &#123;<span class="hljs-number">1</span>, 0, 0, 0, <span class="hljs-number">1</span>&#125;,</span><br><span class="hljs-template-variable">                   &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, 0, 0, <span class="hljs-number">1</span>&#125;,</span><br><span class="hljs-template-variable">                   &#123;<span class="hljs-number">1</span>, 0, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, 0&#125;&#125;</span><span class="language-xml">;</span><br></code></pre></td></tr></table></figure><hr><p><strong>邻接表：</strong></p><ul><li><strong>顶点存储</strong>: 数组 <code>vertices</code> 存储顶点值</li><li><strong>边存储</strong>: 二维容器 <code>edges</code> 存储边关系<ul><li>第一维 <code>i</code> 表示顶点索引（对应 <code>vertices[i]</code>）</li><li>第二维 <code>edges[i]</code> 存储该顶点连接的<strong>目标顶点值集合</strong></li><li><strong><code>edges[i]</code> 中的数字直接表示目标顶点</strong>值**（非索引）</li><li>例如 <code>edges[0] = [1,2,3,4]</code> 表示顶点1连接到值2/3/4/5（注意实际值比索引大1）</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> vertices[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; edges;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; edge_1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; edge_2 = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; edge_3 = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">4</span>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; edge_4 = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; edge_5 = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>edges.<span class="hljs-built_in">push_back</span>(edge_1);<br>edges.<span class="hljs-built_in">push_back</span>(edge_2);<br>edges.<span class="hljs-built_in">push_back</span>(edge_3);<br>edges.<span class="hljs-built_in">push_back</span>(edge_4);<br>edges.<span class="hljs-built_in">push_back</span>(edge_5);<br></code></pre></td></tr></table></figure><blockquote><p><strong>邻接矩阵 VS 邻接表 ：</strong></p><p>邻接矩阵的大小只与节点数量有关，即 N2<em>N</em>2 ，其中 N<em>N</em> 为节点数量。因此，当边数量明显少于节点数量时，使用邻接矩阵存储图会造成较大的内存浪费。<br>因此，<strong>邻接表</strong> 适合存储稀疏图（顶点较多、边较少）； <strong>邻接矩阵</strong> 适合存储稠密图（顶点较少、边较多）。</p></blockquote><hr><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><p>散列表是一种非线性数据结构，通过利用 Hash 函数将指定的「键 <code>key</code>」映射至对应的「值 <code>value</code>」，以实现高效的元素查找。</p><blockquote><p>设想一个简单场景：小力、小特、小扣的学号分别为 10001, 10002, 10003 。<br>现需求从「姓名」查找「学号」。</p></blockquote><p>则可通过建立姓名为 <code>key</code> ，学号为 <code>value</code> 的散列表实现此需求，代码如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 初始化散列表</span><br>unordered_map&lt;string, int&gt; dic;<br><br><span class="hljs-comment">// 添加 key -&gt; value 键值对</span><br>dic[<span class="hljs-string">&quot;小力&quot;</span>] = <span class="hljs-number">10001</span>;<br>dic[<span class="hljs-string">&quot;小特&quot;</span>] = <span class="hljs-number">10002</span>;<br>dic[<span class="hljs-string">&quot;小扣&quot;</span>] = <span class="hljs-number">10003</span>;<br><br><span class="hljs-comment">// 从姓名查找学号</span><br>dic.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;小力&quot;</span>)-&gt;<span class="hljs-built_in">second</span>; <span class="hljs-comment">// -&gt; 10001</span><br>dic.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;小特&quot;</span>)-&gt;<span class="hljs-built_in">second</span>; <span class="hljs-comment">// -&gt; 10002</span><br>dic.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;小扣&quot;</span>)-&gt;<span class="hljs-built_in">second</span>; <span class="hljs-comment">// -&gt; 10003</span><br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://pic.leetcode-cn.com/1599811794-ruXMOV-Picture8.png'><img src="https://pic.leetcode-cn.com/1599811794-ruXMOV-Picture8.png" alt="Picture8.png"></p><p><strong>Hash 函数设计示例 ：</strong></p><blockquote><p>假设需求：从「学号」查找「姓名」。</p></blockquote><p>将三人的姓名存储至以下数组中，则各姓名在数组中的索引分别为 0, 1, 2 。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">string</span> names[] = &#123; <span class="hljs-string">&quot;小力&quot;</span>, <span class="hljs-string">&quot;小特&quot;</span>, <span class="hljs-string">&quot;小扣&quot;</span> &#125;;<br></code></pre></td></tr></table></figure><p>此时，我们构造一个简单的 Hash 函数（ %% 为取余符号 ），公式和封装函数如下所示：</p><p>hash(key)=(key−1)%10000</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> <span class="hljs-built_in">hash</span>(<span class="hljs-built_in">int</span> <span class="hljs-built_in">id</span>) &#123;<br>    <span class="hljs-built_in">int</span> index = (<span class="hljs-built_in">id</span> - <span class="hljs-number">1</span>) % <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">return</span> index;<br>&#125;<br></code></pre></td></tr></table></figure><p>则我们构建了以学号为 <code>key</code> 、姓名对应的数组索引为 <code>value</code> 的散列表。利用此 Hash 函数，则可在 O(1)<em>O</em>(1) 时间复杂度下通过学号查找到对应姓名，即：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">names[<span class="hljs-built_in">hash</span>(<span class="hljs-number">10001</span>)] <span class="hljs-comment">// 小力</span><br>names[<span class="hljs-built_in">hash</span>(<span class="hljs-number">10002</span>)] <span class="hljs-comment">// 小特</span><br>names[<span class="hljs-built_in">hash</span>(<span class="hljs-number">10003</span>)] <span class="hljs-comment">// 小扣</span><br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://pic.leetcode-cn.com/1599811794-NfbpfW-Picture8-1.png'><img src="https://pic.leetcode-cn.com/1599811794-NfbpfW-Picture8-1.png" alt="Picture8-1.png"></p><p>以上设计只适用于此示例，实际的 Hash 函数需保证低碰撞率、 高鲁棒性等，以适用于各类数据和场景。</p><hr><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆是一种基于「完全二叉树」的数据结构，可使用数组实现。以堆为原理的排序算法称为「堆排序」，基于堆实现的数据结构为「优先队列」。堆分为「大顶堆」和「小顶堆」，大（小）顶堆：任意节点的值不大于（小于）其父节点的值。</p><blockquote><p><strong>完全二叉树定义：</strong> 设二叉树深度为 k<em>k</em> ，若二叉树除第 k<em>k</em> 层外的其它各层（第 11 至 k−1<em>k</em>−1 层）的节点达到最大个数，且处于第 k<em>k</em> 层的节点都连续集中在最左边，则称此二叉树为完全二叉树。</p></blockquote><p>如下图所示，为包含 <code>1, 4, 2, 6, 8</code> 元素的小顶堆。将堆（完全二叉树）中的结点按层编号，即可映射到右边的数组存储形式。</p><p class='item-img' data-src='https://pic.leetcode-cn.com/1599584901-xoiGEQ-Picture9.png'><img src="https://pic.leetcode-cn.com/1599584901-xoiGEQ-Picture9.png" alt="Picture9.png"></p><p>通过使用「优先队列」的「压入 <code>push()</code>」和「弹出 <code>pop()</code>」操作，即可完成堆排序，实现代码如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">// 初始化小顶堆</span><br>priority_queue&lt;<span class="hljs-keyword">int</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt;&gt; heap;<br><br><span class="hljs-comment">// 元素入堆</span><br>heap.<span class="hljs-keyword">push</span>(<span class="hljs-number">1</span>);<br>heap.<span class="hljs-keyword">push</span>(<span class="hljs-number">4</span>);<br>heap.<span class="hljs-keyword">push</span>(<span class="hljs-number">2</span>);<br>heap.<span class="hljs-keyword">push</span>(<span class="hljs-number">6</span>);<br>heap.<span class="hljs-keyword">push</span>(<span class="hljs-number">8</span>);<br><br><span class="hljs-comment">// 元素出堆（从小到大）</span><br>heap.<span class="hljs-keyword">pop</span>(); <span class="hljs-comment">// -&gt; 1</span><br>heap.<span class="hljs-keyword">pop</span>(); <span class="hljs-comment">// -&gt; 2</span><br>heap.<span class="hljs-keyword">pop</span>(); <span class="hljs-comment">// -&gt; 4</span><br>heap.<span class="hljs-keyword">pop</span>(); <span class="hljs-comment">// -&gt; 6</span><br>heap.<span class="hljs-keyword">pop</span>(); <span class="hljs-comment">// -&gt; 8</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-1-数据结构的基本概念&quot;&gt;&lt;a href=&quot;#1-1-数据结构的基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.1 数据结构的基本概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.1 数据结构的基本概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;　　数据、数据元素</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于数据结构的一些想法</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/12835.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/12835.html</id>
    <published>2025-04-04T11:13:49.000Z</published>
    <updated>2025-04-05T05:59:36.900Z</updated>
    
    <content type="html"><![CDATA[<hr><p>鉴于我校 [已编辑] 的教学安排，在刚学完c语言程序设计后，大一下就开始了基于c++的数据结构的学习，由于算法基础过于薄弱，数据结构拼尽全力期末复习只考了70而且掌握不足，写不出东西来，现在重拾旧事把数据结构重新学一遍</p><p>个人认为学不明白踩过的坑有几点：</p><ul><li><p>第一，在大学的课程里并没有讲明白一个问题，就是数据结构算法应该怎么样和实际场景结合。比如，老师讲到树形结构的时候会说，树形效率很高， 它的插入和查找时间复杂度都是O(LogN)，是一种非常重要的数据结构，在计算机中应用非常广泛，讲到这里就讲完了,留下我们一头雾水。</p></li><li><p>第二，在实际其实没有机会从零开始手写一个数据结构和算法，在主流的编程语言中都已经封装好了。</p></li><li><p>第三，你广州大学的数据结构排课极少，这么难学的课竟然课时还没思政课多。不知道计算机学院那边是什么情况，蹭课时那边一个时间复杂度讲了三节课，心死了，还是得靠自己学</p></li></ul><p>  很多时候我们能说出队列是什么原理，栈是什么原理，树的旋转是怎么回事， 但如果让我们自己实现一个队列或者栈还是有点难度的， 尤其是在需要考虑一些性能问题的时候。遂决定把这些重新拾起来。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;鉴于我校 [已编辑] 的教学安排，在刚学完c语言程序设计后，大一下就开始了基于c++的数据结构的学习，由于算法基础过于薄弱，数据结构拼尽全力期末复习只考了70而且掌握不足，写不出东西来，现在重拾旧事把数据结构重新学一遍&lt;/p&gt;
&lt;p&gt;个人认为学不明白踩过的坑有几点</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo集成gitalk时的Error Validation Failed问题</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/18261.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/18261.html</id>
    <published>2025-04-03T06:26:34.000Z</published>
    <updated>2025-04-04T11:14:28.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo集成gitalk时Error-Validation-Failed问题"><a href="#hexo集成gitalk时Error-Validation-Failed问题" class="headerlink" title="hexo集成gitalk时Error: Validation Failed问题"></a>hexo集成gitalk时Error: Validation Failed问题</h2><p>Hexo集成Gitalk后，某些文章下方的评论显示<code>Error: Validation Failed</code></p><p>Gitalk会限制Label name的长度，有些文章生成的URL长度会超过限制，所以导致这个问题</p><p class='item-img' data-src='https://user-images.githubusercontent.com/16487416/38803021-8740f06c-41a0-11e8-955c-eb3ee9cc07d9.png'><img src="https://user-images.githubusercontent.com/16487416/38803021-8740f06c-41a0-11e8-955c-eb3ee9cc07d9.png" alt="img"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可以集成一个对文章生成唯一id的插件</p><h3 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a>hexo-abbrlink</h3><p>在博客根目录下安装</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-abbrlink</span><br></code></pre></td></tr></table></figure><p>并修改配置文件<code>_config.yml</code></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">permalink:</span> [<span class="hljs-title class_">EveryWordsYouWant</span>]/<span class="hljs-symbol">:abbrlink/</span><br></code></pre></td></tr></table></figure><p>再 <em>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</em> 即可</p><p class='item-img' data-src='https://pica.zhimg.com/80/v2-0b7a582d36baa6ffd77cccb429f6f244_720w.webp'><img src="https://pica.zhimg.com/80/v2-0b7a582d36baa6ffd77cccb429f6f244_720w.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hexo集成gitalk时Error-Validation-Failed问题&quot;&gt;&lt;a href=&quot;#hexo集成gitalk时Error-Validation-Failed问题&quot; class=&quot;headerlink&quot; title=&quot;hexo集成gitalk时Err</summary>
      
    
    
    
    <category term="Hexo" scheme="https://zhongye1.github.io/Arknight-notes/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhongye1.github.io/Arknight-notes/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Neo4j图数据科学库（GDS）进行中心度分析</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/19918.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/19918.html</id>
    <published>2025-04-02T15:37:24.000Z</published>
    <updated>2025-04-03T06:22:53.778Z</updated>
    
    <content type="html"><![CDATA[<p><strong>安装并加载GDS库</strong>  </p><p>​    确保已安装并启用GDS插件。若未安装，需从Neo4j官网下载对应版本。<br>​    </p><h3 id="创建图投影"><a href="#创建图投影" class="headerlink" title="创建图投影"></a>创建图投影</h3><p>在 GDS 中创建内存中的图投影：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">CALL</span> gds.graph.<span class="hljs-keyword">project</span>(<br>  <span class="hljs-string">'nodeGraph'</span>,      <span class="hljs-comment">// 图名称</span><br>  <span class="hljs-string">'Node'</span>,           <span class="hljs-comment">// 节点标签</span><br>  <span class="hljs-string">'NEIGHBOR'</span>,       <span class="hljs-comment">// 关系类型</span><br>  {<br>    nodeProperties: [<span class="hljs-string">'degree'</span>],  <span class="hljs-comment">// 需要加载的节点属性</span><br>    relationshipProperties: {}  <span class="hljs-comment">// 关系属性（可选）</span><br>  }<br>);<br></code></pre></td></tr></table></figure><hr><p><strong>运行度中心性算法并写入属性</strong> </p><p>使用<code>gds.degree.write</code>方法计算每个节点的度（可指定入度、出度或总度数），并将结果存储为节点属性<code>degree</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">CALL</span> gds.degree.<span class="hljs-keyword">write</span>(<span class="hljs-string">'nodeGraph'</span>, {<br>    writeProperty: <span class="hljs-string">'degree'</span>,   <span class="hljs-comment">// 写入的属性名</span><br>    orientation: <span class="hljs-string">'UNDIRECTED'</span>  <span class="hljs-comment">// 方向：UNDIRECTED（总度数）、NATURAL（出度）、REVERSE（入度）</span><br>})<br>YIELD nodePropertiesWritten<br><br></code></pre></td></tr></table></figure><hr><h3 id="计算中心性指标"><a href="#计算中心性指标" class="headerlink" title="计算中心性指标"></a>计算中心性指标</h3><h4 id="1-PageRank"><a href="#1-PageRank" class="headerlink" title="1. PageRank"></a>1. <strong>PageRank</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">CALL gds.pageRank.<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-string">'nodeGraph'</span>, {<br>  <span class="hljs-attr">maxIterations</span>: <span class="hljs-number">20</span>,<br>  <span class="hljs-attr">dampingFactor</span>: <span class="hljs-number">0.85</span>,<br>  <span class="hljs-attr">writeProperty</span>: <span class="hljs-string">'pagerank'</span><br>});<br></code></pre></td></tr></table></figure><h4 id="2-度中心性-Degree-Centrality"><a href="#2-度中心性-Degree-Centrality" class="headerlink" title="2. 度中心性 (Degree Centrality)"></a>2. <strong>度中心性 (Degree Centrality)</strong></h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">CALL</span> gds.degree.<span class="hljs-keyword">write</span>(<span class="hljs-string">'nodeGraph'</span>, {<br>  writeProperty: <span class="hljs-string">'degree_centrality'</span><br>});<br></code></pre></td></tr></table></figure><h4 id="3-亲密中心性-Closeness-Centrality"><a href="#3-亲密中心性-Closeness-Centrality" class="headerlink" title="3. 亲密中心性 (Closeness Centrality)"></a>3. <strong>亲密中心性 (Closeness Centrality)</strong></h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">CALL</span> gds.closeness.<span class="hljs-keyword">write</span>(<span class="hljs-string">'nodeGraph'</span>, {<br>  writeProperty: <span class="hljs-string">'closeness_centrality'</span><br>});<br></code></pre></td></tr></table></figure><h4 id="4-介数中心性-Betweenness-Centrality"><a href="#4-介数中心性-Betweenness-Centrality" class="headerlink" title="4. 介数中心性 (Betweenness Centrality)"></a>4. <strong>介数中心性 (Betweenness Centrality)</strong></h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">CALL</span> gds.betweenness.<span class="hljs-keyword">write</span>(<span class="hljs-string">'nodeGraph'</span>, {<br>  writeProperty: <span class="hljs-string">'betweenness_centrality'</span><br>});<br></code></pre></td></tr></table></figure><hr><h3 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">MATCH (n:Node)<br><span class="hljs-keyword">RETURN</span> <br>  n.address <span class="hljs-keyword">AS</span> Address,<br>  n.pagerank <span class="hljs-keyword">AS</span> PageRank,<br>  n.degree_centrality <span class="hljs-keyword">AS</span> DegreeCentrality,<br>  n.closeness_centrality <span class="hljs-keyword">AS</span> ClosenessCentrality,<br>  n.betweenness_centrality <span class="hljs-keyword">AS</span> BetweennessCentrality<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> PageRank <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">╒═════════════╤═══════════════════╤════════════════╤═══════════════════╤═════════════════════╕<br>│<span class="hljs-variable">Address</span>      │<span class="hljs-variable">PageRank</span>           │<span class="hljs-built_in">DegreeCentrality</span>│<span class="hljs-built_in">ClosenessCentrality</span>│<span class="hljs-built_in">BetweennessCentrality</span>│<br>╞═════════════╪═══════════════════╪════════════════╪═══════════════════╪═════════════════════╡<br>│<span class="hljs-string">"10.104.0.73"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.105.0.71"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.105.0.72"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.101.0.73"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.103.0.71"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.101.0.71"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.107.0.73"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.108.0.73"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.107.0.71"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.103.0.73"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.106.0.71"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.101.0.72"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.104.0.71"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.109.0.72"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.109.0.73"</span>│<span class="hljs-number">0.17143947585331437</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">1.0</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.103.0.72"</span>│<span class="hljs-number">0.16639351504031516</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.102.0.73"</span>│<span class="hljs-number">0.16639351504031516</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.102.0.71"</span>│<span class="hljs-number">0.16639351504031516</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.107.0.72"</span>│<span class="hljs-number">0.16638840173142871</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.106.0.73"</span>│<span class="hljs-number">0.16638840173142871</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.100.0.72"</span>│<span class="hljs-number">0.16638840173142871</span>│<span class="hljs-number">28.0</span>            │<span class="hljs-number">1.0</span>                │<span class="hljs-number">6.833333333333333</span>    │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.104.0.73"</span>│<span class="hljs-number">0.16620703459522992</span>│<span class="hljs-number">27.0</span>            │<span class="hljs-number">1.0</span>                │<span class="hljs-number">4.166666666666666</span>    │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.102.0.72"</span>│<span class="hljs-number">0.16620703459522992</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.109.0.71"</span>│<span class="hljs-number">0.16532947619296923</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.100.0.72"</span>│<span class="hljs-number">0.16532947619296923</span>│<span class="hljs-number">23.0</span>            │<span class="hljs-number">1.0</span>                │<span class="hljs-number">2.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.105.0.73"</span>│<span class="hljs-number">0.16532947619296923</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.108.0.71"</span>│<span class="hljs-number">0.16532947619296923</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.104.0.72"</span>│<span class="hljs-number">0.16532947619296923</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.8</span>                │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.100.0.74"</span>│<span class="hljs-number">0.16028351537997002</span>│<span class="hljs-number">27.0</span>            │<span class="hljs-number">0.75</span>               │<span class="hljs-number">2.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.106.0.72"</span>│<span class="hljs-number">0.16009703493488484</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.6666666666666666</span> │<span class="hljs-number">0.0</span>                  │<br>├─────────────┼───────────────────┼────────────────┼───────────────────┼─────────────────────┤<br>│<span class="hljs-string">"10.108.0.72"</span>│<span class="hljs-number">0.16009703493488484</span>│<span class="hljs-number">0.0</span>             │<span class="hljs-number">0.6666666666666666</span> │<span class="hljs-number">0.0</span>                  │<br>└─────────────┴───────────────────┴────────────────┴───────────────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p>```</p>]]></content>
    
    
    <summary type="html">计算PageRank、度中心性、亲密中心性、介数中心性和各节点的度数</summary>
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Neo4j" scheme="https://zhongye1.github.io/Arknight-notes/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>SITE-193</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/4183.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/4183.html</id>
    <published>2025-03-31T08:44:24.000Z</published>
    <updated>2025-06-10T02:02:37.883Z</updated>
    
    <content type="html"><![CDATA[<p class='item-img' data-src='https://pic1.zhimg.com/v2-842db2fbcdb441bd2562cf457f8192b4_r.jpg'><img src="https://pic1.zhimg.com/v2-842db2fbcdb441bd2562cf457f8192b4_r.jpg" alt="img"></p><span id="more"></span><h2 id="Zhongye"><a href="#Zhongye" class="headerlink" title="Zhongye"></a>Zhongye</h2><p> <em>/From an Open Source Organization in Guangzhou-University*</em></p><p><em><a href="https://github.com/Guangzhou-University-SITE-193">https://github.com/Guangzhou-University-SITE-193</a></em></p><h2 id="💻-Skills"><a href="#💻-Skills" class="headerlink" title="💻 Skills"></a>💻 Skills</h2><p>🥪 <strong>Front End</strong> / 🥗 <strong>Backend</strong> / 🍊 <strong>Network Security</strong> / 🍑 <strong>Machine Learning</strong></p><h2 id="📋-Tech-Stack"><a href="#📋-Tech-Stack" class="headerlink" title="📋 Tech Stack"></a>📋 Tech Stack</h2><p class='item-img' data-src='https://skillicons.dev/icons?i=py,c,java,html,css,js,vscode,git,powershell,docker,arch,windows&theme=light'><img align="center" src="https://skillicons.dev/icons?i=py,c,java,html,css,js,vscode,git,powershell,docker,arch,windows&theme=light" /></p><h3 id="关注站长博客！"><a href="#关注站长博客！" class="headerlink" title="关注站长博客！"></a>关注站长博客！</h3><p>本站：         <a href="https://zhongye1.github.io/Arknight-notes/">https://zhongye1.github.io/Arknight-notes/</a></p><p>本站RSS订阅：  <a href="https://zhongye1.github.io/Arknight-notes/rss.xml">https://zhongye1.github.io/Arknight-notes/rss.xml</a></p><p>主站：         <a href="https://zhongye1.github.io">https://zhongye1.github.io</a></p><p>主站RSS订阅：  <a href="https://zhongye1.github.io/atom.xml">https://zhongye1.github.io/atom.xml</a></p><p>193工作站：      <a href="https://github.com/Guangzhou-University-SITE-193">https://github.com/Guangzhou-University-SITE-193</a></p><p>GitHub：       <a href="https://github.com/Zhongye1">https://github.com/Zhongye1</a></p><p>QQ：2760913192</p><h3 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h3><p>用于做归档页面整理和知识储备，建设中</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-842db2fbcdb441bd2562cf457f8192b4_r.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>2024一些笔记（常微分）</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/40883.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/40883.html</id>
    <published>2025-03-09T14:51:00.000Z</published>
    <updated>2025-04-03T06:22:53.786Z</updated>
    
    <content type="html"><![CDATA[<p>2024的一些笔记（常微分）（共20张）</p><p class='item-img' data-src='https://picx.zhimg.com/80/v2-46b61367748a0b9ca84ad8e77800887f_720w.webp'><img src="https://picx.zhimg.com/80/v2-46b61367748a0b9ca84ad8e77800887f_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-bff8d14c462a0bc3c12ab228b3738c28_720w.webp'><img src="https://pic1.zhimg.com/80/v2-bff8d14c462a0bc3c12ab228b3738c28_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic2.zhimg.com/80/v2-72f2d63ff8c1e8897791c961ceb9fce5_720w.webp'><img src="https://pic2.zhimg.com/80/v2-72f2d63ff8c1e8897791c961ceb9fce5_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-55bbe4dbab38a31b64c54120d720fbfd_720w.webp'><img src="https://pic4.zhimg.com/80/v2-55bbe4dbab38a31b64c54120d720fbfd_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-28eb6637c83c134d95626532f0811970_720w.webp'><img src="https://pic1.zhimg.com/80/v2-28eb6637c83c134d95626532f0811970_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-d7f8da6dbf19f664c75bcf0af2e421aa_720w.webp'><img src="https://pic1.zhimg.com/80/v2-d7f8da6dbf19f664c75bcf0af2e421aa_720w.webp" alt="img"></p><p class='item-img' data-src='https://picx.zhimg.com/80/v2-09e62700abf7a00e674ccf9e2871eaa9_720w.webp'><img src="https://picx.zhimg.com/80/v2-09e62700abf7a00e674ccf9e2871eaa9_720w.webp" alt="img"></p><p class='item-img' data-src='https://picx.zhimg.com/80/v2-0711f3581b0d3da93f373e6ae671528d_720w.webp'><img src="https://picx.zhimg.com/80/v2-0711f3581b0d3da93f373e6ae671528d_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic3.zhimg.com/80/v2-1d8db7dd9bfe18f1a88a6554ac54a2d6_720w.webp'><img src="https://pic3.zhimg.com/80/v2-1d8db7dd9bfe18f1a88a6554ac54a2d6_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-1f9b72a957cc336f2723f5e5b1200c3f_720w.webp'><img src="https://pic4.zhimg.com/80/v2-1f9b72a957cc336f2723f5e5b1200c3f_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-dae1d6757d38da31d0268806b0d8671b_720w.webp'><img src="https://pic4.zhimg.com/80/v2-dae1d6757d38da31d0268806b0d8671b_720w.webp" alt="img"></p><p class='item-img' data-src='https://pica.zhimg.com/80/v2-d7a44ef4db3aecd61ac7703db973e3e6_720w.webp'><img src="https://pica.zhimg.com/80/v2-d7a44ef4db3aecd61ac7703db973e3e6_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic2.zhimg.com/80/v2-8f264542c42648239218b08f2d2a3147_720w.webp'><img src="https://pic2.zhimg.com/80/v2-8f264542c42648239218b08f2d2a3147_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-62154c0fa582d94c3f19afa13a39914d_720w.webp'><img src="https://pic4.zhimg.com/80/v2-62154c0fa582d94c3f19afa13a39914d_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic3.zhimg.com/80/v2-2186401cfa936f05461fd316b74d521e_720w.webp'><img src="https://pic3.zhimg.com/80/v2-2186401cfa936f05461fd316b74d521e_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-68efd565744e3aa4f07bebded81d5f1b_720w.webp'><img src="https://pic4.zhimg.com/80/v2-68efd565744e3aa4f07bebded81d5f1b_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-e0d6d5588780012eaa9be2efb9820826_720w.webp'><img src="https://pic1.zhimg.com/80/v2-e0d6d5588780012eaa9be2efb9820826_720w.webp" alt="img"></p><p class='item-img' data-src='https://picx.zhimg.com/80/v2-6e20a5989b7616decf7100d284f7c1cf_720w.webp'><img src="https://picx.zhimg.com/80/v2-6e20a5989b7616decf7100d284f7c1cf_720w.webp" alt="img"></p><p class='item-img' data-src='https://pica.zhimg.com/80/v2-eda6b00705f475fe29811605e5504a3e_720w.webp'><img src="https://pica.zhimg.com/80/v2-eda6b00705f475fe29811605e5504a3e_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic3.zhimg.com/80/v2-e1ccc9db6bf01835178384d0b01493b2_720w.webp'><img src="https://pic3.zhimg.com/80/v2-e1ccc9db6bf01835178384d0b01493b2_720w.webp" alt="img"><br>ebp)</p>]]></content>
    
    
    <summary type="html">另外抽空整理的一些</summary>
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="常微分" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E5%B8%B8%E5%BE%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>2024一些笔记（概率论）</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/20561.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/20561.html</id>
    <published>2025-03-09T14:51:00.000Z</published>
    <updated>2025-04-03T06:22:53.776Z</updated>
    
    <content type="html"><![CDATA[<p>2024的一些笔记（概率论）（共18张）</p><hr><p class='item-img' data-src='https://pica.zhimg.com/80/v2-04d0311fa8c90603ec9b304c1c5f7636_720w.webp'><img src="https://pica.zhimg.com/80/v2-04d0311fa8c90603ec9b304c1c5f7636_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic3.zhimg.com/80/v2-861ad585ca6cda1a5e4c42840b262cb4_720w.webp'><img src="https://pic3.zhimg.com/80/v2-861ad585ca6cda1a5e4c42840b262cb4_720w.webp" alt="img"></p><p class='item-img' data-src='https://pica.zhimg.com/80/v2-0f6fca5c26fc8711bb543e61aa8522fa_720w.webp'><img src="https://pica.zhimg.com/80/v2-0f6fca5c26fc8711bb543e61aa8522fa_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic2.zhimg.com/80/v2-e4e0ed6e607a63b2c6c31791940bf46d_720w.webp'><img src="https://pic2.zhimg.com/80/v2-e4e0ed6e607a63b2c6c31791940bf46d_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic3.zhimg.com/80/v2-1f1588fd58cd94201e4d9ddd313f0434_720w.webp'><img src="https://pic3.zhimg.com/80/v2-1f1588fd58cd94201e4d9ddd313f0434_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic2.zhimg.com/80/v2-fb9eab8d8a0adcf4585a88a641ffc025_720w.webp'><img src="https://pic2.zhimg.com/80/v2-fb9eab8d8a0adcf4585a88a641ffc025_720w.webp" alt="img"></p><p class='item-img' data-src='https://pica.zhimg.com/80/v2-25339614d611ab591671535ed41fb2fc_720w.webp'><img src="https://pica.zhimg.com/80/v2-25339614d611ab591671535ed41fb2fc_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic3.zhimg.com/80/v2-fa021e9b5f501d077ae6125f236b4a46_720w.webp'><img src="https://pic3.zhimg.com/80/v2-fa021e9b5f501d077ae6125f236b4a46_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-32bb1caff36b8b966294cf1171fed8ee_720w.webp'><img src="https://pic1.zhimg.com/80/v2-32bb1caff36b8b966294cf1171fed8ee_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-8a7b0c0991dc2f527a83d10b197851b8_720w.webp'><img src="https://pic1.zhimg.com/80/v2-8a7b0c0991dc2f527a83d10b197851b8_720w.webp" alt="img"></p><p class='item-img' data-src='https://picx.zhimg.com/80/v2-c9f94c7e04aad4d8ad1d22583c0d593b_720w.webp'><img src="https://picx.zhimg.com/80/v2-c9f94c7e04aad4d8ad1d22583c0d593b_720w.webp" alt="img"></p><p class='item-img' data-src='https://pica.zhimg.com/80/v2-8459499e17ee5f58790bcef4663469fc_720w.webp'><img src="https://pica.zhimg.com/80/v2-8459499e17ee5f58790bcef4663469fc_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-7984fb0d9806e3bd9077e4a4bca05f58_720w.webp'><img src="https://pic1.zhimg.com/80/v2-7984fb0d9806e3bd9077e4a4bca05f58_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic3.zhimg.com/80/v2-64700ff148e27b071eb152eaf84a9160_720w.webp'><img src="https://pic3.zhimg.com/80/v2-64700ff148e27b071eb152eaf84a9160_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-d8677ce9ccb42b4672c03aaf9d527be8_720w.webp'><img src="https://pic1.zhimg.com/80/v2-d8677ce9ccb42b4672c03aaf9d527be8_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-863fd9f5b3f09b17de45172a4b7466da_720w.webp'><img src="https://pic1.zhimg.com/80/v2-863fd9f5b3f09b17de45172a4b7466da_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic2.zhimg.com/80/v2-ec9691e917fe807ab7db12fcdb6c21b5_720w.webp'><img src="https://pic2.zhimg.com/80/v2-ec9691e917fe807ab7db12fcdb6c21b5_720w.webp" alt="img"></p><p class='item-img' data-src='https://picx.zhimg.com/80/v2-4aca80833c2cf44b48d5767ea940c197_720w.webp'><img src="https://picx.zhimg.com/80/v2-4aca80833c2cf44b48d5767ea940c197_720w.webp" alt="img"></p><p>bp)</p>]]></content>
    
    
    <summary type="html">抽空整理的一些</summary>
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="概率论" scheme="https://zhongye1.github.io/Arknight-notes/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>爬虫实战-爬取广州大学课程表</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/33971.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/33971.html</id>
    <published>2025-03-01T06:55:48.000Z</published>
    <updated>2025-04-03T06:22:53.773Z</updated>
    
    <content type="html"><![CDATA[<p><em>大二上在学python，所以想要用python实现一下课表爬取。</em></p><p><em>（虽然python开课爬虫不怎么讲的都</em></p><p><em>本文仅供学习使用。</em> </p><h1 id="广州大学课程信息查询脚本"><a href="#广州大学课程信息查询脚本" class="headerlink" title="广州大学课程信息查询脚本"></a>广州大学课程信息查询脚本</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>本脚本用于自动化登录广州大学教务系统，获取当前学期课程信息，主要功能包括：</p><ul><li>通过浏览器自动化（Selenium）模拟用户登录，绕过滑块验证。</li><li>使用获取的Cookie通过<code>requests</code>库发送API请求，获取课程数据。</li><li>结构化处理课程信息，并导出为JSON和CSV格式文件。</li></ul><hr><h2 id="2-环境依赖"><a href="#2-环境依赖" class="headerlink" title="2. 环境依赖"></a>2. 环境依赖</h2><h3 id="2-1-运行环境"><a href="#2-1-运行环境" class="headerlink" title="2.1 运行环境"></a>2.1 运行环境</h3><ul><li><p><strong>Python 3.7+</strong></p></li><li><p>依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install selenium requests pandas<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><ul><li>手动输入学号密码（脚本运行时会提示），查询时段的配置请求参数</li><li>后期待完善（</li></ul><hr><h2 id="3-功能模块"><a href="#3-功能模块" class="headerlink" title="3. 功能模块"></a>3. 功能模块</h2><h3 id="3-1-登录模块"><a href="#3-1-登录模块" class="headerlink" title="3.1 登录模块"></a>3.1 登录模块</h3><h4 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h4><ul><li>通过Selenium启动浏览器，访问教务系统登录页面。</li><li>自动填充学号、密码，并绕过滑块验证。</li><li>判断登录状态，成功后保存Cookie供后续请求使用。</li></ul><h4 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h4><ul><li>学号（<code>login_username</code>）</li><li>密码（<code>login_password</code>）</li></ul><h4 id="关键逻辑"><a href="#关键逻辑" class="headerlink" title="关键逻辑"></a>关键逻辑</h4><ul><li><strong>浏览器配置</strong>：禁用自动化检测标志（<code>excludeSwitches: ['enable-automation']</code>），防止被识别为爬虫。</li><li><strong>滑块验证绕过</strong>：通过执行JavaScript代码<code>navigator.webdriver = false</code>。</li><li><strong>登录状态检查</strong>：通过页面元素或关键词（如<code>登录成功</code>）判断是否登录成功。</li></ul><hr><h3 id="3-2-课程数据获取模块"><a href="#3-2-课程数据获取模块" class="headerlink" title="3.2 课程数据获取模块"></a>3.2 课程数据获取模块</h3><h4 id="功能描述-1"><a href="#功能描述-1" class="headerlink" title="功能描述"></a>功能描述</h4><ul><li><p>使用<code>requests</code>库发送POST请求，携带登录后的Cookie和参数，获取课程数据。</p></li><li><p>数据接口：<code>http://jwxt.gzhu.edu.cn/jwglxt/kbcx/xskbcx_cxXsgrkb.html</code>（F12大法</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/03/01/67c2b8ec8a7cc.png'><img src="https://free-img.400040.xyz/4/2025/03/01/67c2b8ec8a7cc.png" alt=""></p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/03/01/67c2b96c96a63.png'><img src="https://free-img.400040.xyz/4/2025/03/01/67c2b96c96a63.png" alt=""></p></li></ul><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">data = {<br>    <span class="hljs-string">"xnm"</span>: <span class="hljs-string">"2024"</span>,     <span class="hljs-comment"># 学年（2024表示2023-2024学年）</span><br>    <span class="hljs-string">"kzlx"</span>: <span class="hljs-string">"ck"</span>,      <span class="hljs-comment"># 查询类型（ck=查看）</span><br>    <span class="hljs-string">"xsdm"</span>: <span class="hljs-string">""</span>,        <span class="hljs-comment"># 学生代码（留空）</span><br>    <span class="hljs-string">"xqm"</span>: <span class="hljs-string">"3"</span>         <span class="hljs-comment"># 学期码（3表示秋季学期）</span><br>}<br></code></pre></td></tr></table></figure><h4 id="请求头（Headers）"><a href="#请求头（Headers）" class="headerlink" title="请求头（Headers）"></a>请求头（Headers）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = {<br>    <span class="hljs-string">"User-Agent"</span>: <span class="hljs-string">"Mozilla/5.0 ..."</span>,  <span class="hljs-comment"># 模拟浏览器请求</span><br>    <span class="hljs-string">"Referer"</span>: <span class="hljs-string">"http://jwxt.gzhu.edu.cn/..."</span>,  <span class="hljs-comment"># 来源页面</span><br>    <span class="hljs-string">"X-Requested-With"</span>: <span class="hljs-string">"XMLHttpRequest"</span>       <span class="hljs-comment"># 标识AJAX请求</span><br>}<br></code></pre></td></tr></table></figure><hr><h3 id="3-3-数据处理与导出模块"><a href="#3-3-数据处理与导出模块" class="headerlink" title="3.3 数据处理与导出模块"></a>3.3 数据处理与导出模块</h3><h4 id="功能描述-2"><a href="#功能描述-2" class="headerlink" title="功能描述"></a>功能描述</h4><ol><li><p><strong>JSON数据处理</strong></p><ul><li>从原始响应中提取关键字段（如课程名称<code>kcmc</code>、教室<code>cdmc</code>、节次<code>jc</code>）。</li><li>映射星期代码（<code>xqjmcMap</code>）为中文（如<code>1 → 周一</code>）。</li><li>保存结构化的JSON文件（<code>extracted_courses.json</code>）。</li></ul></li><li><p><strong>CSV导出</strong></p><ul><li><p>使用<code>pandas</code>将JSON数据转换为表格形式。</p></li><li><p>添加中文表头（如“课程名称”、“教室”）。</p></li><li><p>导出为CSV文件（<code>courses.csv</code>），兼容Excel打开。</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/03/01/67c2b36edf98c.png'><img src="https://free-img.400040.xyz/4/2025/03/01/67c2b36edf98c.png" style="zoom:50%;"></p></li></ul></li></ol><h4 id="字段映射表"><a href="#字段映射表" class="headerlink" title="字段映射表"></a>字段映射表</h4><div class="table-container"><table><thead><tr><th style="text-align:center">原始字段</th><th style="text-align:center">中文表头</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>kcmc</code></td><td style="text-align:center">课程名称</td><td style="text-align:center">课程全称</td></tr><tr><td style="text-align:center"><code>cdmc</code></td><td style="text-align:center">教室</td><td style="text-align:center">上课地点</td></tr><tr><td style="text-align:center"><code>jc</code></td><td style="text-align:center">节数</td><td style="text-align:center">课程节次（如1-2节）</td></tr><tr><td style="text-align:center"><code>xqjmc</code></td><td style="text-align:center">日期</td><td style="text-align:center">星期几（周一至日）</td></tr><tr><td style="text-align:center"><code>kcxszc</code></td><td style="text-align:center">课时安排</td><td style="text-align:center">周次范围（如1-16周）</td></tr></tbody></table></div><hr><h2 id="4-代码详解"><a href="#4-代码详解" class="headerlink" title="4. 代码详解"></a>4. 代码详解</h2><h3 id="4-1-登录流程"><a href="#4-1-登录流程" class="headerlink" title="4.1 登录流程"></a>4.1 登录流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 防止打开浏览器后闪退</span><br>options = webdriver.ChromeOptions()<br>options.add_experimental_option(<span class="hljs-string">'detach'</span>, <span class="hljs-literal">True</span>)<br><span class="hljs-comment"># options.add_argument('--headless')  # 无头模式</span><br><br><span class="hljs-comment"># 开发者模式，防止被各大网站识别出来使用了Selenium</span><br>options.add_experimental_option(<span class="hljs-string">'excludeSwitches'</span>, [<span class="hljs-string">'enable-automation'</span>])<br><br><span class="hljs-comment"># 启动浏览器</span><br>browser = webdriver.Chrome(options=options)<br>browser.get(login_url)<br><br><span class="hljs-comment"># 绕过滑块验证</span><br>browser.execute_script(<span class="hljs-string">'Object.defineProperties(navigator,{webdriver:{get:()=&gt;false}})'</span>)<br><br><span class="hljs-comment"># 查找用户名和密码输入框所在元素</span><br>username_input = browser.find_element(By.ID, <span class="hljs-string">'un'</span>)<br>username_input.click()<br>username_input.send_keys(login_username)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 等待响应</span><br>time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 输入信息模拟登录</span><br>password_input = browser.find_element(By.XPATH, <span class="hljs-string">"//input[@name='pd']"</span>)<br>password_input.click()<br>password_input.send_keys(login_password)<br><br>login_button = browser.find_element(By.ID, <span class="hljs-string">'index_login_btn'</span>)<br>login_button.click()<br><br>time.sleep(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 检查登录是否成功</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">'登录成功'</span> <span class="hljs-keyword">in</span> browser.page_source <span class="hljs-keyword">or</span> <span class="hljs-string">'index_login_btn'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> browser.page_source:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"登录成功"</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"登录失败"</span>)<br><br>cookies = browser.get_cookies()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Cookies:"</span>, cookies)<br><br>cookie_dict = {cookie[<span class="hljs-string">'name'</span>]: cookie[<span class="hljs-string">'value'</span>] <span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> cookies}<br><br><span class="hljs-comment"># 关闭浏览器</span><br>browser.quit()<br></code></pre></td></tr></table></figure><h3 id="4-2-数据请求"><a href="#4-2-数据请求" class="headerlink" title="4.2 数据请求"></a>4.2 数据请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 请求头</span><br>headers = {<br>    <span class="hljs-string">"Accept"</span>: <span class="hljs-string">"*/*"</span>,<br>    <span class="hljs-string">"Accept-Encoding"</span>: <span class="hljs-string">"gzip, deflate"</span>,<br>    <span class="hljs-string">"Accept-Language"</span>: <span class="hljs-string">"zh-CN,zh;q=0.9"</span>,<br>    <span class="hljs-string">"Connection"</span>: <span class="hljs-string">"keep-alive"</span>,<br>    <span class="hljs-string">"Content-Length"</span>: <span class="hljs-string">"28"</span>,<br>    <span class="hljs-string">"Content-Type"</span>: <span class="hljs-string">"application/x-www-form-urlencoded;charset=UTF-8"</span>,<br>    <span class="hljs-string">"Host"</span>: <span class="hljs-string">"jwxt.gzhu.edu.cn"</span>,<br>    <span class="hljs-string">"Origin"</span>: <span class="hljs-string">"http://jwxt.gzhu.edu.cn"</span>,<br>    <span class="hljs-string">"Referer"</span>: <span class="hljs-string">"http://jwxt.gzhu.edu.cn/jwglxt/kbcx/xskbcx_cxXskbcxIndex.html?gnmkdm=███████&amp;layout=default"</span>,<br>    <span class="hljs-string">"User-Agent"</span>: <span class="hljs-string">"Mozilla/███████ (Windows NT ███████; Win64; x64) AppleWebKit/███████ (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"</span>,<br>    <span class="hljs-string">"X-Requested-With"</span>: <span class="hljs-string">"XMLHttpRequest"</span><br>}<br><br><span class="hljs-comment"># 表单数据(学年和学期)</span><br>data = {<br>    <span class="hljs-string">"xnm"</span>: <span class="hljs-string">"2024"</span>,<br>    <span class="hljs-string">"kzlx"</span>: <span class="hljs-string">"ck"</span>,<br>    <span class="hljs-string">"xsdm"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-string">"xqm"</span>: <span class="hljs-string">"3"</span><br>}<br><br>session = requests.Session()<br><br><span class="hljs-keyword">for</span> name, value <span class="hljs-keyword">in</span> cookie_dict.items():<br>    session.cookies.<span class="hljs-built_in">set</span>(name, value)<br><br><span class="hljs-comment"># POST请求</span><br>response = session.post(target_url, headers=headers, data=data)<br><br><span class="hljs-comment"># 检查请求是否成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-keyword">try</span>:<br>        response_data = response.json()<br>        formatted_data = json.dumps(response_data, indent=<span class="hljs-number">4</span>, ensure_ascii=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'course_schedule.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(formatted_data)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"返回的数据已经保存至course_schedule.json"</span>)<br><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"无法解析JSON数据"</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f"请求失败，状态码: <span class="hljs-subst">{response.status_code}</span>"</span>)<br></code></pre></td></tr></table></figure><h3 id="4-3-JSON数据处理"><a href="#4-3-JSON数据处理" class="headerlink" title="4.3 JSON数据处理"></a>4.3 JSON数据处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 提取字段并重构数据</span><br>courses = []<br><span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> data[<span class="hljs-string">'kbList'</span>]:<br>    course_info = {<br>        <span class="hljs-string">"课程名称"</span>: course.get(<span class="hljs-string">'kcmc'</span>, <span class="hljs-string">''</span>),<br>        <span class="hljs-string">"教室"</span>: course.get(<span class="hljs-string">'cdmc'</span>, <span class="hljs-string">''</span>),<br>        <span class="hljs-comment"># ... 其他字段映射</span><br>    }<br>    courses.append(course_info)<br></code></pre></td></tr></table></figure><h3 id="4-4-CSV导出逻辑"><a href="#4-4-CSV导出逻辑" class="headerlink" title="4.4 CSV导出逻辑"></a>4.4 CSV导出逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用pandas转换并导出</span><br>df = pd.DataFrame(courses)<br>df.to_csv(<span class="hljs-string">'courses.csv'</span>, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">'utf-8-sig'</span>)  <span class="hljs-comment"># 兼容Excel中文编码</span><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><ol><li><p><strong>滑块验证更新</strong>：若教务系统更新滑块验证逻辑，需调整JavaScript绕过代码。</p></li><li><p><strong>接口稳定性</strong>：课程查询接口（<code>xskbcx_cxXsgrkb.html</code>）若变更URL，需同步更新。</p></li></ol><hr><h2 id="6-输出示例"><a href="#6-输出示例" class="headerlink" title="6. 输出示例"></a>6. 输出示例</h2><h3 id="6-1-JSON文件（extracted-courses-json）"><a href="#6-1-JSON文件（extracted-courses-json）" class="headerlink" title="6.1 JSON文件（extracted_courses.json）"></a>6.1 JSON文件（extracted_courses.json）</h3><p>和谐了部分隐私信息（</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>            <span class="hljs-attr">"bklxdjmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"无"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"cd_id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1015170"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"cdlbmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"多媒体"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"cdmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████517"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"cxbj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"cxbjmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"无"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"date"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"二○二四年十一月十五日"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"dateDigit"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2024年11月15日"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"dateDigitSeparator"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2024-11-15"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"day"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"15"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"3-4节"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jcor"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"3-4"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jcs"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"3-4"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jgh_id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"104119"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jgpxzd"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jxb_id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1850E3A697E512CAE06███████ACA210"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jxbmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"(2024-2025-1)-216███████-01"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jxbsftkbj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"jxbzc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kcbj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"主修"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kch"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kch_id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kclb"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"专业课程平台"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kcmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"常微分方程1"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kcxszc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"理论:48"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kcxz"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"专选"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kczxs"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"48"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"khfsmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"考试"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"kkzt"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"lh"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████楼"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"listnav"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"false"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"localeKey"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"zh_CN"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"month"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"11"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"oldjc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"12"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"oldzc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"65280"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"pageTotal"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"pageable"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"pkbj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"px"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"qqqh"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"无"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"queryModel"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>                <span class="hljs-attr">"currentPage"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"currentResult"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"entityOrField"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"limit"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"offset"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"pageNo"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"pageSize"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"showCount"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"sorts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"totalCount"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"totalPage"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"totalResult"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>            <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"rangeable"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"rk"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"12"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"rsdzjs"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"sfjf"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"skfsmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"无"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"sxbj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"totalResult"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"userModel"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>                <span class="hljs-attr">"monitor"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"roleCount"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"roleKeys"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"roleValues"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"status"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"usable"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xf"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"3"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xkbz"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"无"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xnm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2024"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xqdm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xqh1"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1,2,"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xqh_id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xqj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xqjmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"星期一"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xqm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"3"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xqmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xsdm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"01"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"xslxbj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"*"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"year"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2024"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zcd"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"9-███████周"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zcmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zfjmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"主讲"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zhxs"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"3"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zxs"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"48"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zxxx"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"无"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zyfxmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zyhxkcbj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"否"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"zzrl"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"███████"</span><br>        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="6-2-CSV文件（courses-csv）"><a href="#6-2-CSV文件（courses-csv）" class="headerlink" title="6.2 CSV文件（courses.csv）"></a>6.2 CSV文件（courses.csv）</h3><div class="table-container"><table><thead><tr><th style="text-align:center">课程名称</th><th style="text-align:center">教室</th><th style="text-align:center">节数</th><th style="text-align:center">日期</th><th style="text-align:center">课时安排</th></tr></thead><tbody><tr><td style="text-align:center">常微分方程1</td><td style="text-align:center">███████</td><td style="text-align:center">3-4</td><td style="text-align:center">周一</td><td style="text-align:center">1-16周</td></tr></tbody></table></div><p class='item-img' data-src='https://free-img.400040.xyz/4/2025/03/01/67c2b36edf98c.png'><img src="https://free-img.400040.xyz/4/2025/03/01/67c2b36edf98c.png" style="zoom:50%;"></p><h2 id="7-todo"><a href="#7-todo" class="headerlink" title="7. todo"></a>7. todo</h2><ol><li><strong>可视化界面</strong>：集成<code>tkinter</code>或Web框架（如Flask）提供GUI操作。</li><li><strong>全校课表爬虫</strong></li></ol><p>�**</p>]]></content>
    
    
    <summary type="html">爬虫实战-爬取广州大学课程表</summary>
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于WSL Docker清理</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/33014.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/33014.html</id>
    <published>2025-03-01T05:54:15.000Z</published>
    <updated>2025-04-03T06:22:53.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows下释放Docker所占用的WSL磁盘空间"><a href="#Windows下释放Docker所占用的WSL磁盘空间" class="headerlink" title="Windows下释放Docker所占用的WSL磁盘空间"></a>Windows下释放Docker所占用的WSL磁盘空间</h2><p>使用下面的命令清理镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker system prune<br></code></pre></td></tr></table></figure><p>在Linux下面可以释放磁盘空间，但是在Windows下却并不能够真正的释放硬盘。</p><p>搜寻了一下，发现有一个文件超级大：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\{用户名}\AppData\Local\Docker\wsl\data\ext4.vhdx<br></code></pre></td></tr></table></figure><p>这是WSL的虚拟机文件。这个文件看起来是只增长，不回收硬盘空间的，所以，需要手动回收硬盘空间。</p><h3 id="1-停止wsl2"><a href="#1-停止wsl2" class="headerlink" title="1. 停止wsl2"></a>1. 停止wsl2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --shutdown<br></code></pre></td></tr></table></figure><h3 id="2-运行diskpart释放空间"><a href="#2-运行diskpart释放空间" class="headerlink" title="2. 运行diskpart释放空间"></a>2. 运行<a href="https://zhida.zhihu.com/search?content_id=241674682&amp;content_type=Article&amp;match_order=1&amp;q=diskpart&amp;zhida_source=entity">diskpart</a>释放空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 代码来自 https://github.com/microsoft/WSL/issues/4699#issuecomment-627133168</span><br><br>diskpart<br><span class="hljs-keyword">select</span> vdisk file=<span class="hljs-string">"C:\Users\&lt;你的用户名&gt;\AppData\Local\Docker\wsl\data\ext4.vhdx"</span><br>attach vdisk <span class="hljs-built_in">readonly</span><br>compact vdisk<br>detach vdisk<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://link.zhihu.com/?target=https%3A//gist.github.com/banyudu/af131c7bb681e8a80b5cbe2047e62d4c">WSL2 Docker释放磁盘空间</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/f7cb8d952427">wsl2 下清理 docker 占用空间</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/microsoft/WSL/issues/4699%23issuecomment-627133168">WSL 2 should automatically release disk space back to the host OS</a><br>168)</li></ul>]]></content>
    
    
    <summary type="html">Windows下释放Docker所占用的WSL磁盘空间</summary>
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>创建一个网络包解码器分析DEVP2P协议</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/20624.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/20624.html</id>
    <published>2024-11-04T08:45:19.000Z</published>
    <updated>2025-04-03T06:22:53.788Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="如果是项目组成员，请联系站长。WXID:Zhong_ye1" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">      <script id="hbeData" type="hbeData" data-hmacdigest="7b99ba59e35c062a4be7d72119013fe5705504e972baca13564ea22d3a866b02" data-keysalt="e3eabc8b9ee08a3e7f58c7ffa0cffbb26937feeaac541219e7ea307cc8eded4d" data-ivsalt="bcebf9f704d1a6171ab39d079df8adef7449d292edea7f11965274fa3e3efbaf">              </script>      <div class="hbe hbe-content">        <div class="hbe hbe-input hbe-input-default">          <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">          <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">            <span class="hbe hbe-input-label-content hbe-input-label-content-default" data-content="联系站长以查看密码">联系站长以查看密码</span>          </label>        </div>        <button class="hbe hbe-confirm"></button>      </div>    </div>    ]]></content>
    
    
    <summary type="html">创建一个网络包解码器分析DEVP2P协议</summary>
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>（旧）创建一个网络包解码器分析DEVP2P协议</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/30370.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/30370.html</id>
    <published>2024-10-14T14:53:46.000Z</published>
    <updated>2025-04-03T06:22:53.771Z</updated>
    
    <content type="html"><![CDATA[<hr><p><br><center>本项目最新版本</center></p><p> link 本项目最新版本, <a href="https://zhongye1.github.io/posts/1104.html">https://zhongye1.github.io/posts/1104.html</a>, <a href="https://pic1.zhimg.com/80/v2-593dd0a3b84d023b3827b97e81e0242a_720w.webp">https://pic1.zhimg.com/80/v2-593dd0a3b84d023b3827b97e81e0242a_720w.webp</a> </p><center>附注：此页面使用wsl构建不可行</center><h1 id="安装配置WSL2（ubuntu20-04）"><a href="#安装配置WSL2（ubuntu20-04）" class="headerlink" title="安装配置WSL2（ubuntu20.04）"></a>安装配置WSL2（ubuntu20.04）</h1><p>Windows Subsystem for Linux（简称WSL），Windows下的Linux子系统，是一个在Windows 10上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。它是由微软与Canonical公司合作开发，其目标是使纯正的Ubuntu、Debian等映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。</p><h2 id="1-安装Windows-Terminal"><a href="#1-安装Windows-Terminal" class="headerlink" title="1.安装Windows Terminal"></a>1.安装Windows Terminal</h2><p><a href="https://zhuanlan.zhihu.com/p/351281543">Window Terminal 安装以及使用(2021最新) - 知乎</a></p><p>一个目前在用的windows命令行工具</p><p>可以直接从 <a href="https://link.zhihu.com/?target=https%3A//www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701%3Frtc%3D1%26activetab%3Dpivot%3Aoverviewtab">Microsoft Store</a> 下载安装，而且<a href="https://link.zhihu.com/?target=https%3A//github.com/microsoft/terminal/releases">Github仓库</a>上发布有内部版本。 </p><h2 id="2-安装wsl"><a href="#2-安装wsl" class="headerlink" title="2.安装wsl"></a>2.安装wsl</h2><p><a href="https://blog.csdn.net/m0_51233386/article/details/127961763">Windows 10 安装配置WSL2（ubuntu20.04）教程 超详细_win10安装wsl2-CSDN博客</a></p><p>对于windows10版本可以直接命令符安装</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">wsl --install<br></code></pre></td></tr></table></figure><h3 id="设置-WSL-开发环境见微软官方文档"><a href="#设置-WSL-开发环境见微软官方文档" class="headerlink" title="设置 WSL 开发环境见微软官方文档"></a>设置 WSL 开发环境见微软官方文档</h3><h3 id="设置-WSL-开发环境-Microsoft-Learn"><a href="#设置-WSL-开发环境-Microsoft-Learn" class="headerlink" title="设置 WSL 开发环境 | Microsoft Learn"></a><a href="https://learn.microsoft.com/zh-cn/windows/wsl/setup/environment">设置 WSL 开发环境 | Microsoft Learn</a></h3><p>完成后打开Windows Terminal找到：</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2f7bd8d86.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2f7bd8d86.png" alt="pic"></p><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2f838b7b1.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2f838b7b1.png" alt="pic"></p><h2 id="3-Docker-安装"><a href="#3-Docker-安装" class="headerlink" title="3.Docker 安装"></a>3.Docker 安装</h2><blockquote><p>Docker -&gt; 虚拟化容器技术。<br>Docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行环境，容器之间互相隔离。</p></blockquote><ol><li><a href="https://www.docker.com/" title="官网地址">官网地址</a></li><li><a href="https://hub.docker.com/" title="公共仓库">公共仓库</a></li><li><p><a href="https://docs.docker.com/get-docker/" title="安装文档">安装文档</a></p></li><li><p><strong>下载Docker Desktop安装程序：</strong></p><ul><li>访问Docker官网下载页面：<a href="https://link.segmentfault.com/?enc=499FLQDYFvyYdd7cCtVu9A%3D%3D.MBdFIbVFnRUdUPcpdVZcA7hHAMCkjMVQbZW0Gwmi75DZZOEZnLuU9NNsfxJVDdlM">https://www.docker.com/get-started/</a></li><li>选择对应版本点击下载安装程序。</li><li>没猜错的话应该被墙了可以找我要安装包</li></ul></li></ol><p class='item-img' data-src='https://segmentfault.com/img/remote/1460000044606076'><img src="https://segmentfault.com/img/remote/1460000044606076" alt=""></p><ol><li><p><strong>运行安装程序：</strong></p><ul><li>双击下载的Docker Desktop安装文件。</li><li>在安装向导中，你可以根据个人喜好勾选是否希望建立Docker Desktop的快捷方式或者是否希望Docker Desktop随Windows启动等选项。</li></ul></li></ol><ol><li><p><strong>完成安装并重启：</strong></p><ul><li>完成安装向导后，重启计算机确保设置正确应用。</li></ul></li><li><p><strong>启动Docker Desktop：</strong></p><ul><li>在重启后，运行Docker Desktop。当它启动时，Docker图标会出现在系统托盘中。</li><li>系统托盘中的Docker图标表明Docker正在运行，并可能需要一点时间来启动服务。</li><li><strong>电脑要开VM虚拟化</strong></li><li><a href="https://blog.csdn.net/alwaysbefine/article/details/131277295">Windows 10 |VMware开启虚拟化的最全面说明_vmware虚拟化引擎-CSDN博客</a></li><li>开VM时BIOS不懂的不要瞎搞</li></ul></li><li><p><strong>配置Docker设置：</strong></p><ul><li>你可以右键点击系统托盘中的Docker图标，选择“Settings”来调整Docker的配置，如更改镜像存储位置、<strong>设置代理服务器</strong>等。</li></ul></li></ol><p>国内网络环境拉不下镜像的话就配置别的源<br class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2f87b1c1e.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2f87b1c1e.png" alt="pic"></p><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2f8cd2d48.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2f8cd2d48.png" alt="pic"></p><p>我用的这几个镜像站<br>配置环境要慎重</p><p>我的配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"builder"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"gc"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"defaultKeepStorage"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"20GB"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"enabled"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"experimental"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"registry-mirrors"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">"https://docker.m.daocloud.io"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">"https://huecker.io"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">"https://dockerhub.timeweb.cloud"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">"https://noohub.ru"</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></table></figure><ol><li><p><strong>通过命令行界面测试Docker安装：</strong></p><ul><li>打开命令提示符、Powershell或任何你喜欢的终端。</li><li>输入命令 <code>docker --version</code> 来检查Docker版本，确保它已正确安装。</li><li>运行 <code>docker run hello-world</code> 来下载一个测试镜像，并在容器中运行，这可以验证Docker Daemon是否已正确启动并且可以创建容器。<br class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2faa11c5f.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2faa11c5f.png" alt="pic"></li></ul></li></ol><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>准备材料</p><ul><li><strong>Lua-devp2p-wireshark-dissector</strong>: <a href="https://github.com/jmkemp20/lua-devp2p-wireshark-dissector">GitHub链接</a></li><li><strong>PYDEVP2P</strong>: <a href="https://github.com/jmkemp20/pydevp2p">GitHub链接</a></li><li><strong>Lunatic-Python</strong>: <a href="https://github.com/jmkemp20/lunatic-python">GitHub链接</a></li><li><strong>Go-Ethereum</strong>: <a href="https://github.com/jmkemp20/go-ethereum">GitHub链接</a></li><li><strong>GETH-Docker</strong>: <a href="https://github.com/jmkemp20/geth-docker">GitHub链接</a></li></ul><h4 id="1-安装Wireshark和特定版本的LUA"><a href="#1-安装Wireshark和特定版本的LUA" class="headerlink" title="1 安装Wireshark和特定版本的LUA"></a>1 安装Wireshark和特定版本的LUA</h4><p>linux的python版本要为3.10</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update &amp;&amp; sudo apt-<span class="hljs-built_in">get</span><span class="hljs-built_in"> upgrade</span><br><span class="hljs-built_in"></span>sudo apt-<span class="hljs-built_in">get</span> install lua5.2 liblua5.2-dev wireshark python3.10<br></code></pre></td></tr></table></figure><h4 id="2-更改权限并复制Lunatic-Python-LUA-⇔-Python桥接二进制文件"><a href="#2-更改权限并复制Lunatic-Python-LUA-⇔-Python桥接二进制文件" class="headerlink" title="2 更改权限并复制Lunatic Python LUA ⇔ Python桥接二进制文件"></a>2 更改权限并复制Lunatic Python LUA ⇔ Python桥接二进制文件</h4><p>python.so为文章最开始编译得来的</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo chmod +<span class="hljs-keyword">x</span> <span class="hljs-keyword">python</span>.<span class="hljs-keyword">so</span><br><span class="hljs-keyword">cp</span> <span class="hljs-keyword">python</span>.<span class="hljs-keyword">so</span> /usr/local/lib/<span class="hljs-keyword">lua</span>/<span class="hljs-number">5.2</span>/<br></code></pre></td></tr></table></figure><h2 id="关于python-so是从哪来的："><a href="#关于python-so是从哪来的：" class="headerlink" title="关于python.so是从哪来的："></a><strong>关于python.so是从哪来的：</strong></h2><p><strong>python在linux编译后的文件为.so</strong><br><strong>这个由编译Lunatic-Python: <a href="https://github.com/jmkemp20/lunatic-python">GitHub链接</a>得来</strong><br>不会编译的可以找我要我编译好的（</p><p><strong>如何编译见项目文档</strong>：</p><p>Lunatic Python 是一个双向桥接项目，它允许Python和Lua两种语言互相通信。这意味着你可以在Lua中调用Python代码，也可以在Python中调用Lua代码，甚至可以嵌套调用（如Lua中的Python再调用Lua）。这个项目的主要用途之一是为 <code>LUA-devp2p-dissector</code> 提供必要的工具，使其能够调用 <code>pydevp2p</code> 中的函数。</p><h3 id="项目起源"><a href="#项目起源" class="headerlink" title="项目起源"></a>项目起源</h3><ul><li>这个项目是一个fork版本，原始项目来自 <code>labix-lunatic-python</code>。</li><li>另一个相关的版本由 <code>bastibe</code> 维护。</li></ul><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/jmkemp20/lunatic-python.git &amp;&amp; <span class="hljs-built_in">cd</span> lunatic-python<br></code></pre></td></tr></table></figure><h4 id="确保安装了LUA-5-3"><a href="#确保安装了LUA-5-3" class="headerlink" title="确保安装了LUA 5.3"></a>确保安装了LUA 5.3</h4><p>通过运行 <code>lua5.3</code> 来检查是否已经安装了正确的LUA版本<br class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2fb14402b.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2fb14402b.png" alt="pic"></p><h4 id="查找你的Python版本"><a href="#查找你的Python版本" class="headerlink" title="查找你的Python版本"></a>查找你的Python版本</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ldconfig -<span class="hljs-keyword">p</span> | <span class="hljs-keyword">grep</span> <span class="hljs-keyword">python</span><br></code></pre></td></tr></table></figure><p>这条命令会列出系统中所有可用的Python库路径。你需要找到与你的Python版本相对应的路径。</p><h4 id="准备编译（构建）"><a href="#准备编译（构建）" class="headerlink" title="准备编译（构建）"></a>准备编译（构建）</h4><p>根据上一步输出的Python版本信息来配置CMake：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cmake -B.<span class="hljs-regexp">/build -H. -DPYTHON_INCLUDE_DIR=/u</span>sr<span class="hljs-regexp">/include/</span>python3.<span class="hljs-number">10</span> \<br>  -DPYTHON_LIBRARY=<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libpython3.<span class="hljs-number">10</span>.so<br></code></pre></td></tr></table></figure><p>使用的是Python 3.10</p><h4 id="编译（构建）"><a href="#编译（构建）" class="headerlink" title="编译（构建）"></a>编译（构建）</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cmake <span class="hljs-params">--build</span> <span class="hljs-string">./build</span><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="定位二进制文件"><a href="#定位二进制文件" class="headerlink" title="定位二进制文件"></a>定位二进制文件</h4><p>构建完成后，你会在 <code>build/bin/</code> 目录下找到两个重要的文件：</p><ul><li><code>python.so</code> 用于在Lua中调用Python</li><li><code>lua.so</code> 用于在Python中调用Lua</li><li>找不到直接搜</li></ul><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2fb4591cd.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2fb4591cd.png" alt="pic"></p><p>然后把编译好的文件移到论文提到的目录下（见上文<br class='item-img' data-src='./C:/Users/Think/Desktop/大学项目其三/环境安装/Pasted image 20241014220542.png'><img src="./C:/Users/Think/Desktop/大学项目其三/环境安装/Pasted image 20241014220542.png" alt="pic"></p><h4 id="3-克隆LUA解码器和PYDEVP2P项目"><a href="#3-克隆LUA解码器和PYDEVP2P项目" class="headerlink" title="3 克隆LUA解码器和PYDEVP2P项目"></a>3 克隆LUA解码器和PYDEVP2P项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/jmkemp20/lua-devp2p-wireshark-dissector.git<br>git <span class="hljs-built_in">clone</span> https://github.com/jmkemp20/pydevp2p.git<br></code></pre></td></tr></table></figure><h4 id="4-从源代码安装PYDEVP2P-PIP包"><a href="#4-从源代码安装PYDEVP2P-PIP包" class="headerlink" title="4 从源代码安装PYDEVP2P PIP包"></a>4 从源代码安装PYDEVP2P PIP包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> pydevp2p<br>pip install -e .<br><span class="hljs-built_in">sudo</span> pip install -e .<br></code></pre></td></tr></table></figure><h4 id="5-创建Wireshark插件目录（本地用户和root）"><a href="#5-创建Wireshark插件目录（本地用户和root）" class="headerlink" title="5 创建Wireshark插件目录（本地用户和root）"></a>5 创建Wireshark插件目录（本地用户和root）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.local/lib/wireshark/plugins<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /usr/local/lib/wireshark/plugins<br></code></pre></td></tr></table></figure><h4 id="Step-6-符号链接或复制-lua解码器文件到Wireshark插件目录"><a href="#Step-6-符号链接或复制-lua解码器文件到Wireshark插件目录" class="headerlink" title="Step 6) 符号链接或复制.lua解码器文件到Wireshark插件目录"></a>Step 6) 符号链接或复制.lua解码器文件到Wireshark插件目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s &lt;location of cloned dissector&gt;/rlpx.lua ~/.local/lib/wireshark/plugins/rlpx.lua<br><span class="hljs-built_in">ln</span> -s &lt;location of cloned dissector&gt;/discovery.lua ~/.local/lib/wireshark/plugins/discovery.lua<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s &lt;location of cloned dissector&gt;/rlpx.lua /usr/local/lib/wireshark/plugins/rlpx.lua<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s &lt;location of cloned dissector&gt;/discovery.lua /usr/local/lib/wireshark/plugins/discovery.lua<br></code></pre></td></tr></table></figure><p><strong>可以直接复制这些.lua文件而不是创建符号链接</strong>。<br>终端里找不到文件用文件资源管理器搜</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2fb720710.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2fb720710.png" alt="pic"></p><p>好的，你提供的步骤是安装自定义的 Go Ethereum 客户端。以下是详细的步骤来从头开始安装和运行自定义的 Go Ethereum 客户端：</p><h3 id="Live-GETH-Docker-Startup"><a href="#Live-GETH-Docker-Startup" class="headerlink" title="Live GETH Docker Startup"></a>Live GETH Docker Startup</h3><h4 id="Step-1-确保Docker和Docker-Compose已安装并正在运行"><a href="#Step-1-确保Docker和Docker-Compose已安装并正在运行" class="headerlink" title="Step 1) 确保Docker和Docker Compose已安装并正在运行"></a>Step 1) 确保Docker和Docker Compose已安装并正在运行</h4><p>检查Docker版本：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2fbc87f5d.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2fbc87f5d.png" alt="pic"></p><p>检查Docker Compose版本：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2fbf0229a.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2fbf0229a.png" alt="pic"></p><h4 id="Step-2-克隆GETH-Docker存储库"><a href="#Step-2-克隆GETH-Docker存储库" class="headerlink" title="Step 2) 克隆GETH-Docker存储库"></a>Step 2) 克隆GETH-Docker存储库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/jmkemp20/geth-docker.git<br><span class="hljs-built_in">cd</span> geth-docker<br></code></pre></td></tr></table></figure><h4 id="Step-3-构建自定义docker镜像"><a href="#Step-3-构建自定义docker镜像" class="headerlink" title="Step 3) 构建自定义docker镜像"></a>Step 3) 构建自定义docker镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./build-dockers.sh<br></code></pre></td></tr></table></figure><h4 id="Step-4-启动路由器容器"><a href="#Step-4-启动路由器容器" class="headerlink" title="Step 4) 启动路由器容器"></a>Step 4) 启动路由器容器</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d bridge-router</span><br></code></pre></td></tr></table></figure><h4 id="Step-5-打开Wireshark并连接到网络接口"><a href="#Step-5-打开Wireshark并连接到网络接口" class="headerlink" title="Step 5) 打开Wireshark并连接到网络接口"></a>Step 5) 打开Wireshark并连接到网络接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> wireshark<br></code></pre></td></tr></table></figure><h4 id="Step-6-依次启动每个GETH节点-客户端容器"><a href="#Step-6-依次启动每个GETH节点-客户端容器" class="headerlink" title="Step 6) 依次启动每个GETH节点/客户端容器"></a>Step 6) 依次启动每个GETH节点/客户端容器</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">docker-compose <span class="hljs-keyword">up</span> -d geth-ubuntu-bootnode<br>docker-compose <span class="hljs-keyword">up</span> -d geth-client-<span class="hljs-number">1</span><br>docker-compose <span class="hljs-keyword">up</span> -d geth-client-<span class="hljs-number">2</span><br>docker-compose <span class="hljs-keyword">up</span> -d geth-client-<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/09/22/66f03893a6823.png'><img src="https://free-img.400040.xyz/4/2024/09/22/66f03893a6823.png" alt="pic"></p><hr><h1 id="接下来新开一个命令行窗口来做"><a href="#接下来新开一个命令行窗口来做" class="headerlink" title="接下来新开一个命令行窗口来做"></a><strong>接下来新开一个命令行窗口来做</strong></h1><p><strong>论文原文操作：</strong></p><h3 id="7-5-Installing-the-Custom-GO-Ethereum-Client-from-Scratch"><a href="#7-5-Installing-the-Custom-GO-Ethereum-Client-from-Scratch" class="headerlink" title="7.5 Installing the Custom GO Ethereum Client from Scratch"></a>7.5 Installing the Custom GO Ethereum Client from Scratch</h3><h4 id="Step-1-克隆自定义GO-Ethereum源代码"><a href="#Step-1-克隆自定义GO-Ethereum源代码" class="headerlink" title="Step 1) 克隆自定义GO Ethereum源代码"></a>Step 1) 克隆自定义GO Ethereum源代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/jmkemp20/go-ethereum.git<br></code></pre></td></tr></table></figure><h4 id="Step-2-编译GETH或其他所有GO-Ethereum工具"><a href="#Step-2-编译GETH或其他所有GO-Ethereum工具" class="headerlink" title="Step 2) 编译GETH或其他所有GO Ethereum工具"></a>Step 2) 编译GETH或其他所有GO Ethereum工具</h4><p>编译GETH是个大坑，出问题的话可以看文档后面有讲</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> <span class="hljs-keyword">go</span>-ethereum<br><span class="hljs-keyword">make</span> geth<br></code></pre></td></tr></table></figure><h4 id="Step-3-运行GETH"><a href="#Step-3-运行GETH" class="headerlink" title="Step 3) 运行GETH"></a>Step 3) 运行GETH</h4><p>文档是</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">geth</span><br></code></pre></td></tr></table></figure><p>就行，看终端geth编译完后的输出来定，我这边的是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/build/</span>bin/geth<br></code></pre></td></tr></table></figure><p>不出问题的话终端没报错这里就成功了（一般不太可能，出问题见下</p><p>我的操作：</p><h1 id="编译geth"><a href="#编译geth" class="headerlink" title="编译geth"></a>编译geth</h1><h3 id="1-克隆自定义的-Go-Ethereum-源代码"><a href="#1-克隆自定义的-Go-Ethereum-源代码" class="headerlink" title="1. 克隆自定义的 Go Ethereum 源代码"></a>1. 克隆自定义的 Go Ethereum 源代码</h3><p>克隆自定义的 Go Ethereum 源代码仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/jmkemp20/go-ethereum.git<br></code></pre></td></tr></table></figure><h3 id="2-安装-Geth-或所有-Go-Ethereum-工具"><a href="#2-安装-Geth-或所有-Go-Ethereum-工具" class="headerlink" title="2. 安装 Geth 或所有 Go Ethereum 工具"></a>2. 安装 Geth 或所有 Go Ethereum 工具</h3><p>进入克隆的 <code>go-ethereum</code> 目录，并编译 <code>geth</code> 或所有工具。</p><h4 id="安装-Go-1-20（版本好像会影响编译，翻了下issue，我当时用的1-20"><a href="#安装-Go-1-20（版本好像会影响编译，翻了下issue，我当时用的1-20" class="headerlink" title="安装 Go 1.20（版本好像会影响编译，翻了下issue，我当时用的1.20"></a>安装 Go 1.20（版本好像会影响编译，翻了下issue，我当时用的1.20</h4><p>确保你已经安装了 Go 1.20 或更高版本。如果没有，请按照以下步骤安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 Go 1.20</span><br>wget https://mirrors.aliyun.com/golang/go1.20.6.linux-amd64.tar.gz<br><br><span class="hljs-comment"># 解压并安装</span><br><span class="hljs-built_in">sudo</span> tar -C /usr/local -xzf go1.20.6.linux-amd64.tar.gz<br><br><span class="hljs-comment"># 设置环境变量</span><br>nano ~/.bashrc<br><span class="hljs-comment"># 或者</span><br>nano ~/.zshrc<br><br><span class="hljs-comment"># 添加以下内容</span><br><span class="hljs-built_in">export</span> GOROOT=/usr/local/go<br><span class="hljs-built_in">export</span> GOPATH=<span class="hljs-variable">$HOME</span>/go<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$GOPATH</span>/bin:<span class="hljs-variable">$GOROOT</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment"># 使配置生效</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 或者</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># 验证 Go 版本</span><br>go version<br></code></pre></td></tr></table></figure><h4 id="编译-geth-或所有工具"><a href="#编译-geth-或所有工具" class="headerlink" title="编译 geth 或所有工具"></a>编译 <code>geth</code> 或所有工具</h4><p>进入 <code>go-ethereum</code> 目录并编译 <code>geth</code> 或所有工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> go-ethereum<br><br><span class="hljs-comment"># 清理 Go 模块缓存</span><br>go clean -modcache<br><br><span class="hljs-comment"># 更新 Go 模块</span><br>go mod tidy<br><br><span class="hljs-comment"># 编译 geth</span><br>make geth<br><br><span class="hljs-comment"># 如果你想编译所有工具</span><br>make all<br></code></pre></td></tr></table></figure><p><strong>如果没猜错的话国内网络环境go下载依赖会卡住</strong><br class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2eff34334.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2eff34334.png" alt="pic"><br>卡在这里</p><p>我看的教程</p><h4 id="解决-go-get-golang-org-x-包失败"><a href="#解决-go-get-golang-org-x-包失败" class="headerlink" title="解决 go get golang.org/x 包失败"></a><a href="https://www.cnblogs.com/shockerli/p/go-get-golang-org-x-solution.html" title="发布于 2019-02-24 17:24">解决 go get golang.org/x 包失败</a></h4><blockquote><p><strong>GOPROXY</strong><br>我们知道从 <code>Go 1.11</code> 版本开始，官方支持了 <code>go module</code> 包依赖管理工具。<br>其实还新增了 <code>GOPROXY</code> 环境变量。如果设置了该变量，下载源代码时将会通过这个环境变量设置的代理地址，而不再是以前的直接从代码库下载。这无疑对我等无法科学上网的开发良民来说是最大的福音。<br>更可喜的是，<a href="https://github.com/goproxyio/goproxy">goproxy.io</a> 这个开源项目帮我们实现好了我们想要的。该项目允许开发者一键构建自己的 <code>GOPROXY</code> 代理服务。同时，也提供了公用的代理服务 <code>https://goproxy.io</code>，我们只需设置该环境变量即可正常下载被墙的源码包了：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.io<br></code></pre></td></tr></table></figure><p>也可以通过置空这个环境变量来关闭，<code>export GOPROXY=</code>。</p><p>对于 Windows 用户，可以在 <code>PowerShell</code> 中设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-variable">$env</span>:GOPROXY = <span class="hljs-string">"https://goproxy.io"</span><br></code></pre></td></tr></table></figure><p>我这边这样做能正常下载</p><h3 id="3-运行-Geth"><a href="#3-运行-Geth" class="headerlink" title="3. 运行 Geth"></a>3. 运行 Geth</h3><p>编译完成后，你可以运行 <code>geth</code>。确保 <code>geth</code> 可执行文件在你的 <code>PATH</code> 中，或者直接在 <code>go-ethereum/build/bin</code> 目录下运行它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果 geth 在 PATH 中</span><br>geth<br><br><span class="hljs-comment"># 如果 geth 不在 PATH 中</span><br>./build/bin/geth<br></code></pre></td></tr></table></figure><p>成功安装并运行自定义的 Go Ethereum 客户端</p><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2fcb1430b.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2fcb1430b.png" alt="pic"></p><hr><h2 id="最后的截图"><a href="#最后的截图" class="headerlink" title="最后的截图"></a>最后的截图</h2><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2fcce60fb.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2fcce60fb.png" alt="pic"></p><p class='item-img' data-src='https://free-img.400040.xyz/4/2024/10/14/670d2fcea959a.png'><img src="https://free-img.400040.xyz/4/2024/10/14/670d2fcea959a.png" alt="pic"></p><p>g)</p>]]></content>
    
    
    <summary type="html">此文件为历史版本，仅参考用</summary>
    
    
    
    <category term="笔记" scheme="https://zhongye1.github.io/Arknight-notes/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>日志2024.9.25（待解决）</title>
    <link href="https://zhongye1.github.io/Arknight-notes/posts/13872.html"/>
    <id>https://zhongye1.github.io/Arknight-notes/posts/13872.html</id>
    <published>2024-09-25T16:49:26.000Z</published>
    <updated>2025-04-03T06:22:53.770Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="在解析rlpx时出现lua错误"><a href="#在解析rlpx时出现lua错误" class="headerlink" title="在解析rlpx时出现lua错误"></a>在解析rlpx时出现lua错误</h2><p>在帧列表中，有一个帧（编号 1561）出现了 Lua 错误。具体来说，错误信息是：“Lua Error: /root/local/lib/wireshark/plugins/rlpx.lua:97: attempt to index local ‘dec_msg’ (a nil value)”。在解码器脚本 <code>rlpx.lua</code> 的第 97 行尝试访问一个名为 <code>dec_msg</code> 的局部变量，但它是一个空值（nil），导致解码器无法成功解析数据包</p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-21289281388f179624bb09ba37c1cb60_720w.webp'><img src="https://pic1.zhimg.com/80/v2-21289281388f179624bb09ba37c1cb60_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-c9e81041466be372649c07a423f7f737_720w.webp'><img src="https://pic4.zhimg.com/80/v2-c9e81041466be372649c07a423f7f737_720w.webp" alt="img"></p><p>rlpx.lua代码如下，lua版本为Lua 5.4.7 ：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> python = <span class="hljs-built_in">require</span> <span class="hljs-string">'python'</span><br><br><span class="hljs-comment">-- Temporary for development</span><br><span class="hljs-comment">-- local sys = python.import 'sys'</span><br><span class="hljs-comment">-- sys.path.append('/home/jkemp/cs700/pydevp2p/')</span><br><span class="hljs-comment">-- End of Temporary for development</span><br><br><span class="hljs-keyword">local</span> rlpxBridge = python.import <span class="hljs-string">'pydevp2p.bridge'</span><br><br><span class="hljs-comment">-- create a new dissector</span><br><span class="hljs-keyword">local</span> NAME = <span class="hljs-string">"rlpx"</span><br><span class="hljs-keyword">local</span> PORT = <span class="hljs-number">30305</span><br><span class="hljs-keyword">local</span> rlpx = Proto(NAME, <span class="hljs-string">"Ethereum RLPx Protocol"</span>)<br><br><span class="hljs-keyword">local</span> fields = rlpx.fields<br>fields.auth_size = ProtoField.uint16(NAME .. <span class="hljs-string">".auth_size"</span>, <span class="hljs-string">"Auth Size"</span>)<br>fields.ack_size = ProtoField.uint16(NAME .. <span class="hljs-string">".ack_size"</span>, <span class="hljs-string">"Ack Size"</span>)<br>fields.body = ProtoField.bytes(NAME .. <span class="hljs-string">".body"</span>, <span class="hljs-string">"Data"</span>)<br>fields.frame_header = ProtoField.bytes(NAME .. <span class="hljs-string">".frame_header"</span>, <span class="hljs-string">"Frame Header"</span>)<br>fields.frame_body = ProtoField.bytes(NAME .. <span class="hljs-string">".frame_body"</span>, <span class="hljs-string">"Frame Body"</span>)<br><br><span class="hljs-keyword">local</span> known_ports = { <span class="hljs-number">30303</span>, <span class="hljs-number">30304</span>, <span class="hljs-number">30305</span>, <span class="hljs-number">30306</span>, <span class="hljs-number">30307</span>, <span class="hljs-number">30308</span> }<br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">table_has_value</span><span class="hljs-params">(tab, val)</span></span><br>    <span class="hljs-keyword">for</span> _, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(tab) <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> value == val <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">array_iterator</span><span class="hljs-params">(array, len)</span></span><br>    <span class="hljs-comment">-- This lets us iterate over a c object (like a python array)</span><br>    <span class="hljs-keyword">local</span> index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">local</span> count = <span class="hljs-built_in">len</span><br><br>    <span class="hljs-comment">-- The closure function is returned</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        index = index + <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> index &lt;= count<br>        <span class="hljs-keyword">then</span><br>            <span class="hljs-comment">-- return the current element of the iterator</span><br>            <span class="hljs-keyword">return</span> array[index]<br>        <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- main dissect packet function</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rlpx.dissector</span><span class="hljs-params">(tvb, pinfo, tree)</span></span><br>    <span class="hljs-keyword">local</span> subtree = tree:add(rlpx, tvb())<br>    <span class="hljs-keyword">local</span> offset = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment">-- show protocol name in protocol column</span><br>    pinfo.cols.protocol = rlpx.name<br><br>    <span class="hljs-keyword">local</span> srcaddr = <span class="hljs-built_in">tostring</span>(pinfo.src)<br>    <span class="hljs-keyword">local</span> dstaddr = <span class="hljs-built_in">tostring</span>(pinfo.dst)<br><br>    <span class="hljs-keyword">local</span> payload = <span class="hljs-built_in">tostring</span>(tvb:bytes())<br><br>    <span class="hljs-comment">-- dissect field one by one, and add to protocol tree</span><br>    <span class="hljs-keyword">local</span> auth_size = tvb(offset, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">if</span> (tvb:<span class="hljs-built_in">len</span>() - auth_size:int() == <span class="hljs-number">2</span>) <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> (table_has_value(known_ports, pinfo.src_port)) <span class="hljs-keyword">then</span><br>            <span class="hljs-comment">-- This is most likely a handshake AUTH-ACK packet</span><br>            offset = offset + <span class="hljs-number">2</span><br>            subtree:add(fields.ack_size, auth_size)<br>            pinfo.cols.info:set(pinfo.src_port .. <span class="hljs-string">" → "</span> .. pinfo.dst_port .. <span class="hljs-string">" [HANDSHAKE] AUTH ACK"</span>)<br>            <span class="hljs-comment">-- print(payload, dstNode)</span><br>            <span class="hljs-keyword">local</span> dec_msg = rlpxBridge.handleRLPxHandshakeMsg(srcaddr, dstaddr, payload, pinfo.visited, pinfo.number)<br>            <span class="hljs-keyword">local</span> payloadtree = subtree:add(fields.body, tvb(offset))<br>            payloadtree:set_text(<span class="hljs-string">"Handshake AUTH ACK"</span>)<br>            <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> array_iterator(dec_msg, dec_msg[<span class="hljs-number">0</span>]) <span class="hljs-keyword">do</span><br>                payloadtree:add(element)<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">elseif</span> (table_has_value(known_ports, pinfo.dst_port)) <span class="hljs-keyword">then</span><br>            <span class="hljs-comment">-- This is most likely a handshake AUTH packet</span><br>            offset = offset + <span class="hljs-number">2</span><br>            subtree:add(fields.auth_size, auth_size)<br>            pinfo.cols.info:set(pinfo.src_port .. <span class="hljs-string">" → "</span> .. pinfo.dst_port .. <span class="hljs-string">" [HANDSHAKE] AUTH INIT"</span>)<br>            <span class="hljs-comment">-- print(payload, dstNode)</span><br>            <span class="hljs-keyword">local</span> dec_msg = rlpxBridge.handleRLPxHandshakeMsg(srcaddr, dstaddr, payload, pinfo.visited, pinfo.number)<br>            <span class="hljs-keyword">local</span> payloadtree = subtree:add(fields.body, tvb(offset))<br>            <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> array_iterator(dec_msg, dec_msg[<span class="hljs-number">0</span>]) <span class="hljs-keyword">do</span><br>                payloadtree:add(element)<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span><br>            subtree:add(fields.body, tvb(offset))<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">local</span> dec_msg = rlpxBridge.handleRLPxMsg(srcaddr, dstaddr, payload, pinfo.visited, pinfo.number)<br>        <span class="hljs-keyword">local</span> frame_header = dec_msg[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">local</span> frame_body = dec_msg[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">local</span> frame_type = dec_msg[<span class="hljs-number">2</span>]<br>        <span class="hljs-comment">-- Set the column information to the Frame Type</span><br>        <span class="hljs-keyword">if</span> frame_type ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br>            pinfo.cols.info:set(pinfo.src_port .. <span class="hljs-string">" → "</span> .. pinfo.dst_port .. <span class="hljs-string">" "</span> .. frame_type)<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-comment">-- Show the frame header information (if available) in Wireshark</span><br>        <span class="hljs-keyword">if</span> frame_header ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">local</span> frame_header_tree = subtree:add(fields.frame_header, tvb(<span class="hljs-number">0</span>, frame_header.headerSize))<br>            frame_header_tree:add(<span class="hljs-string">"Decrypted Header Data:"</span>, frame_header.header)<br>            frame_header_tree:add(<span class="hljs-string">"Header MAC:"</span>, frame_header.headerMac)<br>            frame_header_tree:add(<span class="hljs-string">"Frame Body MAC:"</span>, frame_header.frameMac)<br>            frame_header_tree:add(<span class="hljs-string">"Frame Size:"</span>, frame_header.frameSize)<br>            frame_header_tree:add(<span class="hljs-string">"Read Size:"</span>, frame_header.readSize)<br>            frame_header_tree:add(<span class="hljs-string">"Header Data:"</span>, frame_header.headerData)<br>            pinfo.cols.info:append(<span class="hljs-string">" Len="</span> .. frame_header.readSize)<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-comment">-- Show the frame body information (if available) in Wireshark</span><br>        <span class="hljs-keyword">if</span> frame_header ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">and</span> frame_type ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">and</span> frame_body ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">and</span> frame_body[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">local</span> frame_body_tree = subtree:add(fields.frame_body, tvb(frame_header.headerSize))<br>            <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> array_iterator(frame_body, frame_body[<span class="hljs-number">0</span>]) <span class="hljs-keyword">do</span><br>                frame_body_tree:add(element)<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- register this dissector</span><br>DissectorTable.get(<span class="hljs-string">"tcp.port"</span>):add(PORT, rlpx)<br>DissectorTable.get(<span class="hljs-string">"tcp.port"</span>):add(<span class="hljs-string">"30303"</span>, rlpx)<br>DissectorTable.get(<span class="hljs-string">"tcp.port"</span>):add(<span class="hljs-string">"30304"</span>, rlpx)<br>DissectorTable.get(<span class="hljs-string">"tcp.port"</span>):add(<span class="hljs-string">"30305"</span>, rlpx)<br>DissectorTable.get(<span class="hljs-string">"tcp.port"</span>):add(<span class="hljs-string">"30306"</span>, rlpx)<br>DissectorTable.get(<span class="hljs-string">"tcp.port"</span>):add(<span class="hljs-string">"30307"</span>, rlpx)<br>DissectorTable.get(<span class="hljs-string">"tcp.port"</span>):add(<span class="hljs-string">"30308"</span>, rlpx)<br><br></code></pre></td></tr></table></figure><p>不知道怎么改，不懂lua</p><p>可能是lua版本问题，改天看下文档</p><p class='item-img' data-src='https://pic4.zhimg.com/80/v2-c9e81041466be372649c07a423f7f737_720w.webp'><img src="https://pic4.zhimg.com/80/v2-c9e81041466be372649c07a423f7f737_720w.webp" alt="img"></p><p class='item-img' data-src='https://pica.zhimg.com/80/v2-e8cfe5272808d7d34394ac62edb904f0_720w.webp'><img src="https://pica.zhimg.com/80/v2-e8cfe5272808d7d34394ac62edb904f0_720w.webp" alt="img"></p><p class='item-img' data-src='https://pic1.zhimg.com/80/v2-21289281388f179624bb09ba37c1cb60_720w.webp'><img src="https://pic1.zhimg.com/80/v2-21289281388f179624bb09ba37c1cb60_720w.webp" alt="img"><br>.webp)</p>]]></content>
    
    
    <summary type="html">项目复现日志(lua错误)</summary>
    
    
    
    
  </entry>
  
</feed>
